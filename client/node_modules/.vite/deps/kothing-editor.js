import {
  require_util
} from "./chunk-WJSINZ6E.js";
import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/kothing-editor/lib/assets/defaultIcons.js
var require_defaultIcons = __commonJS({
  "node_modules/kothing-editor/lib/assets/defaultIcons.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      redo: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M758.2 839.1C851.8 765.9 912 651.9 912 523.9 912 303 733.5 124.3 512.6 124 291.4 123.7 112 302.8 112 523.9c0 125.2 57.5 236.9 147.6 310.2 3.5 2.8 8.6 2.2 11.4-1.3l39.4-50.5c2.7-3.4 2.1-8.3-1.2-11.1-8.1-6.6-15.9-13.7-23.4-21.2-29.4-29.4-52.5-63.6-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7 29.4-29.4 63.6-52.5 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5 25.1c38.1 16.1 72.3 39.2 101.7 68.6 29.4 29.4 52.5 63.6 68.6 101.7 16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1 124.5c-16.1 38.1-39.2 72.3-68.6 101.7-9.3 9.3-19.1 18-29.3 26L668.2 724c-4.1-5.3-12.5-3.5-14.1 3l-39.6 162.2c-1.2 5 2.6 9.9 7.7 9.9l167 0.8c6.7 0 10.5-7.7 6.3-12.9l-37.3-47.9z" /></svg>',
      undo: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M511.4 124C290.5 124.3 112 303 112 523.9c0 128 60.2 242 153.8 315.2l-37.5 48c-4.1 5.3-0.3 13 6.3 12.9l167-0.8c5.2 0 9-4.9 7.7-9.9L369.8 727c-1.6-6.5-10-8.3-14.1-3L315 776.1c-10.2-8-20-16.7-29.3-26-29.4-29.4-52.5-63.6-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7 29.4-29.4 63.6-52.5 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5 25.1c38.1 16.1 72.3 39.2 101.7 68.6 29.4 29.4 52.5 63.6 68.6 101.7 16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1 124.5c-16.1 38.1-39.2 72.3-68.6 101.7-7.5 7.5-15.3 14.5-23.4 21.2-3.4 2.8-3.9 7.7-1.2 11.1l39.4 50.5c2.8 3.5 7.9 4.1 11.4 1.3C854.5 760.8 912 649.1 912 523.9c0-221.1-179.4-400.2-400.6-399.9z" /></svg>',
      bold: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M697.8 481.4c33.6-35 54.2-82.3 54.2-134.3v-10.2C752 229.3 663.9 142 555.3 142H259.4c-15.1 0-27.4 12.3-27.4 27.4v679.1c0 16.3 13.2 29.5 29.5 29.5h318.7c117 0 211.8-94.2 211.8-210.5v-11c0-73-37.4-137.3-94.2-175.1zM328 238h224.7c57.1 0 103.3 44.4 103.3 99.3v9.5c0 54.8-46.3 99.3-103.3 99.3H328V238z m366.6 429.4c0 62.9-51.7 113.9-115.5 113.9H328V542.7h251.1c63.8 0 115.5 51 115.5 113.9v10.8z" /></svg>',
      underline: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M824 804H200c-4.4 0-8 3.4-8 7.6v60.8c0 4.2 3.6 7.6 8 7.6h624c4.4 0 8-3.4 8-7.6v-60.8c0-4.2-3.6-7.6-8-7.6zM512 728c69.4 0 134.6-27.1 183.8-76.2C745 602.7 772 537.4 772 468V156c0-6.6-5.4-12-12-12h-60c-6.6 0-12 5.4-12 12v312c0 97-79 176-176 176s-176-79-176-176V156c0-6.6-5.4-12-12-12h-60c-6.6 0-12 5.4-12 12v312c0 69.4 27.1 134.6 76.2 183.8C377.3 701 442.6 728 512 728z" /></svg>',
      italic: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M798 160H366c-4.4 0-8 3.6-8 8v64c0 4.4 3.6 8 8 8h181.2l-156 544H229c-4.4 0-8 3.6-8 8v64c0 4.4 3.6 8 8 8h432c4.4 0 8-3.6 8-8v-64c0-4.4-3.6-8-8-8H474.4l156-544H798c4.4 0 8-3.6 8-8v-64c0-4.4-3.6-8-8-8z" /></svg>',
      strike: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M952 474H569.9c-10-2-20.5-4-31.6-6-15.9-2.9-22.2-4.1-30.8-5.8-51.3-10-82.2-20-106.8-34.2-35.1-20.5-52.2-48.3-52.2-85.1 0-37 15.2-67.7 44-89 28.4-21 68.8-32.1 116.8-32.1 54.8 0 97.1 14.4 125.8 42.8 14.6 14.4 25.3 32.1 31.8 52.6 1.3 4.1 2.8 10 4.3 17.8 0.9 4.8 5.2 8.2 9.9 8.2h72.8c5.6 0 10.1-4.6 10.1-10.1v-1c-0.7-6.8-1.3-12.1-2-16-7.3-43.5-28-81.7-59.7-110.3-44.4-40.5-109.7-61.8-188.7-61.8-72.3 0-137.4 18.1-183.3 50.9-25.6 18.4-45.4 41.2-58.6 67.7-13.5 27.1-20.3 58.4-20.3 92.9 0 29.5 5.7 54.5 17.3 76.5 8.3 15.7 19.6 29.5 34.1 42H72c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h433.2c2.1 0.4 3.9 0.8 5.9 1.2 30.9 6.2 49.5 10.4 66.6 15.2 23 6.5 40.6 13.3 55.2 21.5 35.8 20.2 53.3 49.2 53.3 89 0 35.3-15.5 66.8-43.6 88.8-30.5 23.9-75.6 36.4-130.5 36.4-43.7 0-80.7-8.5-110.2-25-29.1-16.3-49.1-39.8-59.7-69.5-0.8-2.2-1.7-5.2-2.7-9-1.2-4.4-5.3-7.5-9.7-7.5h-79.7c-5.6 0-10.1 4.6-10.1 10.1v1c0.2 2.3 0.4 4.2 0.6 5.7 6.5 48.8 30.3 88.8 70.7 118.8 47.1 34.8 113.4 53.2 191.8 53.2 84.2 0 154.8-19.8 204.2-57.3 25-18.9 44.2-42.2 57.1-69 13-27.1 19.7-57.9 19.7-91.5 0-31.8-5.8-58.4-17.8-81.4-5.8-11.2-13.1-21.5-21.8-30.8H952c4.4 0 8-3.6 8-8v-60c0-4.3-3.6-7.9-8-7.9z" /></svg>',
      subscript: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M359.936 529.8688l195.4816-195.5328a40.96 40.96 0 1 1 57.9584 57.9584L417.792 587.776l195.5328 195.4816a40.96 40.96 0 1 1-57.9584 57.9584L359.936 645.632l-195.4816 195.584a40.96 40.96 0 1 1-57.9584-57.9584L302.08 587.776 106.496 392.2944A40.96 40.96 0 1 1 164.4544 334.336l195.4816 195.584z m417.1264 400.8448h130.5088c13.0048 0 22.8864 2.56 29.696 7.7824a25.088 25.088 0 0 1 10.2912 21.1456 27.648 27.648 0 0 1-8.1408 20.1216c-5.376 5.5296-13.6192 8.2944-24.576 8.2944h-184.0128c-12.544 0-22.272-3.3792-29.2864-10.0864a31.7952 31.7952 0 0 1-10.496-23.7056c0-5.8368 2.2528-13.568 6.7584-23.1936a82.944 82.944 0 0 1 14.7456-22.7328c22.1696-22.3232 42.1888-41.472 60.0064-57.4464 17.8176-15.9744 30.5664-26.4704 38.2464-31.488 13.6704-9.3696 25.088-18.8416 34.1504-28.3136 9.0624-9.472 15.9744-19.2 20.736-29.184 4.7616-9.9328 7.1168-19.6608 7.1168-29.184a51.6096 51.6096 0 0 0-28.3648-46.9504 61.2864 61.2864 0 0 0-28.672-6.8096c-21.8112 0-38.9632 9.3184-51.456 27.9552a119.3984 119.3984 0 0 0-8.3968 19.968 82.3808 82.3808 0 0 1-13.2096 24.9856c-4.9152 5.8368-12.1344 8.704-21.6576 8.704a28.5696 28.5696 0 0 1-20.736-7.9872 29.0816 29.0816 0 0 1-8.2432-21.8624c0-11.1616 2.56-22.8352 7.7312-34.9696 5.1712-12.1856 12.9024-23.1936 23.1424-33.0752s23.2448-17.8688 39.0144-23.9104a153.4976 153.4976 0 0 1 55.3472-9.1136c25.4976 0 47.2576 3.8912 65.2288 11.6736a98.0992 98.0992 0 0 1 51.4048 52.8384 101.5808 101.5808 0 0 1-7.9872 91.8528c-10.24 16.384-20.736 29.2864-31.3856 38.6048-10.6496 9.3184-28.5696 23.9616-53.6576 43.8784-25.088 19.968-42.2912 35.3792-51.6096 46.3872a138.3936 138.3936 0 0 0-12.288 15.8208z"></path></svg>',
      superscript: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M802.6624 444.3136h130.5088c13.0048 0 22.8864 2.56 29.696 7.7824a25.088 25.088 0 0 1 10.2912 21.1456 27.648 27.648 0 0 1-8.1408 20.1216c-5.376 5.5296-13.6192 8.2944-24.576 8.2944h-184.0128c-12.544 0-22.272-3.3792-29.2864-10.0864a31.7952 31.7952 0 0 1-10.496-23.7056c0-5.8368 2.2528-13.568 6.7584-23.1936a82.944 82.944 0 0 1 14.7456-22.7328c22.1696-22.3232 42.1888-41.472 60.0064-57.4464 17.8176-15.9744 30.5664-26.4704 38.2464-31.488 13.6704-9.3696 25.088-18.8416 34.1504-28.3136 9.0624-9.472 15.9744-19.2 20.736-29.184 4.7616-9.9328 7.1168-19.6608 7.1168-29.184a51.6096 51.6096 0 0 0-28.3648-46.9504 61.2864 61.2864 0 0 0-28.672-6.8096c-21.8112 0-38.9632 9.3184-51.456 27.9552a119.3984 119.3984 0 0 0-8.3968 19.968 82.3808 82.3808 0 0 1-13.2096 24.9856c-4.9152 5.8368-12.1344 8.704-21.6576 8.704a28.5696 28.5696 0 0 1-20.736-7.9872 29.0816 29.0816 0 0 1-8.2432-21.8624c0-11.1616 2.56-22.8352 7.7312-34.9696 5.1712-12.1856 12.9024-23.1936 23.1424-33.0752s23.2448-17.8688 39.0144-23.9104a153.4976 153.4976 0 0 1 55.3472-9.1136c25.4976 0 47.2576 3.8912 65.2288 11.6736a98.0992 98.0992 0 0 1 51.4048 52.8384 101.5808 101.5808 0 0 1-7.9872 91.8528c-10.24 16.384-20.736 29.2864-31.3856 38.6048-10.6496 9.3184-28.5696 23.9616-53.6576 43.8784-25.088 19.968-42.2912 35.3792-51.6096 46.3872a138.3936 138.3936 0 0 0-12.288 15.8208zM359.936 529.8688l195.4816-195.5328a40.96 40.96 0 1 1 57.9584 57.9584L417.792 587.776l195.5328 195.4816a40.96 40.96 0 1 1-57.9584 57.9584L359.936 645.632l-195.4816 195.584a40.96 40.96 0 1 1-57.9584-57.9584L302.08 587.776 106.496 392.2944A40.96 40.96 0 1 1 164.4544 334.336l195.4816 195.584z"></path></svg>',
      erase: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M651.229 199.033c-6.769-6.77-17.845-6.77-24.615 0L74.612 751.036c-6.769 6.768-6.769 17.845 0 24.614l107.36 107.361c6.77 6.769 20.14 12.307 29.713 12.307H555.62c9.572 0 22.944-5.538 29.712-12.307l362.63-362.628c6.77-6.769 6.77-17.845 0-24.615L651.23 199.033zM551.187 817.522c-6.769 6.768-20.14 12.307-29.712 12.307H255.194c-9.573 0-22.944-5.539-29.712-12.307l-50.61-50.61c-6.769-6.769-6.769-17.845 0-24.615l202.36-202.361c6.77-6.768 17.846-6.768 24.616 0l201.155 201.156c6.769 6.768 6.769 17.845 0 24.614l-51.816 51.816z" /></svg>',
      indent: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM400 646c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zM904 160H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 792H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM142.4 642.1L298.7 519c4.5-3.5 4.5-10.3 0-13.9L142.4 381.9c-5.8-4.6-14.4-0.5-14.4 6.9v246.3c0 7.4 8.5 11.6 14.4 7z" /></svg>',
      outdent: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM400 646c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zM904 160H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 792H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM115.4 518.9L271.7 642c5.8 4.6 14.4 0.5 14.4-6.9V388.9c0-7.4-8.5-11.5-14.4-6.9L115.4 505.1c-4.5 3.5-4.5 10.3 0 13.8z" /></svg>',
      expansion: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M342 88H120c-17.7 0-32 14.3-32 32v224c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16V168h174c8.8 0 16-7.2 16-16v-48c0-8.8-7.2-16-16-16zM920 664h-48c-8.8 0-16 7.2-16 16v176H682c-8.8 0-16 7.2-16 16v48c0 8.8 7.2 16 16 16h222c17.7 0 32-14.3 32-32V680c0-8.8-7.2-16-16-16zM342 856H168V680c0-8.8-7.2-16-16-16h-48c-8.8 0-16 7.2-16 16v224c0 17.7 14.3 32 32 32h222c8.8 0 16-7.2 16-16v-48c0-8.8-7.2-16-16-16zM904 88H682c-8.8 0-16 7.2-16 16v48c0 8.8 7.2 16 16 16h174v176c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16V120c0-17.7-14.3-32-32-32z" /></svg>',
      reduction: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M326 664H104c-8.8 0-16 7.2-16 16v48c0 8.8 7.2 16 16 16h174v176c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16V696c0-17.7-14.3-32-32-32zM342 88h-48c-8.8 0-16 7.2-16 16v176H104c-8.8 0-16 7.2-16 16v48c0 8.8 7.2 16 16 16h222c17.7 0 32-14.3 32-32V104c0-8.8-7.2-16-16-16zM920 664H698c-17.7 0-32 14.3-32 32v224c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16V744h174c8.8 0 16-7.2 16-16v-48c0-8.8-7.2-16-16-16zM920 280H746V104c0-8.8-7.2-16-16-16h-48c-8.8 0-16 7.2-16 16v224c0 17.7 14.3 32 32 32h222c8.8 0 16-7.2 16-16v-48c0-8.8-7.2-16-16-16z" /></svg>',
      code_view: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M438.4 849.1l222.7-646.7c0.2-0.5 0.3-1.1 0.4-1.6L438.4 849.1zM661.2 168.7h-67.5c-3.4 0-6.5 2.2-7.6 5.4L354.7 846c-0.3 0.8-0.4 1.7-0.4 2.6 0 4.4 3.6 8 8 8h67.8c3.4 0 6.5-2.2 7.6-5.4l0.7-2.1 223.1-648.3 7.4-21.4c0.3-0.8 0.4-1.7 0.4-2.6-0.1-4.5-3.6-8.1-8.1-8.1zM954.6 502.1c-0.8-1-1.7-1.9-2.7-2.7l-219-171.3c-3.5-2.7-8.5-2.1-11.2 1.4-1.1 1.4-1.7 3.1-1.7 4.9v81.3c0 2.5 1.1 4.8 3.1 6.3l115 90-115 90c-1.9 1.5-3.1 3.8-3.1 6.3v81.3c0 4.4 3.6 8 8 8 1.8 0 3.5-0.6 4.9-1.7l219-171.3c6.9-5.4 8.2-15.5 2.7-22.5zM291.1 328.1l-219 171.3c-1 0.8-1.9 1.7-2.7 2.7-5.4 7-4.2 17 2.7 22.5l219 171.3c1.4 1.1 3.1 1.7 4.9 1.7 4.4 0 8-3.6 8-8v-81.3c0-2.5-1.1-4.8-3.1-6.3l-115-90 115-90c1.9-1.5 3.1-3.8 3.1-6.3v-81.3c0-1.8-0.6-3.5-1.7-4.9-2.7-3.5-7.7-4.1-11.2-1.4z" /></svg>',
      preview: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M646.656 284.672c0-19.968-19.456-35.84-43.52-35.84H243.712c-24.064 0-43.52 15.872-43.52 35.84 0 19.968 19.456 35.84 43.52 35.84h358.912c24.576 0 43.52-15.36 44.032-35.84zM404.48 466.432c0-19.968-19.456-35.84-43.52-35.84H243.712c-24.064 0-43.52 15.872-43.52 35.84 0 19.968 19.456 35.84 43.52 35.84h117.248c24.576 0 43.52-15.36 43.52-35.84zM318.976 641.536H243.712c-24.064 0-43.52 15.872-43.52 35.84 0 19.968 19.456 35.84 43.52 35.84h74.752c24.576 0 43.52-15.872 43.52-35.84 0.512-19.968-18.944-35.84-43.008-35.84zM942.08 908.288l-112.64-111.616c48.128-47.104 78.336-112.128 78.336-184.32 0-142.336-116.736-258.048-260.096-258.048-143.36 0-260.096 115.712-260.096 258.048S504.32 870.4 647.68 870.4c37.376 0 72.704-8.192 104.448-22.016L877.568 972.8c9.216 8.704 20.48 12.8 32.256 12.8 11.776 0 23.04-4.096 31.744-12.8a46.592 46.592 0 0 0 0.512-64.512z m-294.4-117.248c-99.328 0-180.224-80.384-180.224-178.688s80.896-178.688 180.224-178.688 180.224 80.384 180.224 178.688-80.896 178.688-180.224 178.688zM140.288 812.544V141.824c0-17.408 14.336-31.744 31.744-31.744h539.136c17.408 0 31.744 14.336 31.744 31.744V353.28h71.68V141.824c0-56.832-46.08-103.424-103.424-103.424H172.032c-56.832 0-103.424 46.08-103.424 103.424v670.72c0 56.832 46.08 103.424 103.424 103.424h335.36v-71.68H172.032c-17.408 0-31.744-14.336-31.744-31.744z"></path></svg>',
      print: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M820 436h-40c-4.4 0-8 3.6-8 8v40c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-40c0-4.4-3.6-8-8-8zM852 332H732V120c0-4.4-3.6-8-8-8H300c-4.4 0-8 3.6-8 8v212H172c-44.2 0-80 35.8-80 80v328c0 17.7 14.3 32 32 32h168v132c0 4.4 3.6 8 8 8h424c4.4 0 8-3.6 8-8V772h168c17.7 0 32-14.3 32-32V412c0-44.2-35.8-80-80-80zM360 180h304v152H360V180z m304 664H360V568h304v276z m200-140H732V500H292v204H160V412c0-6.6 5.4-12 12-12h680c6.6 0 12 5.4 12 12v292z" /></svg>',
      template: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M410.055 157.468h198.201c22.983 0 42.325-22.983 42.325-49.607s-19.342-49.607-43.463-49.607h-196.95c-24.234 0-43.576 22.983-43.576 49.607s19.342 49.607 43.463 49.607z m310.727 484.125H295.253c-15.701 0-29.013 13.312-29.013 29.013s13.312 29.014 29.013 29.014H721.92c15.701 0 29.013-13.312 29.013-29.014-1.137-16.839-14.45-29.013-30.15-29.013z m0-170.667H295.253c-15.701 0-29.013 13.312-29.013 29.014s13.312 29.013 29.013 29.013H721.92c15.701 0 29.013-13.312 29.013-29.013-1.137-16.84-14.45-29.014-30.15-29.014zM266.24 342.7c0 15.701 13.312 29.013 29.013 29.013H721.92c15.701 0 29.013-13.312 29.013-29.013s-13.312-29.014-29.013-29.014H295.253c-15.701-0.113-29.013 13.199-29.013 29.014zM821.02 86.016h-56.775c-15.701 0-33.905 9.671-33.905 25.372s18.09 31.517 33.905 31.517h56.775c33.792 0 56.776 22.983 56.776 56.889v654.79c0 33.907-22.984 56.89-56.776 56.89H209.465c-33.906 0-71.339-22.983-71.339-56.89v-654.79c0-33.906 22.983-56.89 56.775-56.89h71.339c15.701 0 21.732-15.7 21.732-31.516s-6.03-25.372-21.732-25.372h-71.339c-79.758 0-113.664 49.607-113.664 115.03v647.622c0 70.201 42.326 119.808 119.695 119.808H814.99c77.37 0 119.694-41.187 119.694-119.808V201.045c0-65.422-39.936-115.029-113.664-115.029z"></path></svg>',
      line_height: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M657.067 136.533H76.8c-4.693 0-8.533 3.84-8.533 8.534V281.6c0 4.693 3.84 8.533 8.533 8.533h59.733c4.694 0 8.534-3.84 8.534-8.533v-68.267h179.2v597.334h-98.134c-4.693 0-8.533 3.84-8.533 8.533v59.733c0 4.694 3.84 8.534 8.533 8.534h281.6c4.694 0 8.534-3.84 8.534-8.534V819.2c0-4.693-3.84-8.533-8.534-8.533H409.6V213.333h179.2V281.6c0 4.693 3.84 8.533 8.533 8.533h59.734c4.693 0 8.533-3.84 8.533-8.533V145.067c0-4.694-3.84-8.534-8.533-8.534z m290.986 582.4h-69.12V305.067h69.12c6.4 0 10.027-7.467 6.08-12.48L846.613 156.48c-3.093-3.947-9.066-3.947-12.053 0L727.04 292.587c-3.947 5.013-0.427 12.48 6.08 12.48h69.013v413.866h-69.12c-6.4 0-10.026 7.467-6.08 12.48l107.52 136c3.094 3.947 9.067 3.947 12.054 0l107.52-136c4.053-5.013 0.426-12.48-5.974-12.48z" /></svg>',
      paragraph_style: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M512 256v640h-85.333333v-213.333333a256 256 0 1 1 0-512h426.666666v85.333333h-128v640h-85.333333V256h-128z m-85.333333 0a170.666667 170.666667 0 1 0 0 341.333333V256z"></path></svg>',
      text_style: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M890.592 729.19V296.255a115.329 115.329 0 1 0-140.099-163.93H268.452A115.257 115.257 0 1 0 135.213 298.42v428.602A115.293 115.293 0 1 0 270.98 888.426h476.987A115.293 115.293 0 1 0 890.592 729.19z m-39.719-590.727a49.468 49.468 0 1 1-49.467 49.468 49.324 49.324 0 0 1 49.467-49.468zM117.881 187.93a49.468 49.468 0 1 1 49.468 49.468 49.54 49.54 0 0 1-49.468-49.468z m49.468 698.69a49.468 49.468 0 1 1 49.468-49.469 49.324 49.324 0 0 1-49.468 49.468z m569.423-64.634h-454.96a115.834 115.834 0 0 0-80.882-94.964V298.06a114.896 114.896 0 0 0 80.882-99.297h454.6a115.076 115.076 0 0 0 87.742 101.464v424.99a114.787 114.787 0 0 0-87.382 96.77z m114.101 64.633a49.468 49.468 0 1 1 49.468-49.468 49.324 49.324 0 0 1-49.468 49.468zM539.262 283.256a4.983 4.983 0 0 1-1.084-1.444 33.544 33.544 0 0 0-17.332-21.665 32.822 32.822 0 0 0-44.051 15.526L274.95 695.61a32.822 32.822 0 0 0 15.526 44.052 33.725 33.725 0 0 0 14.444 3.25 33.292 33.292 0 0 0 29.97-18.777l64.272-133.6h211.592a10.58 10.58 0 0 0 3.25-0.721l67.883 141.543a33.292 33.292 0 0 0 29.97 18.776 34.953 34.953 0 0 0 14.443-3.25 32.93 32.93 0 0 0 15.526-44.051zM430.576 524.818l75.466-157.43 75.466 157.43z" /></svg>',
      save: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M893.3 293.3L730.7 130.7c-7.5-7.5-16.7-13-26.7-16V112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V338.5c0-17-6.7-33.2-18.7-45.2zM384 184h256v104H384V184z m456 656H184V184h136v136c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V205.8l136 136V840zM512 442c-79.5 0-144 64.5-144 144s64.5 144 144 144 144-64.5 144-144-64.5-144-144-144z m0 224c-44.2 0-80-35.8-80-80s35.8-80 80-80 80 35.8 80 80-35.8 80-80 80z" /></svg>',
      blockquote: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 475.082 475.081"><g><path d="M164.45,219.27h-63.954c-7.614,0-14.087-2.664-19.417-7.994c-5.327-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.416-51.678c14.276-14.272,31.503-21.411,51.678-21.411h18.271c4.948,0,9.229-1.809,12.847-5.424c3.616-3.617,5.424-7.898,5.424-12.847V54.819c0-4.948-1.809-9.233-5.424-12.85c-3.617-3.612-7.898-5.424-12.847-5.424h-18.271c-19.797,0-38.684,3.858-56.673,11.563c-17.987,7.71-33.545,18.132-46.68,31.267c-13.134,13.129-23.553,28.688-31.262,46.677C3.855,144.039,0,162.931,0,182.726v200.991c0,15.235,5.327,28.171,15.986,38.834c10.66,10.657,23.606,15.985,38.832,15.985h109.639c15.225,0,28.167-5.328,38.828-15.985c10.657-10.663,15.987-23.599,15.987-38.834V274.088c0-15.232-5.33-28.168-15.994-38.832C192.622,224.6,179.675,219.27,164.45,219.27z"/><path d="M459.103,235.256c-10.656-10.656-23.599-15.986-38.828-15.986h-63.953c-7.61,0-14.089-2.664-19.41-7.994c-5.332-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.409-51.678c14.271-14.272,31.497-21.411,51.682-21.411h18.267c4.949,0,9.233-1.809,12.848-5.424c3.613-3.617,5.428-7.898,5.428-12.847V54.819c0-4.948-1.814-9.233-5.428-12.85c-3.614-3.612-7.898-5.424-12.848-5.424h-18.267c-19.808,0-38.691,3.858-56.685,11.563c-17.984,7.71-33.537,18.132-46.672,31.267c-13.135,13.129-23.559,28.688-31.265,46.677c-7.707,17.987-11.567,36.879-11.567,56.674v200.991c0,15.235,5.332,28.171,15.988,38.834c10.657,10.657,23.6,15.985,38.828,15.985h109.633c15.229,0,28.171-5.328,38.827-15.985c10.664-10.663,15.985-23.599,15.985-38.834V274.088C475.082,258.855,469.76,245.92,459.103,235.256z"/></g></svg>',
      arrow_down: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 15.73 8.67"><g><path d="M18.79,7.52a.8.8,0,0,1,.56-.23.82.82,0,0,1,.79.79.8.8,0,0,1-.23.56l-7.07,7.07a.79.79,0,0,1-.57.25.77.77,0,0,1-.57-.25h0L4.64,8.65a.8.8,0,0,1-.23-.57.82.82,0,0,1,.79-.79.8.8,0,0,1,.56.23L12.28,14l3.26-3.26,3.25-3.26Z" transform="translate(-4.41 -7.29)"/></g></svg>',
      align_justify: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M163.84 204.8h696.32c5.632 0 10.24 4.608 10.24 10.24v59.392a10.24 10.24 0 0 1-10.24 10.24H163.84a10.24 10.24 0 0 1-10.24-10.24V215.04c0-5.632 4.608-10.24 10.24-10.24z m0 585.728h696.32c5.632 0 10.24 4.608 10.24 10.24v59.392a10.24 10.24 0 0 1-10.24 10.24H163.84a10.24 10.24 0 0 1-10.24-10.24v-59.392c0-5.632 4.608-10.24 10.24-10.24z m0-390.5024h696.32c5.632 0 10.24 4.608 10.24 10.24v59.392a10.24 10.24 0 0 1-10.24 10.24H163.84a10.24 10.24 0 0 1-10.24-10.24v-59.392c0-5.632 4.608-10.24 10.24-10.24z m0 195.2768h696.32c5.632 0 10.24 4.608 10.24 10.24v59.392a10.24 10.24 0 0 1-10.24 10.24H163.84a10.24 10.24 0 0 1-10.24-10.24v-59.392c0-5.632 4.608-10.24 10.24-10.24z"></path></svg>',
      align_left: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M120 230h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM120 654h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM904 794H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 370H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z" /></svg>',
      align_right: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M904 158H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 582H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 794H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 370H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z" /></svg>',
      align_center: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M264 230h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H264c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM760 654c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H264c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496zM904 794H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 370H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z" /></svg>',
      font: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M170.464 313.527l-25.094 0 3.812-177.812 717.765 0 3.812 177.812-23.453 0c-8.359-48.719-19.812-83.906-34.359-105.547-14.547-21.625-30.188-34.906-46.906-39.812s-45.266-7.359-85.625-7.359L561.526 160.809l0 521.953c0 57.812 1.359 95.812 4.078 114s10.094 31.641 22.094 40.359 34.531 13.078 67.625 13.078l36 0 0 25.094L322.636 875.293l0-25.094 38.172 0c31.625 0 53.531-4 65.719-12s20-20.453 23.453-37.359 5.188-56.266 5.188-118.078L455.168 160.808 345.542 160.808c-47.641 0-79.641 2.281-96 6.812-16.375 4.547-31.734 18.281-46.094 41.188S178.089 266.621 170.464 313.527z"></path></svg>',
      font_size: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M920 416H616c-4.4 0-8 3.6-8 8v112c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-56h60v320h-46c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h164c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8h-46V480h60v56c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V424c0-4.4-3.6-8-8-8zM656 296V168c0-4.4-3.6-8-8-8H104c-4.4 0-8 3.6-8 8v128c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-64h168v560h-92c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h264c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8h-92V232h168v64c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8z"></path></svg>',
      font_color: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M904 816H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8zM253.7 736h85c4.2 0 8-2.7 9.3-6.8l53.7-166h219.2l53.2 166c1.3 4 5 6.8 9.3 6.8h89.1c1.1 0 2.2-0.2 3.2-0.5 5.1-1.8 7.8-7.3 6-12.4L573.6 118.6c-1.4-3.9-5.1-6.6-9.2-6.6H462.1c-4.2 0-7.9 2.6-9.2 6.6L244.5 723.1c-0.4 1-0.5 2.1-0.5 3.2-0.1 5.3 4.3 9.7 9.7 9.7z m255.9-516.1h4.1l83.8 263.8H424.9l84.7-263.8z" /></svg>',
      format_block: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M725.333333 469.333333V170.666667h85.333334v725.333333h-85.333334v-341.333333H298.666667v341.333333H213.333333V170.666667h85.333334v298.666666z"></path></svg>',
      highlight_color: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M766.4 744.3c43.7 0 79.4-36.2 79.4-80.5 0-53.5-79.4-140.8-79.4-140.8S687 610.3 687 663.8c0 44.3 35.7 80.5 79.4 80.5zM389.3 700.2c7.1 7.1 18.6 7.1 25.6 0l256.1-256c7.1-7.1 7.1-18.6 0-25.6l-256-256c-0.6-0.6-1.3-1.2-2-1.7l-78.2-78.2c-3.5-3.5-9.3-3.5-12.8 0l-48 48c-3.5 3.5-3.5 9.3 0 12.8l67.2 67.2-207.8 207.9c-7.1 7.1-7.1 18.6 0 25.6l255.9 256z m12.9-448.6l178.9 178.9H223.4l178.8-178.9zM904 816H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8z" /></svg>',
      list_bullets: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM912 476H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM912 760H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM160 228m-56 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0ZM160 512m-56 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0ZM160 796m-56 0a56 56 0 1 0 112 0 56 56 0 1 0-112 0Z" /></svg>',
      list_number: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M978.285714 795.428571H310.857143c-5.028571 0-9.142857 4.114286-9.142857 9.142858v64c0 5.028571 4.114286 9.142857 9.142857 9.142857h667.428571c5.028571 0 9.142857-4.114286 9.142857-9.142857v-64c0-5.028571-4.114286-9.142857-9.142857-9.142858z m0-649.142857H310.857143c-5.028571 0-9.142857 4.114286-9.142857 9.142857v64c0 5.028571 4.114286 9.142857 9.142857 9.142858h667.428571c5.028571 0 9.142857-4.114286 9.142857-9.142858v-64c0-5.028571-4.114286-9.142857-9.142857-9.142857z m0 324.571429H310.857143c-5.028571 0-9.142857 4.114286-9.142857 9.142857v64c0 5.028571 4.114286 9.142857 9.142857 9.142857h667.428571c5.028571 0 9.142857-4.114286 9.142857-9.142857v-64c0-5.028571-4.114286-9.142857-9.142857-9.142857zM173.714286 740.571429H41.142857c-2.514286 0-4.571429 2.057143-4.571428 4.571428v38.857143c0 2.514286 2.057143 4.571429 4.571428 4.571429h82.742857v23.428571h-40.8c-2.514286 0-4.571429 2.057143-4.571428 4.571429v38.857142c0 2.514286 2.057143 4.571429 4.571428 4.571429h40.8V884.571429H41.142857c-2.514286 0-4.571429 2.057143-4.571428 4.571428v38.857143c0 2.514286 2.057143 4.571429 4.571428 4.571429h132.571429c2.514286 0 4.571429-2.057143 4.571428-4.571429V745.142857c0-2.514286-2.057143-4.571429-4.571428-4.571428zM41.142857 141.714286h43.428572v137.142857c0 2.514286 2.057143 4.571429 4.571428 4.571428h45.714286c2.514286 0 4.571429-2.057143 4.571428-4.571428V100.571429c0-5.028571-4.114286-9.142857-9.142857-9.142858h-89.142857c-2.514286 0-4.571429 2.057143-4.571428 4.571429v41.142857c0 2.514286 2.057143 4.571429 4.571428 4.571429z m132.571429 274.285714H41.142857c-2.514286 0-4.571429 2.057143-4.571428 4.571429v41.142857c0 2.514286 2.057143 4.571429 4.571428 4.571428h78.171429l-80.342857 88.8a9.485714 9.485714 0 0 0-2.4 6.171429V603.428571c0 2.514286 2.057143 4.571429 4.571428 4.571429h132.571429c2.514286 0 4.571429-2.057143 4.571428-4.571429v-41.142857c0-2.514286-2.057143-4.571429-4.571428-4.571428h-78.171429l80.342857-88.8a9.485714 9.485714 0 0 0 2.4-6.171429V420.571429c0-2.514286-2.057143-4.571429-4.571428-4.571429z" /></svg>',
      table: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M513.7 120.1h385.5c44.3 0 59.5 15 59.5 59 0 221.1 0 442.3-0.1 663.4 0 44.6-14.8 59.6-58.8 59.6-259.2 0.1-518.5 0.1-777.7 0-41 0-57.1-15.7-57.1-56.8-0.2-223.4-0.2-446.8 0-670.1 0-39.6 16.2-55 56.5-55.1 130.7-0.1 261.4 0 392.2 0zM345.3 693.2h-222v150.7h222V693.2z m277 151.6V693.9H401.5v150.9h220.8z m55.9-1.2h222.2V693.5H678.2v150.1zM123.6 490.9v149.4h221V490.9h-221zM678 642.3c72.4 0 142.3 0.2 212.2-0.5 3.8 0 10.7-6.6 10.7-10.3 0.7-46.7 0.5-93.3 0.5-139.8H677.9c0.1 50.4 0.1 98.7 0.1 150.6z m-277.5-1.8h222.1V491.6H400.5v148.9z m-55.7-200.9V289.4H121.9c0 46.8-0.5 91.5 0.6 136.1 0.1 4.8 9.2 13.4 14.2 13.5 68.6 0.9 137.3 0.6 208.1 0.6z m56.3-2.1h221V288.8h-221v148.7z m498.8 0.7V288.7H678.5v149.5h221.4z"></path></svg>',
      horizontal_rule: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 15.74 2.24"><g><path d="M20.15,12.75V10.51H4.41v2.24H20.15Z" transform="translate(-4.41 -10.51)"/></g></svg>',
      show_blocks: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M848 160.7c8.7 0 16 7.3 16 16v140c0 8.7-7.3 16-16 16H179.5c-8.7 0-16-7.3-16-16v-140c0-8.7 7.3-16 16-16H848m0-64H179.5c-44 0-80 36-80 80v140c0 44 36 80 80 80H848c44 0 80-36 80-80v-140c0-44-36-80-80-80zM344.9 516.1c8.7 0 16 7.3 16 16V846c0 8.7-7.3 16-16 16H179.5c-8.7 0-16-7.3-16-16V532.1c0-8.7 7.3-16 16-16h165.4m0-64H179.5c-44 0-80 36-80 80V846c0 44 36 80 80 80h165.4c44 0 80-36 80-80V532.1c0-44-36-80-80-80zM848 516.1c8.7 0 16 7.3 16 16V846c0 8.7-7.3 16-16 16H596.1c-8.7 0-16-7.3-16-16V532.1c0-8.7 7.3-16 16-16H848m0-64H596.1c-44 0-80 36-80 80V846c0 44 36 80 80 80H848c44 0 80-36 80-80V532.1c0-44-36-80-80-80z"></path></svg>',
      cancel: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 15.74 15.74"><g><path d="M14.15,11.63l5.61,5.61a1.29,1.29,0,0,1,.38.93,1.27,1.27,0,0,1-.4.93,1.25,1.25,0,0,1-.92.4,1.31,1.31,0,0,1-.94-.4l-5.61-5.61L6.67,19.1a1.31,1.31,0,0,1-.94.4,1.24,1.24,0,0,1-.92-.4,1.27,1.27,0,0,1-.4-.93,1.33,1.33,0,0,1,.38-.93l5.61-5.63L4.79,6a1.26,1.26,0,0,1-.38-.93,1.22,1.22,0,0,1,.4-.92,1.28,1.28,0,0,1,.92-.39,1.38,1.38,0,0,1,.94.38l5.61,5.61,5.61-5.61a1.33,1.33,0,0,1,.94-.38,1.26,1.26,0,0,1,.92.39,1.24,1.24,0,0,1,.4.92,1.29,1.29,0,0,1-.39.93L17,8.81l-2.8,2.82Z" transform="translate(-4.41 -3.76)"/></g></svg>',
      image: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32z m-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792z m0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2zM304 456c48.6 0 88-39.4 88-88s-39.4-88-88-88-88 39.4-88 88 39.4 88 88 88z m0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z" /></svg>',
      audio: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M842 454c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 140.3-113.7 254-254 254S258 594.3 258 454c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8 0 168.7 126.6 307.9 290 327.6V884H326.7c-13.7 0-24.7 14.3-24.7 32v36c0 4.4 2.8 8 6.2 8h407.6c3.4 0 6.2-3.6 6.2-8v-36c0-17.7-11-32-24.7-32H548V782.1c165.3-18 294-158 294-328.1zM512 624c93.9 0 170-75.2 170-168V232c0-92.8-76.1-168-170-168s-170 75.2-170 168v224c0 92.8 76.1 168 170 168z m-94-392c0-50.6 41.9-92 94-92s94 41.4 94 92v224c0 50.6-41.9 92-94 92s-94-41.4-94-92V232z" /></svg>',
      video: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M912 302.3L784 376V224c0-35.3-28.7-64-64-64H128c-35.3 0-64 28.7-64 64v576c0 35.3 28.7 64 64 64h592c35.3 0 64-28.7 64-64V648l128 73.7c21.3 12.3 48-3.1 48-27.6V330c0-24.6-26.7-40-48-27.7zM712 792H136V232h576v560z m176-167l-104-59.8V458.9L888 399v226zM208 360h112c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H208c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" /></svg>',
      link: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M574 665.4c-3.1-3.1-8.2-3.1-11.3 0L446.5 781.6c-53.8 53.8-144.6 59.5-204 0-59.5-59.5-53.8-150.2 0-204l116.2-116.2c3.1-3.1 3.1-8.2 0-11.3l-39.8-39.8c-3.1-3.1-8.2-3.1-11.3 0L191.4 526.5c-84.6 84.6-84.6 221.5 0 306s221.5 84.6 306 0l116.2-116.2c3.1-3.1 3.1-8.2 0-11.3L574 665.4zM832.6 191.4c-84.6-84.6-221.5-84.6-306 0L410.3 307.6c-3.1 3.1-3.1 8.2 0 11.3l39.7 39.7c3.1 3.1 8.2 3.1 11.3 0l116.2-116.2c53.8-53.8 144.6-59.5 204 0 59.5 59.5 53.8 150.2 0 204L665.3 562.6c-3.1 3.1-3.1 8.2 0 11.3l39.8 39.8c3.1 3.1 8.2 3.1 11.3 0l116.2-116.2c84.5-84.6 84.5-221.5 0-306.1zM610.1 372.3c-3.1-3.1-8.2-3.1-11.3 0L372.3 598.7c-3.1 3.1-3.1 8.2 0 11.3l39.6 39.6c3.1 3.1 8.2 3.1 11.3 0l226.4-226.4c3.1-3.1 3.1-8.2 0-11.3l-39.5-39.6z" /></svg>',
      unlink: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.74 15.72"><g><path d="M13.05,13.63a.24.24,0,0,1,.15.22L13.42,16a.19.19,0,0,1-.08.18l-2.12,2.14a4.08,4.08,0,0,1-1.29.85A4,4,0,0,1,4.71,17a3.92,3.92,0,0,1-.3-1.52A4,4,0,0,1,4.71,14a3.91,3.91,0,0,1,.87-1.3L7.7,10.56a.25.25,0,0,1,.2-.06l2.17.22a.21.21,0,0,1,.19.15.24.24,0,0,1,0,.25L7.12,14.23a1.81,1.81,0,0,0,0,2.58,1.78,1.78,0,0,0,1.29.52,1.74,1.74,0,0,0,1.28-.52L12.8,13.7a.24.24,0,0,1,.25-.07ZM19,4.92a4,4,0,0,1,0,5.66L16.86,12.7a.25.25,0,0,1-.17.08l-2.2-.23a.21.21,0,0,1-.19-.15.22.22,0,0,1,0-.25L17.44,9a1.81,1.81,0,0,0,0-2.58,1.78,1.78,0,0,0-1.29-.52,1.74,1.74,0,0,0-1.28.52L11.76,9.57a.21.21,0,0,1-.25,0,.24.24,0,0,1-.16-.21l-.22-2.17a.19.19,0,0,1,.08-.18l2.12-2.14a4.08,4.08,0,0,1,1.29-.85,4.05,4.05,0,0,1,3.06,0,3.85,3.85,0,0,1,1.3.85ZM5.84,9.82a.25.25,0,0,1-.18-.08.19.19,0,0,1-.07-.19l.11-.77a.2.2,0,0,1,.11-.17.24.24,0,0,1,.2,0l2.5.72a.25.25,0,0,1,.15.27.22.22,0,0,1-.23.21l-2.59,0Zm4.12-2-.73-2.5a.27.27,0,0,1,0-.2A.21.21,0,0,1,9.41,5L10.19,5a.25.25,0,0,1,.19,0,.23.23,0,0,1,.08.18l-.05,2.61a.2.2,0,0,1-.19.23h0A.22.22,0,0,1,10,7.85Zm8.76,5.58a.25.25,0,0,1,.18.08.23.23,0,0,1,.06.2l-.11.77a.25.25,0,0,1-.11.17.21.21,0,0,1-.12,0l-.08,0L16,14a.25.25,0,0,1-.15-.27.22.22,0,0,1,.22-.21l1.29,0,1.33,0Zm-4.12,2,.74,2.51a.28.28,0,0,1,0,.2.23.23,0,0,1-.18.11l-.8.11a.23.23,0,0,1-.17-.07.25.25,0,0,1-.08-.18l0-2.61a.22.22,0,0,1,.22-.22.21.21,0,0,1,.26.15Z" transform="translate(-4.41 -3.77)"/></g></svg>',
      math: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 1024 1024"><path d="M643.015111 128c9.557333 0 18.773333 3.811556 25.486222 10.581333l0.398223 0.398223 88.974222 91.989333a36.010667 36.010667 0 0 1-51.313778 50.460444l-0.455111-0.398222-78.392889-81.009778H167.025778l196.835555 293.432889a36.010667 36.010667 0 0 1 0.227556 39.822222l-0.284445 0.455112-196.892444 290.247111h460.8l78.392889-81.009778a36.010667 36.010667 0 0 1 50.517333-1.251556l0.398222 0.398223c14.165333 13.653333 14.677333 36.181333 1.251556 50.460444l-0.398222 0.455111-88.974222 91.989333a36.010667 36.010667 0 0 1-25.372445 10.979556H98.986667a36.010667 36.010667 0 0 1-30.264889-55.466667l0.512-0.739555 221.297778-326.428445-220.899556-329.329777a36.010667 36.010667 0 0 1 29.013333-56.035556h544.369778z m306.460445 262.542222c13.880889 13.937778 14.051556 36.408889 0.398222 50.517334L878.876444 512l70.542223 70.542222a36.010667 36.010667 0 0 1-50.460445 51.313778l-0.398222-0.398222-70.542222-70.599111-70.542222 70.599111a36.010667 36.010667 0 0 1-51.370667-50.517334L777.102222 512l-70.542222-70.542222a36.010667 36.010667 0 0 1 50.460444-51.313778l70.940445 70.940444 70.542222-70.542222a36.010667 36.010667 0 0 1 50.972445 0z"></path></svg>',
      table_header: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.75 15.74"><g><path d="M17,19.5v-.78H15.5v.78H17Zm-3,0v-.78H12.5v.78H14Zm-3,0v-.78H9.53v.78H11Zm-3,0v-.78H6.53v.78H8Zm10.55,0a1.73,1.73,0,0,0,.85-.35,1.67,1.67,0,0,0,.56-.76l-.71-.31a1.21,1.21,0,0,1-.35.4,1.34,1.34,0,0,1-.53.23l.08.38c.06.24.09.38.1.41Zm-13.7-.63.55-.55A.77.77,0,0,1,5.25,18a1.31,1.31,0,0,1-.06-.38v-.38H4.41v.38a2,2,0,0,0,.12.68,1.6,1.6,0,0,0,.35.57Zm15.27-2.12V15.26h-.78v1.49h.78Zm-15-1V14.23H4.41v1.49h.78Zm15-2V12.26h-.78v1.49h.78Zm-15-1V11.22H4.41v1.51h.78Zm15-2V9.26h-.78v1.51h.78Zm-15-1V8.17H4.41V9.74h.78Zm15-2V6.28h-.78V7.77h.78Zm-15-1.11V5.33L4.48,5.1a.77.77,0,0,0-.07.27,2.72,2.72,0,0,0,0,.28v1h.79ZM19.21,5l.63-.4A1.62,1.62,0,0,0,19.16,4a1.94,1.94,0,0,0-.91-.22v.78a1.31,1.31,0,0,1,.56.12.88.88,0,0,1,.4.36ZM6,4.54H7.78V3.76H6a.82.82,0,0,0-.28.06l.12.35c.07.21.1.33.11.36Zm10.8,0V3.76H15.28v.78h1.49Zm-3,0V3.76H12.28v.78h1.49Zm-3,0V3.76H9.28v.78h1.51ZM6,10.84h12.6V6.91H6Z" transform="translate(-4.4 -3.76)"/></g></svg>',
      merge_cell: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.76 15.74"><g><path d="M18.92,13.5h1.23v4.15A1.84,1.84,0,0,1,18.3,19.5H14V18.27H18.3a.6.6,0,0,0,.44-.18.59.59,0,0,0,.18-.44V13.5ZM18.3,3.76a1.84,1.84,0,0,1,1.85,1.85V9.82H18.92V5.6a.6.6,0,0,0-.18-.44A.59.59,0,0,0,18.3,5H14V3.76H18.3Zm1.85,8.51H15.6L17.26,14l-.86.86-3.14-3.17L16.4,8.51l.86.86L15.62,11h4.54v1.24Zm-13.9,6h4.27V19.5H6.25A1.84,1.84,0,0,1,4.4,17.65V13.5H5.63v4.15a.61.61,0,0,0,.62.62Zm0-14.51h4.27V5H6.25a.6.6,0,0,0-.44.18.57.57,0,0,0-.17.43V9.81H4.41V5.6A1.83,1.83,0,0,1,6.25,3.76Zm5,7.9L8.15,14.83,7.3,14,9,12.27H4.41V11H8.94L7.3,9.38,7.73,9l.43-.43Z" transform="translate(-4.4 -3.76)"/></g></svg>',
      split_cell: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.75 15.74"><g><path d="M10.37,12.25H6.74L8.4,13.94l-.87.86L4.41,11.63,7.53,8.5l.87.86L6.74,11h3.62v1.23Zm9.78-.61L17,14.81,16.13,14l1.66-1.69H14.16V11h3.63L16.13,9.37l.43-.43A5.24,5.24,0,0,1,17,8.51ZM18.9,8.22V5.61a.57.57,0,0,0-.18-.43A.65.65,0,0,0,18.29,5H12.88V18.28h5.41a.7.7,0,0,0,.44-.18.57.57,0,0,0,.18-.43V15h1.23v2.64a1.84,1.84,0,0,1-1.85,1.83h-12A1.84,1.84,0,0,1,4.94,19a1.81,1.81,0,0,1-.54-1.29V15H5.63v2.64a.57.57,0,0,0,.18.43.67.67,0,0,0,.44.18h5.41V5H6.25a.7.7,0,0,0-.44.18.56.56,0,0,0-.17.43V8.22H4.41V5.61A1.8,1.8,0,0,1,5,4.31a1.91,1.91,0,0,1,1.31-.55h12a1.89,1.89,0,0,1,1.31.55,1.8,1.8,0,0,1,.54,1.3V8.23H18.9Z" transform="translate(-4.4 -3.76)"/></g></svg>',
      caption: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.74 13.79"><g><path d="M4.41,18.52H20.15v-2H4.41ZM20,4.73H18.07V6h.65v.65H20V4.73ZM17,6V4.73H14.55V6H17ZM13.49,6V4.73H11V6h2.47ZM10,6V4.73H7.5V6H10ZM5.79,6h.65V4.73H4.5V6.67H5.8V6ZM4.5,11.34H5.79V8.48H4.5ZM6.44,13.8H5.79v-.65H4.5v1.94H6.44ZM17,15.09V13.8H14.55v1.29H17Zm-3.52,0V13.8H11v1.29h2.47Zm-3.53,0V13.8H7.5v1.29H10ZM20,13.16H18.72v.65h-.65V15.1H20Zm-1.29-1.82H20V8.48h-1.3v2.86Z" transform="translate(-4.41 -4.73)"/></g></svg>',
      edit: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.74 15.73"><g><path d="M7.51,5.68h6l1.52-1.57H6.94a2.4,2.4,0,0,0-1.79.82A2.8,2.8,0,0,0,4.41,6.8V17a2.55,2.55,0,0,0,.75,1.8A2.48,2.48,0,0,0,7,19.5H17.22a2.57,2.57,0,0,0,1.83-.74,2.52,2.52,0,0,0,.77-1.8V8.83l-1.58,1.54v6a1.54,1.54,0,0,1-1.53,1.53H7.51A1.54,1.54,0,0,1,6,16.41V7.21A1.52,1.52,0,0,1,7.51,5.68Zm5.63,7.47h0L10.7,10.74l-1,3.38,1.71-.48,1.7-.49Zm.34-.34h0l5.36-5.32L16.4,5.08,11,10.4l1.23,1.21,1.21,1.2ZM19.93,6.4a.82.82,0,0,0,.22-.48A.54.54,0,0,0,20,5.47L18.45,4A.67.67,0,0,0,18,3.77a.7.7,0,0,0-.48.21l-.74.72,2.44,2.43.37-.37.35-.36Z" transform="translate(-4.41 -3.77)"/></g></svg>',
      delete: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.73 15.74"><g><path d="M19.16,6.71a.94.94,0,0,0,.69-.28.91.91,0,0,0,.29-.68A1,1,0,0,0,19.85,5a.93.93,0,0,0-.69-.3H14.24A.94.94,0,0,0,14,4.06a.92.92,0,0,0-.7-.3h-2a1,1,0,0,0-.7.3.93.93,0,0,0-.28.68H5.39A.92.92,0,0,0,4.7,5a1,1,0,0,0-.29.71.91.91,0,0,0,.29.68,1,1,0,0,0,.69.28H19.16Zm-12.79,1a1,1,0,0,0-.7.3.94.94,0,0,0-.28.69v8.85A1.88,1.88,0,0,0,6,18.93a1.9,1.9,0,0,0,1.39.57H17.2a1.87,1.87,0,0,0,1.39-.58,1.91,1.91,0,0,0,.58-1.39V8.68A1,1,0,0,0,18.88,8a.89.89,0,0,0-.7-.29,1,1,0,0,0-.69.29.92.92,0,0,0-.29.68v7.87a1,1,0,0,1-1,1H8.34a.94.94,0,0,1-.69-.28,1,1,0,0,1-.29-.71V8.68a1,1,0,0,0-1-1Z" transform="translate(-4.41 -3.76)"/></g></svg>',
      modify: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.7 15.74"><g><path d="M19.79,15.23a.66.66,0,0,1,.3.38.59.59,0,0,1-.07.48l-.8,1.38a.66.66,0,0,1-.38.3.59.59,0,0,1-.48-.07l-.68-.38a4.55,4.55,0,0,1-1.34.77v.78a.64.64,0,0,1-.18.45.61.61,0,0,1-.45.18h-1.6a.6.6,0,0,1-.44-.18.66.66,0,0,1-.19-.45v-.78a4.36,4.36,0,0,1-1.32-.77l-.69.38a.58.58,0,0,1-.48.07.66.66,0,0,1-.38-.3l-.38-.66h.83a1.77,1.77,0,0,0,1.23-.52,1.72,1.72,0,0,0,.51-1.23v-.18a3,3,0,0,0,.49-.28l.15.09a1.83,1.83,0,0,0,.88.23A1.75,1.75,0,0,0,15.84,14l.88-1.52a1.7,1.7,0,0,0,.17-1.32,1.66,1.66,0,0,0-.3-.61,1.84,1.84,0,0,0-.51-.45l-.15-.09,0-.29,0-.28.15-.09a1,1,0,0,0,.26-.18l0,.06v.78a4.34,4.34,0,0,1,1.34.77l.68-.38a.68.68,0,0,1,.48-.06.64.64,0,0,1,.38.29l.8,1.38a.58.58,0,0,1,.07.48.63.63,0,0,1-.3.38l-.68.4a3.84,3.84,0,0,1,.08.76,4.13,4.13,0,0,1-.08.78l.34.18.32.2ZM10.17,7.86a1.9,1.9,0,0,1,1.35,3.23,1.85,1.85,0,0,1-1.35.55A1.9,1.9,0,0,1,8.83,8.41a1.92,1.92,0,0,1,1.34-.55Zm1.58,7.2a.73.73,0,0,1-.21.49.66.66,0,0,1-.48.2H9.29a.68.68,0,0,1-.69-.69V14.2a4.75,4.75,0,0,1-1.48-.86l-.75.45a.73.73,0,0,1-.7,0,.63.63,0,0,1-.25-.26L4.54,12a.67.67,0,0,1-.08-.53.71.71,0,0,1,.32-.42l.75-.43a4.8,4.8,0,0,1-.08-.85,4.71,4.71,0,0,1,.08-.85l-.74-.44a.71.71,0,0,1-.32-.42.65.65,0,0,1,.07-.54L5.42,6a.66.66,0,0,1,.42-.32l.18,0a.73.73,0,0,1,.35.09l.75.43A4.68,4.68,0,0,1,8.6,5.33V4.45a.68.68,0,0,1,.69-.69h1.77a.64.64,0,0,1,.48.2.73.73,0,0,1,.21.49v.88a4.75,4.75,0,0,1,1.48.85L14,5.75a.67.67,0,0,1,.34-.09l.18,0a.71.71,0,0,1,.42.32l.89,1.54a.67.67,0,0,1,.06.52.73.73,0,0,1-.32.43l-.75.42a4.8,4.8,0,0,1,.08.85,4.71,4.71,0,0,1-.08.85l.75.43a.66.66,0,0,1,.32.42.73.73,0,0,1-.06.54l-.89,1.52a.69.69,0,0,1-.25.26.7.7,0,0,1-.35.09.64.64,0,0,1-.34-.09l-.75-.45a4.87,4.87,0,0,1-1.48.86v.87ZM7.23,9.75a3,3,0,0,0,.86,2.08,2.94,2.94,0,1,0,4.16-4.16,3,3,0,0,0-2.08-.85A2.94,2.94,0,0,0,7.23,9.75Z" transform="translate(-4.44 -3.76)"/></g></svg>',
      revert: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.76 14.69"><g><path d="M18.26,15V12.3l1.89-2V15a2.58,2.58,0,0,1-.24,1c-.2.58-.75.92-1.65,1H7.56v2L4.41,15.63,7.56,13v2h10.7ZM6.3,8.28V11L4.41,13V8.28a2.58,2.58,0,0,1,.24-1c.2-.58.75-.92,1.65-1H17v-2l3.15,3.34L17,10.3v-2H6.3Z" transform="translate(-4.4 -4.28)"/></g></svg>',
      auto_size: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.74 15.74"><g><path d="M6.71,17.19,6.89,16l1.21-.15A6,6,0,0,1,6.81,13.9a5.78,5.78,0,0,1-.45-2.27A6,6,0,0,1,8.1,7.45a5.83,5.83,0,0,1,4.17-1.73l1-1-1-1A7.89,7.89,0,0,0,5,14.64a7.73,7.73,0,0,0,1.71,2.55Zm5.57,2.31h0A7.86,7.86,0,0,0,17.85,6.07L17.67,7.3l-1.21.15a5.9,5.9,0,0,1,1.29,1.92,5.81,5.81,0,0,1,.45,2.26,5.91,5.91,0,0,1-5.9,5.9l-1,1,.49.49.47.5Z" transform="translate(-4.41 -3.76)"/></g></svg>',
      insert_row_below: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.8 15.8"><g><path d="M15.7,1.3c-0.1-0.1-0.1-0.2-0.2-0.2L15.3,1H0.4L0.3,1.1c0,0-0.1,0.1-0.1,0.1c0,0-0.1,0.1-0.1,0.1L0,1.4v7.7l0.1,0.1c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h2.3V9.3l0.1-0.5L3,8.5l0.1-0.2c-0.1,0-0.2,0-0.3,0H1.2v-6h13.3v6h-1.6c-0.1,0-0.2,0-0.3,0l0.1,0.2l0.2,0.4C12.9,9,13,9.2,13,9.3v0.1h2.3l0.2-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1V1.4L15.7,1.3z"/><path d="M10.5,7.5C9.9,7.1,9.3,6.8,8.6,6.7c-0.2,0-0.5-0.1-0.7,0c-0.2,0-0.5,0-0.7,0C6.6,6.7,6.1,6.9,5.6,7.3C5.2,7.6,4.7,8,4.4,8.4C4.3,8.6,4.2,8.8,4.2,8.9C4.1,9.1,4,9.3,3.9,9.4C3.9,9.6,3.8,9.7,3.8,9.9c0,0.2-0.1,0.3-0.1,0.5v-0.1c-0.1,0.8,0.1,1.6,0.5,2.4c0.4,0.7,1,1.3,1.7,1.7c0.3,0.2,0.6,0.3,0.9,0.3c0.3,0.1,0.7,0.1,1,0.1c0.3,0,0.7,0,1-0.1c0.3-0.1,0.6-0.2,0.9-0.3c0.5-0.3,0.9-0.6,1.3-1c0.3-0.4,0.6-0.8,0.8-1.3c0.1-0.4,0.2-0.9,0.2-1.4c0-0.5-0.1-1-0.3-1.4C11.5,8.6,11.1,8,10.5,7.5z M10.1,11.3H8.5v1.6H8H7.9H7.3v0v-0.1v-1.4H5.7v-0.4v-0.2v-0.6h0h1.5V8.5h1.2v1.6h1.6V11.3z"/></g></svg>',
      insert_row_above: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.8 15.8"><g><path d="M0.1,14.5c0.1,0.1,0.1,0.2,0.2,0.2l0.1,0.1h14.9l0.1-0.1c0,0,0.1-0.1,0.1-0.1c0,0,0.1-0.1,0.1-0.1l0.1-0.1V6.7l-0.1-0.1c0-0.1-0.1-0.1-0.2-0.2l-0.1-0.1h-2.3v0.1l-0.1,0.5l-0.2,0.4l-0.1,0.2c0.1,0,0.2,0,0.3,0h1.6v6H1.3v-6h1.6c0.1,0,0.2,0,0.3,0L3.1,7.3L2.9,6.9C2.8,6.8,2.8,6.6,2.7,6.5V6.3H0.4L0.3,6.4c-0.1,0-0.1,0.1-0.2,0.2L0,6.7v7.7L0.1,14.5z"/><path d="M5.3,8.3c0.6,0.5,1.2,0.8,1.9,0.9c0.2,0,0.5,0.1,0.7,0c0.2,0,0.5,0,0.7,0c0.6-0.1,1.1-0.3,1.6-0.6c0.5-0.3,0.9-0.7,1.2-1.2c0.1-0.2,0.2-0.3,0.3-0.5c0.1-0.2,0.2-0.4,0.2-0.5c0.1-0.1,0.1-0.3,0.1-0.4C12,5.8,12,5.6,12,5.4v0.1c0.1-0.8-0.1-1.6-0.5-2.4c-0.4-0.7-1-1.3-1.7-1.7C9.5,1.3,9.2,1.2,8.9,1.1C8.5,1,8.2,1,7.9,1c-0.3,0-0.7,0-1,0.1C6.6,1.2,6.3,1.3,6,1.4C5.5,1.7,5.1,2,4.7,2.4C4.4,2.8,4.1,3.3,3.9,3.8C3.8,4.2,3.7,4.7,3.7,5.2c0,0.5,0.1,1,0.3,1.4C4.3,7.2,4.7,7.8,5.3,8.3z M5.7,4.5h1.6V2.9h0.5h0.1h0.6v0v0.1v1.4H10v0.4v0.2v0.6h0H8.5v1.6H7.3V5.7H5.7V4.5z"/></g></svg>',
      insert_column_left: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.8 15.8"><g><path d="M14.5,15.7c0.1-0.1,0.2-0.1,0.2-0.2l0.1-0.1V0.4l-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1L14.4,0H6.7L6.6,0.1c-0.1,0-0.1,0.1-0.2,0.2L6.3,0.4v2.3h0.1l0.5,0.1L7.3,3l0.2,0.1c0-0.1,0-0.2,0-0.3V1.2h6v13.3h-6v-1.6c0-0.1,0-0.2,0-0.3l-0.2,0.1l-0.4,0.2C6.7,12.9,6.6,13,6.4,13H6.3v2.3l0.1,0.2c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h7.7L14.5,15.7z"/><path d="M8.3,10.5C8.7,10,9,9.3,9.1,8.6c0-0.2,0.1-0.5,0-0.7c0-0.2,0-0.5,0-0.7C9,6.7,8.8,6.1,8.5,5.7C8.2,5.2,7.8,4.8,7.3,4.5C7.2,4.4,7,4.3,6.9,4.2C6.7,4.1,6.5,4,6.4,4C6.2,3.9,6.1,3.9,5.9,3.8c-0.2,0-0.3-0.1-0.5-0.1h0.1C4.7,3.7,3.8,3.9,3.1,4.3C2.4,4.7,1.8,5.3,1.4,6C1.3,6.3,1.2,6.6,1.1,6.9C1,7.2,1,7.6,1,7.9c0,0.3,0,0.7,0.1,1c0.1,0.3,0.2,0.6,0.3,0.9c0.3,0.5,0.6,0.9,1,1.3c0.4,0.3,0.8,0.6,1.3,0.8C4.2,12,4.7,12.1,5.1,12c0.5,0,1-0.1,1.4-0.3C7.2,11.5,7.8,11.1,8.3,10.5zM4.5,10.1V8.5H2.9V8V7.9V7.3h0H3h1.4V5.7h0.4h0.2h0.6v0v1.5h1.6v1.2H5.7v1.6H4.5z"/></g></svg>',
      insert_column_right: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.8 15.8"><g><path d="M1.3,0.1C1.2,0.2,1.1,0.2,1.1,0.3L1,0.4v14.9l0.1,0.1c0,0,0.1,0.1,0.1,0.1c0,0,0.1,0.1,0.1,0.1l0.1,0.1h7.7l0.1-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1v-2.3H9.3l-0.5-0.1l-0.4-0.2l-0.2-0.1c0,0.1,0,0.2,0,0.3v1.6h-6V1.3h6v1.6c0,0.1,0,0.2,0,0.3l0.2-0.1l0.4-0.2C9,2.9,9.2,2.8,9.3,2.8h0.1V0.5L9.4,0.3c0-0.1-0.1-0.1-0.2-0.2L9.1,0H1.4L1.3,0.1z"/><path d="M7.5,5.3C7,5.8,6.7,6.5,6.6,7.2c0,0.2-0.1,0.5,0,0.7c0,0.2,0,0.5,0,0.7c0.1,0.6,0.3,1.1,0.6,1.6c0.3,0.5,0.7,0.9,1.2,1.2c0.2,0.1,0.3,0.2,0.5,0.3c0.2,0.1,0.4,0.2,0.5,0.2c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.3,0.1,0.5,0.1h-0.1c0.8,0.1,1.6-0.1,2.4-0.5c0.7-0.4,1.3-1,1.7-1.7c0.2-0.3,0.3-0.6,0.3-0.9c0.1-0.3,0.1-0.7,0.1-1c0-0.3,0-0.7-0.1-1c-0.1-0.3-0.2-0.6-0.3-0.9c-0.3-0.5-0.6-0.9-1-1.3C13,4.4,12.5,4.2,12,4c-0.4-0.1-0.9-0.2-1.4-0.2c-0.5,0-1,0.1-1.4,0.2C8.5,4.3,7.9,4.7,7.5,5.3z M11.3,5.7v1.6h1.6v0.5v0.1v0.6h0h-0.1h-1.4v1.6h-0.4h-0.2h-0.6v0V8.5H8.5V7.3h1.6V5.7H11.3z"/></g></svg>',
      delete_row: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.75 13.83"><g><path d="M4.7,18.46l.12.08H19.73l.12-.08a.58.58,0,0,0,.22-.22l.08-.12,0-7.69-.08-.11a.77.77,0,0,0-.18-.18l-.11-.08-2.31,0-.08.28-.1.29a1.58,1.58,0,0,1-.12.29l-.14.34s0,0,.18,0H18.9v6H5.64v-6H7.35c.14,0,.2,0,.18,0l-.14-.34a2.85,2.85,0,0,1-.12-.29l-.1-.29-.07-.27-2.31,0-.11.08a.77.77,0,0,0-.18.18l-.08.11,0,7.69.08.12a.47.47,0,0,0,.09.12l.13.09ZM12.11,13a4,4,0,0,0,1.46-.21,4.51,4.51,0,0,0,1.31-.71A4,4,0,0,0,16.26,10a4.32,4.32,0,0,0-.08-2.54,4.34,4.34,0,0,0-1-1.52,4.15,4.15,0,0,0-1.54-1,4.34,4.34,0,0,0-1.35-.22A4.07,4.07,0,0,0,11,4.93,3.94,3.94,0,0,0,9.24,6.07,3.92,3.92,0,0,0,8.15,8.88a3.91,3.91,0,0,0,.12.95A4.16,4.16,0,0,0,12.11,13Zm2.35-4.14v.58H10.09V8.27h4.37v.58Z" transform="translate(-4.4 -4.71)"/></g></svg>',
      delete_column: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 13.81 15.74"><g><path d="M5.66,19.42l.12.08,7.69,0,.11-.08a.77.77,0,0,0,.18-.18l.08-.11,0-2.32-.15,0-.45-.15-.42-.18-.17-.07a1,1,0,0,0,0,.27v1.63h-6V5h6V6.62a.9.9,0,0,0,0,.26l.17-.07.42-.17a3.91,3.91,0,0,1,.45-.15l.15,0,0-2.32L13.75,4a.77.77,0,0,0-.18-.18l-.11-.08H5.79l-.13.07a.63.63,0,0,0-.21.22l-.08.12V19.08l.08.12a.47.47,0,0,0,.09.12.35.35,0,0,0,.12.1Zm9-3.67a4.16,4.16,0,0,0,2.36-.51,4.08,4.08,0,0,0,1.67-1.72,4,4,0,0,0,.35-.91,3.79,3.79,0,0,0,.1-1,4.71,4.71,0,0,0-.11-1,5,5,0,0,0-.3-.87,4.25,4.25,0,0,0-1-1.25,4.49,4.49,0,0,0-1.34-.81A4.26,4.26,0,0,0,15,7.48a3.88,3.88,0,0,0-1.41.25A4.32,4.32,0,0,0,11.86,9,4,4,0,0,0,11,10.94a4.4,4.4,0,0,0-.05.68,4.5,4.5,0,0,0,.05.68,3.93,3.93,0,0,0,.61,1.57,4.22,4.22,0,0,0,1.18,1.2,4.59,4.59,0,0,0,.48.27c.2.1.37.17.5.22a2.44,2.44,0,0,0,.45.12,4.61,4.61,0,0,0,.5.07Zm2.54-4.12v.58H12.87V11h4.37v.59Z" transform="translate(-5.37 -3.76)"/></g></svg>',
      fixed_column_width: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 24 24"><path d="M6,5H18A1,1 0 0,1 19,6A1,1 0 0,1 18,7H6A1,1 0 0,1 5,6A1,1 0 0,1 6,5M21,2V4H3V2H21M15,8H17V22H15V8M7,8H9V22H7V8M11,8H13V22H11V8Z" /></svg>',
      rotate_left: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.8 15.8"><g><path d="M0.5,10.2c0,0.1,0,0.2,0,0.3v0.2l0,0c0.1,0.3,0.3,0.6,0.4,0.9l0,0C1,11.8,1.3,12,1.5,11.9h0.1h0.2h0.1c0.1-0.1,0.3-0.3,0.4-0.5v-0.2c0-0.1,0-0.2-0.1-0.3l0,0c-0.2-0.2-0.3-0.4-0.3-0.7l0,0C1.8,10,1.7,9.9,1.5,9.8c-0.1,0-0.2,0-0.3,0H0.9C0.7,9.9,0.6,10,0.5,10.2L0.5,10.2z"/><path d="M2.2,11.5L2.2,11.5L2.2,11.5z"/><path d="M5.9,3.6L5.9,3.6L5.9,3.6z"/><path d="M0.1,7.9c0,0.3,0,0.6,0,0.9l0,0l0,0l0,0l0,0c0,0.2,0.1,0.3,0.2,0.4l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0l0,0c0.2,0,0.4-0.1,0.5-0.3l0,0c0-0.1,0.1-0.3,0.1-0.4V8.6l0,0c0-0.2,0-0.5,0-0.7l0,0c0-0.2-0.1-0.4-0.2-0.5C1.1,7.3,0.9,7.2,0.7,7.2S0.3,7.3,0.2,7.4C0.1,7.5,0,7.7,0.1,7.9z"/><path d="M1.9,12.7L1.9,12.7c0,0.2,0,0.4,0.2,0.5l0,0l0.2,0.3l0,0c0.2,0.1,0.3,0.2,0.5,0.4l0,0l0,0l0,0l0,0C2.9,14,3,14.1,3.2,14.1s0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5v-0.1c0-0.2-0.1-0.4-0.2-0.5l0,0l-0.4-0.4l-0.2-0.2l0,0C3,12.1,2.8,12,2.6,12l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0C2,12.3,1.9,12.5,1.9,12.7z"/><path d="M6.6,15c0,0.2,0.1,0.4,0.2,0.5c0.1,0.1,0.2,0.2,0.4,0.3l0,0c0.3,0,0.5,0,0.7,0h0.3l0,0c0.2,0,0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5l0,0l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0H7.9c-0.1,0-0.3,0-0.5,0l0,0H7.3c-0.2-0.1-0.3,0-0.5,0.1l0,0C6.7,14.6,6.6,14.8,6.6,15L6.6,15L6.6,15L6.6,15z"/><path d="M4.2,7.4C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.1,0.1,0.3,0.2,0.5,0.2s0.3-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0C11.5,7.3,11,6.7,10,5.8l0,0L8.4,4.2l0,0C8.3,4.1,8.1,4,7.9,4S7.5,4.1,7.4,4.2L4.2,7.4L4.2,7.4z M6.8,9L5.7,7.9l2.2-2.2l2.3,2.2l-2.3,2.2C7.7,9.9,7.3,9.5,6.8,9L6.8,9z"/><path d="M4.1,14.1C4,14.2,4,14.3,4,14.4v0.2l0,0c0.1,0.1,0.2,0.3,0.4,0.4l0,0c0.3,0.1,0.6,0.2,0.9,0.4h0.1h0.1l0,0c0.2,0,0.3-0.1,0.5-0.1l0,0c0.2-0.1,0.3-0.3,0.3-0.4l0,0l0,0l0,0l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3l0,0C6.1,14.2,6,14.1,5.8,14l0,0c-0.3-0.1-0.5-0.2-0.8-0.2l0,0c-0.1-0.1-0.2-0.1-0.3-0.1H4.5C4.3,13.7,4.2,13.9,4.1,14.1z"/><path d="M9.3,14.4c0,0.1-0.1,0.3,0,0.4V15l0,0c0,0.1,0.1,0.3,0.5,0.4c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1l0,0c0.3-0.1,0.6-0.2,0.9-0.3l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0.1-0.3c0-0.1-0.1-0.2-0.1-0.3l0,0c-0.1-0.2-0.2-0.3-0.4-0.4l0,0h-0.3c-0.1,0-0.2,0-0.3,0l0,0c-0.2,0.1-0.5,0.2-0.8,0.3l0,0C9.5,14.1,9.4,14.2,9.3,14.4L9.3,14.4z"/><path d="M11.4,14.7L11.4,14.7L11.4,14.7z"/><path d="M9.5,15.3L9.5,15.3L9.5,15.3z"/><path d="M15.9,7.9c0-1-0.2-2-0.6-3l0,0c-0.4-1-1-1.9-1.7-2.6C12.8,1.6,12,1,11,0.6l0,0C10.1,0.2,9,0,8,0C7.3,0,6.5,0.1,5.8,0.3l0,0C5.2,0.5,4.6,0.8,4,1.1L3.1,0.2l0,0C2.9,0.1,2.8,0,2.6,0H2.4l0,0C2.2,0,2,0.2,1.9,0.4l0,0L0.1,4.9l0,0C0,5,0,5.1,0,5.2c0,0.2,0.1,0.4,0.2,0.5l0,0c0.2,0.1,0.3,0.2,0.5,0.2h0.1H1l0,0l4.7-1.8l0,0C5.9,4,6.1,3.8,6.1,3.6V3.4C6.1,3.2,6,3,5.9,2.9l0,0L5.1,2.1c0.4-0.2,0.8-0.4,1.3-0.5c0.5-0.1,1.1-0.2,1.7-0.2c0.9,0,1.7,0.2,2.5,0.5l0,0c0.8,0.3,1.5,0.8,2.1,1.4c0.6,0.6,1.1,1.3,1.4,2.1l0,0c0.3,0.8,0.5,1.6,0.5,2.5s-0.2,1.7-0.5,2.5l0,0c-0.3,0.8-0.8,1.5-1.4,2.1c-0.2,0.2-0.4,0.3-0.6,0.5l0,0c-0.2,0.1-0.3,0.3-0.3,0.5v0.1c0,0.1,0,0.3,0.1,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0c0.1,0,0.3-0.1,0.4-0.2l0,0l0,0l0,0l0,0c0.2-0.2,0.5-0.4,0.7-0.6l0,0l0,0l0,0l0,0c0.7-0.8,1.3-1.6,1.7-2.6C15.6,10,15.8,9,15.9,7.9z M1.9,4C2,3.8,2.1,3.5,2.3,3.1l0,0L2.7,2l1.2,1.2L1.9,4z"/><path d="M6.8,15.5L6.8,15.5L6.8,15.5z"/></g></svg>',
      rotate_right: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.8 15.8"><g><path d="M9.9,15.3L9.9,15.3L9.9,15.3z"/><path d="M6.9,15.1L6.9,15.1c0,0.1,0.1,0.3,0.2,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0h0.3c0.2,0,0.4,0,0.7,0l0,0c0.2-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.2-0.4V15c0-0.2-0.1-0.4-0.2-0.4c-0.2-0.1-0.3-0.2-0.5-0.2H8.4l0,0c-0.1,0-0.3,0-0.5,0H7.6l0,0c-0.2,0-0.4,0.1-0.5,0.2C7,14.7,6.9,14.9,6.9,15.1z"/><path d="M6.5,14.4L6.5,14.4L6.5,14.4z"/><path d="M5.8,5.8L5.8,5.8c-1,0.9-1.5,1.5-1.7,1.6l0,0C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.2,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0L8.4,4.2C8.3,4.1,8.1,4,7.9,4C7.7,4,7.5,4.1,7.4,4.2l0,0L5.8,5.8z M5.6,7.9l2.3-2.2l2.2,2.2L9,9l0,0l0,0l0,0l0,0c-0.5,0.6-0.9,0.9-1.1,1.1L5.6,7.9z"/><path d="M9,15.5L9,15.5L9,15.5z"/><path d="M9.6,14.7v0.2l0,0l0,0l0,0l0,0c0.1,0.2,0.1,0.3,0.3,0.3c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1h0.1c0.3-0.1,0.6-0.3,0.9-0.4l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0,0v-0.2c0-0.1,0-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4H11c-0.1,0-0.2,0.1-0.3,0.1l0,0c-0.2,0.1-0.4,0.2-0.7,0.3l0,0l0,0c-0.1,0.1-0.3,0.2-0.4,0.4C9.6,14.5,9.6,14.6,9.6,14.7z"/><path d="M9,14.5L9,14.5L9,14.5z"/><path d="M9.6,14.4L9.6,14.4L9.6,14.4z"/><path d="M11.7,14L11.7,14L11.7,14z"/><path d="M15.6,7.4L15.6,7.4L15.6,7.4z"/><path d="M15,9.4c0.2,0,0.4,0,0.6-0.2l0,0c0.1-0.1,0.2-0.2,0.2-0.4l0,0l0,0l0,0l0,0c0-0.3,0-0.6,0-0.9c0-0.2-0.1-0.4-0.2-0.5c-0.1-0.1-0.3-0.2-0.5-0.2s-0.4,0.1-0.5,0.2c-0.1,0.1-0.2,0.3-0.2,0.5l0,0c0,0.2,0,0.4,0,0.7l0,0v0.1c0,0.1,0,0.3,0.1,0.4l0,0C14.6,9.3,14.8,9.4,15,9.4L15,9.4L15,9.4z"/><path d="M14,12h0.1h0.2h0.1c0.2,0,0.5-0.2,0.6-0.4l0,0c0.2-0.3,0.3-0.6,0.4-0.9l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4h-0.3c-0.1,0-0.2,0-0.3,0C14.2,9.9,14,10,14,10.3l0,0c-0.1,0.2-0.2,0.5-0.3,0.7l0,0c-0.1,0.1-0.1,0.2-0.1,0.3v0.2l0,0l0,0C13.6,11.6,13.8,11.8,14,12z"/><path d="M14.6,7.4L14.6,7.4L14.6,7.4z"/><path d="M4.4,14.2c-0.1,0.1-0.1,0.2-0.1,0.3l0.1,0.2c0,0.2,0.2,0.3,0.3,0.4l0,0c0.3,0.1,0.6,0.3,1.1,0.4l0,0h0.1l0,0c0.1,0,0.2-0.1,0.4-0.2c0.1,0,0.2-0.2,0.3-0.3l0,0v-0.2c0-0.1-0.1-0.3-0.2-0.4c-0.1-0.1-0.2-0.2-0.4-0.3l0,0c-0.2-0.1-0.5-0.2-0.7-0.3l0,0c-0.1,0-0.2,0-0.3,0H4.7l0,0C4.6,13.9,4.4,14,4.4,14.2L4.4,14.2z"/><path d="M11.9,13.3c0,0.2,0.1,0.4,0.2,0.6c0.1,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l0,0l0,0l0,0c0.1-0.1,0.3-0.3,0.4-0.4l0,0l0.2-0.3l0,0c0.1-0.2,0.2-0.3,0.2-0.5l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.2,0.2l-0.4,0.4l0,0C12,13,11.9,13.1,11.9,13.3L11.9,13.3z"/><path d="M12.1,13.8L12.1,13.8L12.1,13.8z"/><path d="M11.9,13.3L11.9,13.3L11.9,13.3z"/><path d="M15.9,5.2c0-0.1-0.1-0.2-0.1-0.3l0,0L14,0.4l0,0C13.9,0.2,13.7,0,13.5,0l0,0l0,0h-0.2c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.9,0.9c-0.5-0.3-1.1-0.6-1.8-0.8l0,0C9.4,0.1,8.7,0,7.9,0c-1,0-2,0.2-3,0.6S3,1.6,2.3,2.3C1.6,3.1,1,3.9,0.6,4.9l0,0C0.2,5.8,0,6.8,0,7.9c0,1,0.2,2,0.6,3s0.9,1.8,1.7,2.6l0,0l0,0l0,0l0,0c0.2,0.2,0.5,0.4,0.7,0.6l0,0l0,0l0,0l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0c0.2,0,0.4-0.1,0.6-0.3l0,0c0.1-0.1,0.1-0.3,0.1-0.4v-0.1l0,0C4.1,13.3,4,13.1,3.9,13l0,0c-0.2-0.1-0.4-0.3-0.6-0.5c-0.6-0.6-1.1-1.3-1.4-2.1l0,0C1.6,9.6,1.4,8.8,1.4,7.9s0.2-1.7,0.5-2.5l0,0c0.3-0.8,0.8-1.5,1.4-2.1c0.6-0.6,1.3-1.1,2.1-1.4l0,0C6.2,1.6,7,1.4,7.9,1.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.5l-0.8,0.8l0,0C10,3.1,9.9,3.2,9.9,3.4v0.2l0,0l0,0c0,0.2,0.2,0.4,0.4,0.5l0,0l4.5,1.8l0,0H15h0.1c0.2,0,0.4-0.1,0.5-0.2l0,0C15.7,5.6,15.8,5.4,15.9,5.2z M11.8,3.2L13,2l0.4,1.1l0,0c0.2,0.4,0.3,0.7,0.4,0.9L11.8,3.2z"/></g></svg>',
      mirror_horizontal: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 14.75 15.74"><g><path d="M13.75,3.76l5.9,15.74h-5.9V3.76ZM4.9,19.5,10.8,3.76V19.5H4.9Z" transform="translate(-4.9 -3.76)"/></g></svg>',
      mirror_vertical: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.74 14.75"><g><path d="M20.15,13.1,4.41,19V13.1H20.15ZM4.41,4.25l15.74,5.9H4.41V4.25Z" transform="translate(-4.41 -4.25)"/></g></svg>',
      checked: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.75 12.1"><g><path d="M4.59,12.23l.12.18L9.43,17.5a.58.58,0,0,0,.84,0L20,7.45h0a.58.58,0,0,0,0-.84l-.85-.85a.58.58,0,0,0-.84,0H18.2l-8.12,8.41a.29.29,0,0,1-.42,0l-3.4-3.63a.58.58,0,0,0-.84,0l-.85.85a.6.6,0,0,0-.14.21.51.51,0,0,0,0,.44c.05.06.1.13.16.19Z" transform="translate(-4.38 -5.58)"/></g></svg>',
      line_break: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 24 24"><path d="M19,6a1,1,0,0,0-1,1v4a1,1,0,0,1-1,1H7.41l1.3-1.29A1,1,0,0,0,7.29,9.29l-3,3a1,1,0,0,0-.21.33,1,1,0,0,0,0,.76,1,1,0,0,0,.21.33l3,3a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42L7.41,14H17a3,3,0,0,0,3-3V7A1,1,0,0,0,19,6Z"/></svg>',
      image_gallery: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="30 30 150 150"><g><path d="M152.775,120.548V51.651c0-12.271-9.984-22.254-22.254-22.254H43.727c-12.271,0-22.254,9.983-22.254,22.254v68.896c0,12.27,9.983,22.254,22.254,22.254h86.795C142.791,142.802,152.775,132.817,152.775,120.548z M36.394,51.651c0-4.042,3.291-7.333,7.333-7.333h86.795c4.042,0,7.332,3.291,7.332,7.333v23.917l-14.938-17.767c-1.41-1.678-3.487-2.649-5.68-2.658h-0.029c-2.184,0-4.255,0.954-5.674,2.613L76.709,98.519l-9.096-9.398c-1.427-1.474-3.392-2.291-5.448-2.273c-2.052,0.025-4.004,0.893-5.396,2.4L36.394,111.32V51.651z M41.684,127.585l20.697-22.416l9.312,9.622c1.461,1.511,3.489,2.334,5.592,2.27c2.101-0.066,4.075-1.013,5.44-2.612l34.436-40.308l20.693,24.613v21.794c0,4.042-3.29,7.332-7.332,7.332H43.727C43.018,127.88,42.334,127.775,41.684,127.585z M182.616,152.5V75.657c0-4.12-3.34-7.46-7.461-7.46c-4.119,0-7.46,3.34-7.46,7.46V152.5c0,4.112-3.347,7.46-7.461,7.46h-94c-4.119,0-7.46,3.339-7.46,7.459c0,4.123,3.341,7.462,7.46,7.462h94C172.576,174.881,182.616,164.841,182.616,152.5z"/></g></svg>',
      bookmark: '<svg viewBox="0 0 24 24"><path d="M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z" /></svg>',
      download: '<svg viewBox="0 0 24 24"><path d="M2 12H4V17H20V12H22V17C22 18.11 21.11 19 20 19H4C2.9 19 2 18.11 2 17V12M12 15L17.55 9.54L16.13 8.13L13 11.25V2H11V11.25L7.88 8.13L6.46 9.55L12 15Z" /></svg>',
      more_text: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="10 10 180 180"><g><path d="M49.711,142.188h49.027c2.328,0.002,4.394,1.492,5.129,3.699l9.742,29.252c0.363,1.092,1.385,1.828,2.537,1.83l15.883,0.01c0.859,0,1.667-0.412,2.17-1.109s0.641-1.594,0.37-2.41l-16.625-50.045L86.503,28.953c-0.36-1.097-1.383-1.839-2.537-1.842H64.532c-1.153-0.001-2.178,0.736-2.542,1.831L13.847,173.457c-0.271,0.816-0.135,1.713,0.369,2.412c0.503,0.697,1.311,1.109,2.171,1.109h15.872c1.151,0,2.173-0.736,2.537-1.828l9.793-29.287C45.325,143.66,47.39,142.18,49.711,142.188L49.711,142.188z M53.493,119.098l15.607-46.9c0.744-2.196,2.806-3.674,5.125-3.674s4.381,1.478,5.125,3.674l15.607,46.904c0.537,1.621,0.263,3.402-0.736,4.789c-1.018,1.408-2.649,2.24-4.386,2.24H58.615c-1.736,0-3.368-0.832-4.386-2.24C53.23,122.504,52.956,120.721,53.493,119.098L53.493,119.098z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',
      more_paragraph: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="10 10 180 180"><g><path d="M128.39,28.499H63.493c-25.558,0-46.354,20.796-46.354,46.354c0,25.559,20.796,46.353,46.354,46.353h9.271v55.625h18.542V47.04h9.271V176.83h18.543V47.04h9.271V28.499z M72.764,102.664h-9.271c-15.337,0-27.813-12.475-27.813-27.812c0-15.336,12.476-27.813,27.813-27.813h9.271V102.664z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',
      more_plus: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="35 30 140 140"><g><path d="M137.215,102.045c0,3.498-2.835,6.332-6.333,6.332H24.549c-3.498,0-6.334-2.834-6.334-6.332l0,0c0-3.498,2.836-6.333,6.334-6.333h106.333C134.38,95.711,137.215,98.547,137.215,102.045L137.215,102.045z M77.715,161.545c-3.498,0-6.333-2.836-6.333-6.334V48.878c0-3.498,2.836-6.333,6.333-6.333l0,0c3.498,0,6.334,2.835,6.334,6.333v106.333C84.049,158.709,81.213,161.545,77.715,161.545L77.715,161.545z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.632,190.465,66.177,190.465,63.32L190.465,63.32z M190.465,101.993c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.888,1.026,5.353,3.056,7.396c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.993L190.465,101.993z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z"/></g></svg>',
      more_horizontal: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.76 3.58"><g><path d="M4.64,10.73a1.84,1.84,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0A1.79,1.79,0,0,1,8,11.63a1.84,1.84,0,0,1-.25.9,1.69,1.69,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2.08,2.08,0,0,1,4.64,10.73Zm6.09,0a1.84,1.84,0,0,1,.65-.65,1.78,1.78,0,0,1,2.67,1.55,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.76,1.76,0,0,1-1.79,0,1.79,1.79,0,0,1-.64-2.44Zm6.08,0a1.69,1.69,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0,1.79,1.79,0,0,1,.9,1.54,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2,2,0,0,1,16.81,10.73Z" transform="translate(-4.39 -9.84)"/></g></svg>',
      more_vertical: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 3.94 15.75"><g><path d="M12.28,7.69a1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,2,2,0,0,1,1.39-.58,1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58Zm0,2a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39A1.92,1.92,0,0,1,13.67,13a2,2,0,0,1-1.39.58A1.92,1.92,0,0,1,10.89,13a2,2,0,0,1-.58-1.39,2,2,0,0,1,2-2Zm0,5.9a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,1.94,1.94,0,0,1,1.39-.58Z" transform="translate(-10.31 -3.75)"/></g></svg>',
      attachment: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 8.38 15.68"><g><path d="M15.23,6h1v9.78a3.88,3.88,0,0,1-1.31,2.45,4,4,0,0,1-6.57-2.45V7A3,3,0,0,1,9.2,4.89a3,3,0,0,1,5,2.09v8.31a1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39V8h1v7.32a1,1,0,0,0,.29.69,1,1,0,0,0,.69.28A.9.9,0,0,0,13,16a1,1,0,0,0,.29-.69V7a1.92,1.92,0,0,0-.58-1.39A2,2,0,0,0,11.27,5a1.92,1.92,0,0,0-1.39.58A2,2,0,0,0,9.33,7v8.31a3,3,0,1,0,5.9,0V6Z" transform="translate(-8.08 -3.78)"/></g></svg>',
      map: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 11.7 15.62"><g><path d="M12.05,12.42a2.93,2.93,0,1,1,2.07-5A2.88,2.88,0,0,1,15,9.49a3,3,0,0,1-.86,2.07,2.89,2.89,0,0,1-2.07.86Zm0-5.36a2.43,2.43,0,0,0-1.72,4.16,2.48,2.48,0,0,0,1.72.72,2.44,2.44,0,0,0,0-4.88Zm0-3.3A5.84,5.84,0,0,1,17.9,9.62a9.94,9.94,0,0,1-1.73,5A33.59,33.59,0,0,1,12.84,19a1.52,1.52,0,0,1-.23.2,1,1,0,0,1-.55.2h0a1,1,0,0,1-.55-.2,1.52,1.52,0,0,1-.23-.2,33.59,33.59,0,0,1-3.33-4.32,9.93,9.93,0,0,1-1.72-5,5.84,5.84,0,0,1,5.85-5.86ZM12,18.34l.08.05.06-.06a35.58,35.58,0,0,0,3.06-3.93,9.35,9.35,0,0,0,1.74-4.77,4.88,4.88,0,0,0-4.88-4.88A4.79,4.79,0,0,0,8.6,6.17,4.84,4.84,0,0,0,7.17,9.62,9.29,9.29,0,0,0,8.91,14.4,36,36,0,0,0,12,18.34Z" transform="translate(-6.2 -3.76)"/></g></svg>',
      magic_stick: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 15.73 15.75"><g><path d="M19.86,19.21a1,1,0,0,0,.28-.68,1,1,0,0,0-.28-.7L13,10.93a1,1,0,0,0-.7-.28,1,1,0,0,0-.68,1.65l6.9,6.9a1,1,0,0,0,.69.29.93.93,0,0,0,.69-.28ZM9.19,8.55a3,3,0,0,0,1.68,0,14.12,14.12,0,0,0,1.41-.32A11.26,11.26,0,0,0,10.8,7.06c-.56-.36-.86-.56-.91-.58S10,5.91,10,5.11s0-1.26-.15-1.37a4.35,4.35,0,0,0-1.19.71c-.53.4-.81.62-.87.68a9,9,0,0,0-2-.6,6.84,6.84,0,0,0-.76-.09s0,.27.08.77a8.6,8.6,0,0,0,.61,2q-.09.09-.69.87a3.59,3.59,0,0,0-.68,1.17c.12.17.57.23,1.36.15S7,9.26,7.15,9.23s.21.36.57.91a10.49,10.49,0,0,0,1.14,1.48c0-.1.14-.57.31-1.4a3,3,0,0,0,0-1.67Z" transform="translate(-4.41 -3.74)"/></g></svg>',
      empty_file: '<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox ="0 0 12.78 15.75"><g><path d="M14.73,3.76,18.67,7.7v9.84a2,2,0,0,1-2,2H7.84a1.89,1.89,0,0,1-1.38-.58,2,2,0,0,1-.57-1.39V5.73a1.93,1.93,0,0,1,.57-1.38,2,2,0,0,1,1.38-.58h6.62l.26,0v0Zm2.95,4.92h-2a1.93,1.93,0,0,1-1.38-.57,2,2,0,0,1-.58-1.4V6.17c0-.36,0-.84,0-1.43H7.85a1,1,0,0,0-.7.29,1,1,0,0,0-.29.7V17.54a1,1,0,0,0,.29.69,1,1,0,0,0,.69.29h8.85a1,1,0,0,0,.71-.29.92.92,0,0,0,.28-.69Zm0-1L14.73,4.74v2A1,1,0,0,0,15,7.4a1,1,0,0,0,.69.29Z" transform="translate(-5.89 -3.76)"/></g></svg>'
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/lang/en.js
var require_en = __commonJS({
  "node_modules/kothing-editor/lib/lang/en.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    (function(global, factory) {
      if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("KothingEditor_LANG a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    })(typeof window !== "undefined" ? window : void 0, function(window2, noGlobal) {
      var lang = {
        code: "en",
        toolbar: {
          default: "Default",
          save: "Save",
          font: "Font",
          formats: "Formats",
          fontSize: "Size",
          bold: "Bold",
          underline: "Underline",
          italic: "Italic",
          strike: "Strike",
          subscript: "Subscript",
          superscript: "Superscript",
          removeFormat: "Remove Format",
          fontColor: "Font Color",
          hiliteColor: "Highlight Color",
          indent: "Indent",
          outdent: "Outdent",
          align: "Align",
          alignLeft: "Align left",
          alignRight: "Align right",
          alignCenter: "Align center",
          alignJustify: "Align justify",
          list: "List",
          orderList: "Ordered list",
          unorderList: "Unordered list",
          horizontalRule: "Horizontal line",
          hr_solid: "Solid",
          hr_dotted: "Dotted",
          hr_dashed: "Dashed",
          table: "Table",
          link: "Link",
          math: "Math",
          image: "Image",
          video: "Video",
          audio: "Audio",
          fullScreen: "Full screen",
          showBlocks: "Show blocks",
          codeView: "Code view",
          undo: "Undo",
          redo: "Redo",
          preview: "Preview",
          print: "print",
          tag_p: "Paragraph",
          tag_div: "Normal (DIV)",
          tag_h: "Header",
          tag_blockquote: "Quote",
          tag_pre: "Code",
          template: "Template",
          lineHeight: "Line height",
          paragraphStyle: "Paragraph style",
          textStyle: "Text style",
          imageGallery: "Image gallery",
          mention: "Mention"
        },
        dialogBox: {
          linkBox: {
            title: "Insert Link",
            url: "URL to link",
            text: "Text to display",
            newWindowCheck: "Open in new window",
            downloadLinkCheck: "Download link",
            bookmark: "Bookmark"
          },
          mathBox: {
            title: "Math",
            inputLabel: "Mathematical Notation",
            fontSizeLabel: "Font Size",
            previewLabel: "Preview"
          },
          imageBox: {
            title: "Insert image",
            file: "Select from files",
            url: "Image URL",
            altText: "Alternative text"
          },
          videoBox: {
            title: "Insert Video",
            file: "Select from files",
            url: "Media embed URL, YouTube/Vimeo"
          },
          audioBox: {
            title: "Insert Audio",
            file: "Select from files",
            url: "Audio URL"
          },
          browser: {
            tags: "Tags",
            search: "Search"
          },
          caption: "Insert description",
          close: "Close",
          submitButton: "Submit",
          revertButton: "Revert",
          proportion: "Constrain proportions",
          basic: "Basic",
          left: "Left",
          right: "Right",
          center: "Center",
          width: "Width",
          height: "Height",
          size: "Size",
          ratio: "Ratio"
        },
        controller: {
          edit: "Edit",
          unlink: "Unlink",
          remove: "Remove",
          insertRowAbove: "Insert row above",
          insertRowBelow: "Insert row below",
          deleteRow: "Delete row",
          insertColumnBefore: "Insert column before",
          insertColumnAfter: "Insert column after",
          deleteColumn: "Delete column",
          fixedColumnWidth: "Fixed column width",
          resize100: "Resize 100%",
          resize75: "Resize 75%",
          resize50: "Resize 50%",
          resize25: "Resize 25%",
          autoSize: "Auto size",
          mirrorHorizontal: "Mirror, Horizontal",
          mirrorVertical: "Mirror, Vertical",
          rotateLeft: "Rotate left",
          rotateRight: "Rotate right",
          maxSize: "Max size",
          minSize: "Min size",
          tableHeader: "Table header",
          mergeCells: "Merge cells",
          splitCells: "Split Cells",
          HorizontalSplit: "Horizontal split",
          VerticalSplit: "Vertical split"
        },
        menu: {
          spaced: "Spaced",
          bordered: "Bordered",
          neon: "Neon",
          translucent: "Translucent",
          shadow: "Shadow",
          code: "Code"
        }
      };
      if (_typeof(noGlobal) === (true ? "undefined" : _typeof(void 0))) {
        if (!window2.KothingEditor_LANG) {
          Object.defineProperty(window2, "KothingEditor_LANG", {
            enumerable: true,
            writable: false,
            configurable: false,
            value: {}
          });
        }
        Object.defineProperty(window2.KothingEditor_LANG, "en", {
          enumerable: true,
          writable: true,
          configurable: true,
          value: lang
        });
      }
      return lang;
    });
  }
});

// node_modules/kothing-editor/lib/lib/constructor.js
var require_constructor = __commonJS({
  "node_modules/kothing-editor/lib/lib/constructor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defaultIcons = _interopRequireDefault(require_defaultIcons());
    var _en = _interopRequireDefault(require_en());
    var _util = _interopRequireDefault(require_util());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _default2 = {
      init: function init(element, options) {
        if (_typeof(options) !== "object")
          options = {};
        var doc = document;
        this._initOptions(element, options);
        var top_div = doc.createElement("DIV");
        top_div.className = "kothing-editor" + (options.rtl ? " ke-rtl" : "");
        if (element.id)
          top_div.id = "kothing-editor_" + element.id;
        var relative = doc.createElement("DIV");
        relative.className = "ke-container";
        var tool_bar = this._createToolBar(doc, options.toolbarItem, options.plugins, options);
        tool_bar.element.style.visibility = "hidden";
        if (tool_bar.pluginCallButtons.math)
          this._checkKatexMath(options.katex);
        var arrow = doc.createElement("DIV");
        arrow.className = "ke-arrow";
        var sticky_dummy = doc.createElement("DIV");
        sticky_dummy.className = "ke-toolbar-sticky-dummy";
        var editor_div = doc.createElement("DIV");
        editor_div.className = "ke-wrapper";
        var initElements = this._initElements(options, top_div, tool_bar.element, arrow);
        var bottomBar = initElements.bottomBar;
        var wysiwyg_div = initElements.wysiwygFrame;
        var placeholder_span = initElements.placeholder;
        var textarea = initElements.codeView;
        var resizing_bar = bottomBar.resizingBar;
        var navigation = bottomBar.navigation;
        var char_wrapper = bottomBar.charWrapper;
        var char_counter = bottomBar.charCounter;
        var loading_box = doc.createElement("DIV");
        loading_box.className = "ke-loading-box kothing-editor-common";
        loading_box.innerHTML = '<div class="ke-loading-effect"></div>';
        var line_breaker = doc.createElement("DIV");
        line_breaker.className = "ke-line-breaker";
        line_breaker.innerHTML = '<button class="ke-btn">' + options.icons.line_break + "</button>";
        var line_breaker_t = doc.createElement("DIV");
        line_breaker_t.className += "ke-line-breaker-component";
        var line_breaker_b = line_breaker_t.cloneNode(true);
        line_breaker_t.innerHTML = line_breaker_b.innerHTML = options.icons.line_break;
        var resize_back = doc.createElement("DIV");
        resize_back.className = "ke-resizing-back";
        var toolbarContainer = options.toolbarContainer;
        if (toolbarContainer) {
          toolbarContainer.appendChild(tool_bar.element);
        }
        editor_div.appendChild(textarea);
        if (placeholder_span)
          editor_div.appendChild(placeholder_span);
        if (!toolbarContainer)
          relative.appendChild(tool_bar.element);
        relative.appendChild(sticky_dummy);
        relative.appendChild(editor_div);
        relative.appendChild(resize_back);
        relative.appendChild(loading_box);
        relative.appendChild(line_breaker);
        relative.appendChild(line_breaker_t);
        relative.appendChild(line_breaker_b);
        if (resizing_bar)
          relative.appendChild(resizing_bar);
        top_div.appendChild(relative);
        textarea = this._checkCodeMirror(options, textarea);
        return {
          constructed: {
            top: top_div,
            relative,
            toolBar: tool_bar.element,
            menuTray: tool_bar.menuTray,
            editorArea: editor_div,
            wysiwygArea: wysiwyg_div,
            codeArea: textarea,
            placeholder: placeholder_span,
            resizingBar: resizing_bar,
            navigation,
            charWrapper: char_wrapper,
            charCounter: char_counter,
            loading: loading_box,
            lineBreaker: line_breaker,
            lineBreaker_t: line_breaker_t,
            lineBreaker_b: line_breaker_b,
            resizeBack: resize_back,
            stickyDummy: sticky_dummy,
            arrow
          },
          options,
          plugins: tool_bar.plugins,
          pluginCallButtons: tool_bar.pluginCallButtons,
          _responsiveButtons: tool_bar.responsiveButtons
        };
      },
      _checkCodeMirror: function _checkCodeMirror(options, textarea) {
        if (options.codeMirror) {
          var cmOptions = [{
            mode: "htmlmixed",
            htmlMode: true,
            lineNumbers: true,
            lineWrapping: true
          }, options.codeMirror.options || {}].reduce(function(init, option) {
            for (var key in option) {
              if (_util.default.hasOwn(option, key))
                init[key] = option[key];
            }
            return init;
          }, {});
          if (options.height === "auto") {
            cmOptions.viewportMargin = Infinity;
            cmOptions.height = "auto";
          }
          var cm = options.codeMirror.src.fromTextArea(textarea, cmOptions);
          cm.display.wrapper.style.cssText = textarea.style.cssText;
          options.codeMirrorEditor = cm;
          textarea = cm.display.wrapper;
          textarea.className += " ke-wrapper-code-mirror";
        }
        return textarea;
      },
      _checkKatexMath: function _checkKatexMath(katex) {
        if (!katex)
          throw Error('[KothingEditor.create.fail] To use the math button you need to add a "katex" object to the options.');
        var katexOptions = [{
          throwOnError: false
        }, katex.options || {}].reduce(function(init, option) {
          for (var key in option) {
            if (_util.default.hasOwn(option, key))
              init[key] = option[key];
          }
          return init;
        }, {});
        katex.options = katexOptions;
      },
      _setOptions: function _setOptions(mergeOptions, context, originOptions) {
        this._initOptions(context.element.originElement, mergeOptions);
        var el = context.element;
        var relative = el.relative;
        var editorArea = el.editorArea;
        var isNewToolbarContainer = mergeOptions.toolbarContainer && mergeOptions.toolbarContainer !== originOptions.toolbarContainer;
        var isNewToolbar = mergeOptions.lang !== originOptions.lang || mergeOptions.toolbarItem !== originOptions.toolbarItem || mergeOptions.mode !== originOptions.mode || isNewToolbarContainer;
        var tool_bar = this._createToolBar(document, isNewToolbar ? mergeOptions.toolbarItem : originOptions.toolbarItem, mergeOptions.plugins, mergeOptions);
        if (tool_bar.pluginCallButtons.math)
          this._checkKatexMath(mergeOptions.katex);
        var arrow = document.createElement("DIV");
        arrow.className = "ke-arrow";
        if (isNewToolbar) {
          tool_bar.element.style.visibility = "hidden";
          if (isNewToolbarContainer) {
            mergeOptions.toolbarContainer.appendChild(tool_bar.element);
            el.toolbar.parentElement.removeChild(el.toolbar);
          } else {
            el.toolbar.parentElement.replaceChild(tool_bar.element, el.toolbar);
          }
          el.toolbar = tool_bar.element;
          el.menuTray = tool_bar.menuTray;
          el.arrow = arrow;
        }
        var initElements = this._initElements(mergeOptions, el.topArea, isNewToolbar ? tool_bar.element : el.toolbar, arrow);
        var bottomBar = initElements.bottomBar;
        var wysiwygFrame = initElements.wysiwygFrame;
        var placeholder_span = initElements.placeholder;
        var code = initElements.codeView;
        if (el.resizingBar)
          relative.removeChild(el.resizingBar);
        if (bottomBar.resizingBar)
          relative.appendChild(bottomBar.resizingBar);
        editorArea.innerHTML = "";
        editorArea.appendChild(code);
        if (placeholder_span)
          editorArea.appendChild(placeholder_span);
        code = this._checkCodeMirror(mergeOptions, code);
        el.resizingBar = bottomBar.resizingBar;
        el.navigation = bottomBar.navigation;
        el.charWrapper = bottomBar.charWrapper;
        el.charCounter = bottomBar.charCounter;
        el.wysiwygFrame = wysiwygFrame;
        el.code = code;
        el.placeholder = placeholder_span;
        if (mergeOptions.rtl)
          _util.default.addClass(el.topArea, "ke-rtl");
        else
          _util.default.removeClass(el.topArea, "ke-rtl");
        return {
          callButtons: tool_bar.pluginCallButtons,
          plugins: tool_bar.plugins,
          toolbar: tool_bar
        };
      },
      _initElements: function _initElements(options, topDiv, toolBar, toolBarArrow) {
        topDiv.style.cssText = options._editorStyles.top;
        if (/inline/i.test(options.mode)) {
          toolBar.className += " ke-toolbar-inline";
          toolBar.style.width = options.toolbarWidth;
        } else if (/balloon/i.test(options.mode)) {
          toolBar.className += " ke-toolbar-balloon";
          toolBar.style.width = options.toolbarWidth;
          toolBar.appendChild(toolBarArrow);
        }
        var wysiwygDiv = document.createElement(!options.iframe ? "DIV" : "IFRAME");
        wysiwygDiv.className = "ke-wrapper-inner ke-wrapper-wysiwyg";
        if (!options.iframe) {
          wysiwygDiv.setAttribute("contenteditable", true);
          wysiwygDiv.setAttribute("scrolling", "auto");
          wysiwygDiv.className += " " + options._editableClass;
          wysiwygDiv.style.cssText = options._editorStyles.frame + options._editorStyles.editor;
        } else {
          wysiwygDiv.allowFullscreen = true;
          wysiwygDiv.frameBorder = 0;
          wysiwygDiv.style.cssText = options._editorStyles.frame;
        }
        var textarea = document.createElement("TEXTAREA");
        textarea.className = "ke-wrapper-inner ke-wrapper-code";
        textarea.style.cssText = options._editorStyles.frame;
        textarea.style.display = "none";
        if (options.height === "auto")
          textarea.style.overflow = "hidden";
        var resizingBar = null;
        var resizinIcon = null;
        var navigation = null;
        var charWrapper = null;
        var charCounter = null;
        var poweredBy = null;
        if (options.resizingBar) {
          resizingBar = document.createElement("DIV");
          resizingBar.className = "ke-resizing-bar";
          if (/\d+/.test(options.height)) {
            resizinIcon = document.createElement("DIV");
            resizinIcon.className = "ke-resizing-icon";
            resizingBar.appendChild(resizinIcon);
          }
          navigation = document.createElement("DIV");
          navigation.className = "ke-navigation";
          resizingBar.appendChild(navigation);
          if (options.charCounter) {
            charWrapper = document.createElement("DIV");
            charWrapper.className = "ke-char-counter-wrapper";
            if (options.charCounterLabel) {
              var charLabel = document.createElement("SPAN");
              charLabel.className = "ke-char-label";
              charLabel.textContent = options.charCounterLabel;
              charWrapper.appendChild(charLabel);
            }
            charCounter = document.createElement("SPAN");
            charCounter.className = "ke-char-counter";
            charCounter.textContent = "0";
            charWrapper.appendChild(charCounter);
            if (options.maxCharCount > 0) {
              var char_max = document.createElement("SPAN");
              char_max.textContent = " / " + options.maxCharCount;
              charWrapper.appendChild(char_max);
            }
            resizingBar.appendChild(charWrapper);
          }
          poweredBy = document.createElement("DIV");
          poweredBy.className = "ke-powered-by";
          poweredBy.innerHTML = '<a href="https://github.com/kothing/kothing-editor" target="_blank" title="Kothing-Editor">Powered By Kothing</a>';
          resizingBar.appendChild(poweredBy);
        }
        var placeholder = null;
        if (options.placeholder) {
          placeholder = document.createElement("SPAN");
          placeholder.className = "ke-placeholder";
          placeholder.innerText = options.placeholder;
        }
        return {
          bottomBar: {
            resizingBar,
            navigation,
            charWrapper,
            charCounter
          },
          wysiwygFrame: wysiwygDiv,
          codeView: textarea,
          placeholder
        };
      },
      _initOptions: function _initOptions(element, options) {
        options.lang = options.lang || _en.default;
        options.defaultTag = typeof options.defaultTag === "string" ? options.defaultTag : "p";
        var textTags = options.textTags = [{
          bold: "STRONG",
          underline: "U",
          italic: "EM",
          strike: "DEL",
          sub: "SUB",
          sup: "SUP"
        }, options.textTags || {}].reduce(function(_default, _new) {
          for (var key in _new) {
            _default[key] = _new[key];
          }
          return _default;
        }, {});
        options._textTagsMap = {
          strong: textTags.bold.toLowerCase(),
          b: textTags.bold.toLowerCase(),
          u: textTags.underline.toLowerCase(),
          ins: textTags.underline.toLowerCase(),
          em: textTags.italic.toLowerCase(),
          i: textTags.italic.toLowerCase(),
          del: textTags.strike.toLowerCase(),
          strike: textTags.strike.toLowerCase(),
          s: textTags.strike.toLowerCase(),
          sub: textTags.sub.toLowerCase(),
          sup: textTags.sup.toLowerCase()
        };
        options.value = typeof options.value === "string" ? options.value : null;
        options.historyStackDelayTime = typeof options.historyStackDelayTime === "number" ? options.historyStackDelayTime : 400;
        var whitelist = "br|p|div|pre|blockquote|h1|h2|h3|h4|h5|h6|ol|ul|li|hr|figure|figcaption|img|iframe|audio|video|source|table|thead|tbody|tr|th|td|a|b|strong|var|i|em|u|ins|s|span|strike|del|sub|sup|code|svg|path";
        options._defaultTagsWhitelist = typeof options._defaultTagsWhitelist === "string" ? options._defaultTagsWhitelist : whitelist;
        options._editorTagsWhitelist = this._setWhitelist(options._defaultTagsWhitelist + (typeof options.addTagsWhitelist === "string" && options.addTagsWhitelist.length > 0 ? "|" + options.addTagsWhitelist : ""), options.tagsBlacklist);
        options.pasteTagsWhitelist = this._setWhitelist(typeof options.pasteTagsWhitelist === "string" ? options.pasteTagsWhitelist : options._editorTagsWhitelist, options.pasteTagsBlacklist);
        options.attributesWhitelist = !options.attributesWhitelist || _typeof(options.attributesWhitelist) !== "object" ? null : options.attributesWhitelist;
        options.mode = options.mode || "classic";
        options.rtl = !!options.rtl;
        options._editableClass = "kothing-editor-editable" + (options.rtl ? " ke-rtl" : "");
        options._printClass = typeof options._printClass === "string" ? options._printClass : null;
        options.toolbarWidth = options.toolbarWidth ? _util.default.isNumber(options.toolbarWidth) ? options.toolbarWidth + "px" : options.toolbarWidth : "auto";
        options.toolbarContainer = typeof options.toolbarContainer === "string" ? document.querySelector(options.toolbarContainer) : options.toolbarContainer;
        options.stickyToolbar = /balloon/i.test(options.mode) || !!options.toolbarContainer ? -1 : options.stickyToolbar === void 0 ? 0 : /^\d+/.test(options.stickyToolbar) ? _util.default.getNumber(options.stickyToolbar, 0) : -1;
        options.fullScreenOffset = options.fullScreenOffset === void 0 ? 0 : /^\d+/.test(options.fullScreenOffset) ? _util.default.getNumber(options.fullScreenOffset, 0) : 0;
        options.iframe = options.fullPage || options.iframe;
        options.fullPage = !!options.fullPage;
        options.iframeCSSFileName = options.iframe ? typeof options.iframeCSSFileName === "string" ? [options.iframeCSSFileName] : options.iframeCSSFileName || ["kothing-editor"] : null;
        options.previewTemplate = typeof options.previewTemplate === "string" ? options.previewTemplate : null;
        options.printTemplate = typeof options.printTemplate === "string" ? options.printTemplate : null;
        options.codeMirror = options.codeMirror ? options.codeMirror.src ? options.codeMirror : {
          src: options.codeMirror
        } : null;
        options.katex = options.katex ? options.katex.src ? options.katex : {
          src: options.katex
        } : null;
        options.mathFontSize = !!options.mathFontSize ? options.mathFontSize : [{
          text: "1",
          value: "1em"
        }, {
          text: "1.5",
          value: "1.5em"
        }, {
          text: "2",
          value: "2em"
        }, {
          text: "2.5",
          value: "2.5em"
        }];
        options.position = typeof options.position === "string" ? options.position : null;
        options.display = options.display || (element.style.display === "none" || !element.style.display ? "block" : element.style.display);
        options.popupDisplay = options.popupDisplay || "full";
        options.resizingBar = options.resizingBar === void 0 ? /inline|balloon/i.test(options.mode) ? false : true : options.resizingBar;
        options.showPathLabel = !options.resizingBar ? false : typeof options.showPathLabel === "boolean" ? options.showPathLabel : true;
        options.charCounter = options.maxCharCount > 0 ? true : typeof options.charCounter === "boolean" ? options.charCounter : false;
        options.charCounterType = typeof options.charCounterType === "string" ? options.charCounterType : "char";
        options.charCounterLabel = typeof options.charCounterLabel === "string" ? options.charCounterLabel.trim() : null;
        options.maxCharCount = _util.default.isNumber(options.maxCharCount) && options.maxCharCount > -1 ? options.maxCharCount * 1 : null;
        options.width = options.width ? _util.default.isNumber(options.width) ? options.width + "px" : options.width : element.clientWidth ? element.clientWidth + "px" : "100%";
        options.minWidth = (_util.default.isNumber(options.minWidth) ? options.minWidth + "px" : options.minWidth) || "";
        options.maxWidth = (_util.default.isNumber(options.maxWidth) ? options.maxWidth + "px" : options.maxWidth) || "";
        options.height = options.height ? _util.default.isNumber(options.height) ? options.height + "px" : options.height : element.clientHeight ? element.clientHeight + "px" : "auto";
        options.minHeight = (_util.default.isNumber(options.minHeight) ? options.minHeight + "px" : options.minHeight) || "";
        options.maxHeight = (_util.default.isNumber(options.maxHeight) ? options.maxHeight + "px" : options.maxHeight) || "";
        options.defaultStyle = typeof options.defaultStyle === "string" ? options.defaultStyle : "";
        options.font = !options.font ? null : options.font;
        options.fontSize = !options.fontSize ? null : options.fontSize;
        options.formats = !options.formats ? null : options.formats;
        options.colorList = !options.colorList ? null : options.colorList;
        options.lineHeights = !options.lineHeights ? null : options.lineHeights;
        options.paragraphStyles = !options.paragraphStyles ? null : options.paragraphStyles;
        options.textStyles = !options.textStyles ? null : options.textStyles;
        options.fontSizeUnit = typeof options.fontSizeUnit === "string" ? options.fontSizeUnit.trim() || "px" : "px";
        options.imageResizing = options.imageResizing === void 0 ? true : options.imageResizing;
        options.imageHeightShow = options.imageHeightShow === void 0 ? true : !!options.imageHeightShow;
        options.imageWidth = !options.imageWidth ? "auto" : _util.default.isNumber(options.imageWidth) ? options.imageWidth + "px" : options.imageWidth;
        options.imageHeight = !options.imageHeight ? "auto" : _util.default.isNumber(options.imageHeight) ? options.imageHeight + "px" : options.imageHeight;
        options.imageSizeOnlyPercentage = !!options.imageSizeOnlyPercentage;
        options._imageSizeUnit = options.imageSizeOnlyPercentage ? "%" : "px";
        options.imageRotation = options.imageRotation !== void 0 ? options.imageRotation : !(options.imageSizeOnlyPercentage || !options.imageHeightShow);
        options.imageFileInput = options.imageFileInput === void 0 ? true : options.imageFileInput;
        options.imageUrlInput = options.imageUrlInput === void 0 || !options.imageFileInput ? true : options.imageUrlInput;
        options.imageUploadHeader = options.imageUploadHeader || null;
        options.imageUploadUrl = typeof options.imageUploadUrl === "string" ? options.imageUploadUrl : null;
        options.imageUploadSizeLimit = /\d+/.test(options.imageUploadSizeLimit) ? _util.default.getNumber(options.imageUploadSizeLimit, 0) : null;
        options.imageMultipleFile = !!options.imageMultipleFile;
        options.imageAccept = typeof options.imageAccept !== "string" || options.imageAccept.trim() === "*" ? "image/*" : options.imageAccept.trim() || "image/*";
        options.imageGalleryUrl = typeof options.imageGalleryUrl === "string" ? options.imageGalleryUrl : null;
        options.imageGalleryHeader = options.imageGalleryHeader || null;
        options.videoResizing = options.videoResizing === void 0 ? true : options.videoResizing;
        options.videoHeightShow = options.videoHeightShow === void 0 ? true : !!options.videoHeightShow;
        options.videoRatioShow = options.videoRatioShow === void 0 ? true : !!options.videoRatioShow;
        options.videoWidth = !options.videoWidth || !_util.default.getNumber(options.videoWidth, 0) ? "" : _util.default.isNumber(options.videoWidth) ? options.videoWidth + "px" : options.videoWidth;
        options.videoHeight = !options.videoHeight || !_util.default.getNumber(options.videoHeight, 0) ? "" : _util.default.isNumber(options.videoHeight) ? options.videoHeight + "px" : options.videoHeight;
        options.videoSizeOnlyPercentage = !!options.videoSizeOnlyPercentage;
        options._videoSizeUnit = options.videoSizeOnlyPercentage ? "%" : "px";
        options.videoRotation = options.videoRotation !== void 0 ? options.videoRotation : !(options.videoSizeOnlyPercentage || !options.videoHeightShow);
        options.videoRatio = _util.default.getNumber(options.videoRatio, 4) || 0.5625;
        options.videoRatioList = !options.videoRatioList ? null : options.videoRatioList;
        options.youtubeQuery = (options.youtubeQuery || "").replace("?", "");
        options.videoFileInput = !!options.videoFileInput;
        options.videoUrlInput = options.videoUrlInput === void 0 || !options.videoFileInput ? true : options.videoUrlInput;
        options.videoUploadHeader = options.videoUploadHeader || null;
        options.videoUploadUrl = typeof options.videoUploadUrl === "string" ? options.videoUploadUrl : null;
        options.videoUploadSizeLimit = /\d+/.test(options.videoUploadSizeLimit) ? _util.default.getNumber(options.videoUploadSizeLimit, 0) : null;
        options.videoMultipleFile = !!options.videoMultipleFile;
        options.videoTagAttrs = options.videoTagAttrs || null;
        options.videoIframeAttrs = options.videoIframeAttrs || null;
        options.videoAccept = typeof options.videoAccept !== "string" || options.videoAccept.trim() === "*" ? "video/*" : options.videoAccept.trim() || "video/*";
        options.audioWidth = !options.audioWidth ? "" : _util.default.isNumber(options.audioWidth) ? options.audioWidth + "px" : options.audioWidth;
        options.audioHeight = !options.audioHeight ? "" : _util.default.isNumber(options.audioHeight) ? options.audioHeight + "px" : options.audioHeight;
        options.audioFileInput = !!options.audioFileInput;
        options.audioUrlInput = options.audioUrlInput === void 0 || !options.audioFileInput ? true : options.audioUrlInput;
        options.audioUploadHeader = options.audioUploadHeader || null;
        options.audioUploadUrl = typeof options.audioUploadUrl === "string" ? options.audioUploadUrl : null;
        options.audioUploadSizeLimit = /\d+/.test(options.audioUploadSizeLimit) ? _util.default.getNumber(options.audioUploadSizeLimit, 0) : null;
        options.audioMultipleFile = !!options.audioMultipleFile;
        options.audioTagAttrs = options.audioTagAttrs || null;
        options.audioAccept = typeof options.audioAccept !== "string" || options.audioAccept.trim() === "*" ? "audio/*" : options.audioAccept.trim() || "audio/*";
        options.tableCellControllerPosition = typeof options.tableCellControllerPosition === "string" ? options.tableCellControllerPosition.toLowerCase() : "cell";
        options.linkProtocol = typeof options.linkProtocol === "string" ? options.linkProtocol : null;
        options.linkRel = Array.isArray(options.linkRel) ? options.linkRel : [];
        options.linkRelDefault = options.linkRelDefault || {};
        options.tabDisable = !!options.tabDisable;
        options.shortcutsDisable = Array.isArray(options.shortcutsDisable) ? options.shortcutsDisable : [];
        options.shortcutsHint = options.shortcutsHint === void 0 ? true : !!options.shortcutsHint;
        options.callBackSave = !options.callBackSave ? null : options.callBackSave;
        options.templates = !options.templates ? null : options.templates;
        options.placeholder = typeof options.placeholder === "string" ? options.placeholder : null;
        options.mediaAutoSelect = options.mediaAutoSelect === void 0 ? true : !!options.mediaAutoSelect;
        options.toolbarItem = !!options.toolbarItem ? options.toolbarItem : [["undo", "redo"], ["bold", "underline", "italic", "strike", "subscript", "superscript"], ["removeFormat"], ["outdent", "indent"], ["fullScreen", "showBlocks", "codeView"], ["preview", "print"]];
        if (options.rtl) {
          options.toolbarItem = options.toolbarItem.reverse();
        }
        options.icons = !options.icons || _typeof(options.icons) !== "object" ? _defaultIcons.default : [_defaultIcons.default, options.icons].reduce(function(_default, _new) {
          for (var key in _new) {
            if (_util.default.hasOwn(_new, key))
              _default[key] = _new[key];
          }
          return _default;
        }, {});
        options.icons = !options.rtl ? options.icons : [options.icons, options.icons.rtl].reduce(function(_default, _new) {
          for (var key in _new) {
            if (_util.default.hasOwn(_new, key))
              _default[key] = _new[key];
          }
          return _default;
        }, {});
        options._editorStyles = _util.default._setDefaultOptionStyle(options, options.defaultStyle);
      },
      _setWhitelist: function _setWhitelist(whitelist, blacklist) {
        if (typeof blacklist !== "string")
          return whitelist;
        blacklist = blacklist.split("|");
        whitelist = whitelist.split("|");
        for (var i = 0, len = blacklist.length, index; i < len; i++) {
          index = whitelist.indexOf(blacklist[i]);
          if (index > -1)
            whitelist.splice(index, 1);
        }
        return whitelist.join("|");
      },
      _defaultButtons: function _defaultButtons(options) {
        var icons = options.icons;
        var lang = options.lang;
        var cmd = _util.default.isOSX_IOS ? "\u2318" : "CTRL";
        var addShift = _util.default.isOSX_IOS ? "\u21E7" : "+SHIFT";
        var shortcutsDisable = !options.shortcutsHint ? ["bold", "strike", "underline", "italic", "undo", "indent", "save"] : options.shortcutsDisable;
        var indentKey = options.rtl ? ["[", "]"] : ["]", "["];
        return {
          bold: ["_ke_command_bold", lang.toolbar.bold + ' <span class="ke-shortcut">' + (shortcutsDisable.indexOf("bold") > -1 ? "" : cmd + '+<span class="ke-shortcut-key">B</span>') + "</span>", "bold", "", icons.bold],
          underline: ["_ke_command_underline", lang.toolbar.underline + ' <span class="ke-shortcut">' + (shortcutsDisable.indexOf("underline") > -1 ? "" : cmd + '+<span class="ke-shortcut-key">U</span>') + "</span>", "underline", "", icons.underline],
          italic: ["_ke_command_italic", lang.toolbar.italic + ' <span class="ke-shortcut">' + (shortcutsDisable.indexOf("italic") > -1 ? "" : cmd + '+<span class="ke-shortcut-key">I</span>') + "</span>", "italic", "", icons.italic],
          strike: ["_ke_command_strike", lang.toolbar.strike + ' <span class="ke-shortcut">' + (shortcutsDisable.indexOf("strike") > -1 ? "" : cmd + addShift + '+<span class="ke-shortcut-key">S</span>') + "</span>", "strike", "", icons.strike],
          subscript: ["_ke_command_subscript", lang.toolbar.subscript, "SUB", "", icons.subscript],
          superscript: ["_ke_command_superscript", lang.toolbar.superscript, "SUP", "", icons.superscript],
          removeFormat: ["", lang.toolbar.removeFormat, "removeFormat", "", icons.erase],
          indent: ["_ke_command_indent", lang.toolbar.indent + ' <span class="ke-shortcut">' + (shortcutsDisable.indexOf("indent") > -1 ? "" : cmd + '+<span class="ke-shortcut-key">' + indentKey[0] + "</span>") + "</span>", "indent", "", icons.outdent],
          outdent: ["_ke_command_outdent", lang.toolbar.outdent + ' <span class="ke-shortcut">' + (shortcutsDisable.indexOf("indent") > -1 ? "" : cmd + '+<span class="ke-shortcut-key">' + indentKey[1] + "</span>") + "</span>", "outdent", "", icons.indent],
          fullScreen: ["ke-code-view-enabled ke-resizing-enabled _ke_command_fullScreen", lang.toolbar.fullScreen, "fullScreen", "", icons.expansion],
          showBlocks: ["_ke_command_showBlocks", lang.toolbar.showBlocks, "showBlocks", "", icons.show_blocks],
          codeView: ["ke-code-view-enabled ke-resizing-enabled _ke_command_codeView", lang.toolbar.codeView, "codeView", "", icons.code_view],
          undo: ["_ke_command_undo ke-resizing-enabled", lang.toolbar.undo + '<span class="ke-shortcut">' + (shortcutsDisable.indexOf("undo") > -1 ? "" : cmd + '+<span class="ke-shortcut-key">Z</span>') + "</span>", "undo", "", icons.undo],
          redo: ["_ke_command_redo ke-resizing-enabled", lang.toolbar.redo + '<span class="ke-shortcut">' + (shortcutsDisable.indexOf("undo") > -1 ? "" : cmd + '+<span class="ke-shortcut-key">Y</span> / ' + cmd + addShift + '+<span class="ke-shortcut-key">Z</span>') + "</span>", "redo", "", icons.redo],
          preview: ["ke-resizing-enabled", lang.toolbar.preview, "preview", "", icons.preview],
          print: ["ke-resizing-enabled", lang.toolbar.print, "print", "", icons.print],
          save: ["_ke_command_save ke-resizing-enabled", lang.toolbar.save + '<span class="ke-shortcut">' + (shortcutsDisable.indexOf("save") > -1 ? "" : cmd + '+<span class="ke-shortcut-key">S</span>') + "</span>", "save", "", icons.save],
          blockquote: ["", lang.toolbar.tag_blockquote, "blockquote", "command", icons.blockquote],
          font: ["ke-btn-select ke-btn-tool-font", lang.toolbar.font, "font", "submenu", '<span class="txt">'.concat(icons.font, '</span> <span class="arrow-icon">').concat(icons.arrow_down, "</span>")],
          formatBlock: ["ke-btn-select ke-btn-tool-format", lang.toolbar.formats, "formatBlock", "submenu", '<span class="txt">'.concat(icons.format_block, '</span> <span class="arrow-icon">').concat(icons.arrow_down, "</span>")],
          fontSize: ["ke-btn-select ke-btn-tool-size", lang.toolbar.fontSize, "fontSize", "submenu", '<span class="txt">'.concat(icons.font_size, '</span> <span class="arrow-icon">').concat(icons.arrow_down, "</span>")],
          fontColor: ["", lang.toolbar.fontColor, "fontColor", "submenu", icons.font_color],
          hiliteColor: ["", lang.toolbar.hiliteColor, "hiliteColor", "submenu", icons.highlight_color],
          align: ["ke-btn-align", lang.toolbar.align, "align", "submenu", options.rtl ? icons.align_right : icons.align_left],
          list: ["", lang.toolbar.list, "list", "submenu", icons.list_number],
          horizontalRule: ["btn_line", lang.toolbar.horizontalRule, "horizontalRule", "submenu", icons.horizontal_rule],
          table: ["", lang.toolbar.table, "table", "submenu", icons.table],
          lineHeight: ["", lang.toolbar.lineHeight, "lineHeight", "submenu", icons.line_height],
          template: ["", lang.toolbar.template, "template", "submenu", icons.template],
          paragraphStyle: ["", lang.toolbar.paragraphStyle, "paragraphStyle", "submenu", icons.paragraph_style],
          textStyle: ["", lang.toolbar.textStyle, "textStyle", "submenu", icons.text_style],
          link: ["", lang.toolbar.link, "link", "dialog", icons.link],
          image: ["", lang.toolbar.image, "image", "dialog", icons.image],
          video: ["", lang.toolbar.video, "video", "dialog", icons.video],
          audio: ["", lang.toolbar.audio, "audio", "dialog", icons.audio],
          math: ["", lang.toolbar.math, "math", "dialog", icons.math],
          imageGallery: ["", lang.toolbar.imageGallery, "imageGallery", "fileBrowser", icons.image_gallery]
        };
      },
      _createModuleGroup: function _createModuleGroup() {
        var oDiv = _util.default.createElement("DIV");
        oDiv.className = "ke-btn-module ke-btn-module-border";
        var oUl = _util.default.createElement("UL");
        oUl.className = "ke-menu-list";
        oDiv.appendChild(oUl);
        return {
          div: oDiv,
          ul: oUl
        };
      },
      _createButton: function _createButton(buttonClass, title, dataCommand, dataDisplay, innerHTML, _disabled, _icons) {
        var oLi = _util.default.createElement("LI");
        var oButton = _util.default.createElement("BUTTON");
        oButton.setAttribute("type", "button");
        oButton.setAttribute("class", "ke-btn" + (buttonClass ? " " + buttonClass : "") + " ke-tooltip");
        oButton.setAttribute("data-command", dataCommand);
        oButton.setAttribute("data-display", dataDisplay);
        oButton.setAttribute("tabindex", "-1");
        if (!innerHTML)
          innerHTML = '<span class="ke-icon-text">!</span>';
        if (/^default\./i.test(innerHTML)) {
          innerHTML = _icons[innerHTML.replace(/^default\./i, "")];
        }
        if (/^text\./i.test(innerHTML)) {
          innerHTML = innerHTML.replace(/^text\./i, "");
          oButton.className += " ke-btn-more-text";
        }
        innerHTML += '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + (title || dataCommand) + "</span></span>";
        if (_disabled) {
          oButton.setAttribute("disabled", true);
        }
        oButton.innerHTML = innerHTML;
        oLi.appendChild(oButton);
        return {
          li: oLi,
          button: oButton
        };
      },
      _createToolBar: function _createToolBar(doc, toolbarItem, _plugins, options) {
        var separator_vertical = doc.createElement("DIV");
        separator_vertical.className = "ke-toolbar-separator-vertical";
        var tool_bar = doc.createElement("DIV");
        tool_bar.className = "ke-toolbar kothing-editor-common";
        var buttonTray = doc.createElement("DIV");
        buttonTray.className = "ke-btn-tray";
        tool_bar.appendChild(buttonTray);
        toolbarItem = JSON.parse(JSON.stringify(toolbarItem));
        var icons = options.icons;
        var defaultToolbarItem = this._defaultButtons(options);
        var pluginCallButtons = {};
        var responsiveButtons = [];
        var plugins = {};
        if (_plugins) {
          var pluginsValues = _plugins.length ? _plugins : Object.keys(_plugins).map(function(name) {
            return _plugins[name];
          });
          for (var i = 0, len = pluginsValues.length, p; i < len; i++) {
            p = pluginsValues[i].default || pluginsValues[i];
            plugins[p.name] = p;
          }
        }
        var module2 = null;
        var button = null;
        var moduleElement = null;
        var buttonElement = null;
        var pluginName = "";
        var vertical = false;
        var moreLayer = _util.default.createElement("DIV");
        moreLayer.className = "ke-toolbar-more-layer";
        buttonGroupLoop:
          for (var _i = 0, more, moreContainer, moreCommand, buttonGroup, align; _i < toolbarItem.length; _i++) {
            more = false;
            align = "";
            buttonGroup = toolbarItem[_i];
            moduleElement = this._createModuleGroup();
            if (_typeof(buttonGroup) === "object") {
              for (var j = 0, moreButton; j < buttonGroup.length; j++) {
                button = buttonGroup[j];
                moreButton = false;
                if (/^\%\d+/.test(button) && j === 0) {
                  buttonGroup[0] = button.replace(/[^\d]/g, "");
                  responsiveButtons.push(buttonGroup);
                  toolbarItem.splice(_i--, 1);
                  continue buttonGroupLoop;
                }
                if (_typeof(button) === "object") {
                  if (typeof button.add === "function") {
                    pluginName = button.name;
                    module2 = defaultToolbarItem[pluginName];
                    plugins[pluginName] = button;
                  } else {
                    pluginName = button.name;
                    module2 = [button.buttonClass, button.title, button.name, button.dataDisplay, button.innerHTML, button._disabled];
                  }
                } else {
                  if (/^\-/.test(button)) {
                    align = button.substr(1);
                    moduleElement.div.style.float = align;
                    continue;
                  }
                  if (/^\:/.test(button)) {
                    moreButton = true;
                    var matched = button.match(/^\:([^\-]+)\-([^\-]+)\-([^\-]+)/);
                    moreCommand = "__ke__" + matched[1].trim();
                    var title = matched[2].trim();
                    var innerHTML = matched[3].trim();
                    module2 = ["ke-btn-more", title, moreCommand, "MORE", innerHTML];
                  } else {
                    module2 = defaultToolbarItem[button];
                  }
                  pluginName = button;
                  if (!module2) {
                    var custom = plugins[pluginName];
                    if (!custom)
                      throw Error("[KothingEditor.create.toolbar.fail] The button name of a plugin that does not exist. [" + pluginName + "]");
                    module2 = [custom.buttonClass, custom.title, custom.name, custom.display, custom.innerHTML, custom._disabled];
                  }
                }
                buttonElement = this._createButton(module2[0], module2[1], module2[2], module2[3], module2[4], module2[5], icons);
                (more ? moreContainer : moduleElement.ul).appendChild(buttonElement.li);
                if (plugins[pluginName]) {
                  pluginCallButtons[pluginName] = buttonElement.button;
                }
                if (moreButton) {
                  more = true;
                  moreContainer = _util.default.createElement("DIV");
                  moreContainer.className = "ke-more-layer " + moreCommand;
                  moreContainer.innerHTML = '<div class="ke-more-form"><ul class="ke-menu-list"' + (align ? ' style="float: ' + align + ';"' : "") + "></ul></div>";
                  moreLayer.appendChild(moreContainer);
                  moreContainer = moreContainer.firstElementChild.firstElementChild;
                }
              }
              if (vertical) {
                var sv = separator_vertical.cloneNode(false);
                buttonTray.appendChild(sv);
              }
              buttonTray.appendChild(moduleElement.div);
              vertical = true;
            } else if (/^\/$/.test(buttonGroup)) {
              var enterDiv = doc.createElement("DIV");
              enterDiv.className = "ke-btn-module-enter";
              buttonTray.appendChild(enterDiv);
              vertical = false;
            }
          }
        switch (buttonTray.children.length) {
          case 0:
            buttonTray.style.display = "none";
            break;
          case 1:
            _util.default.removeClass(buttonTray.firstElementChild, "ke-btn-module-border");
            break;
          default:
            if (options.rtl) {
              var _sv = separator_vertical.cloneNode(false);
              _sv.style.float = buttonTray.lastElementChild.style.float;
              buttonTray.appendChild(_sv);
            }
        }
        if (responsiveButtons.length > 0)
          responsiveButtons.unshift(toolbarItem);
        if (moreLayer.children.length > 0)
          buttonTray.appendChild(moreLayer);
        var menuTray = doc.createElement("DIV");
        menuTray.className = "ke-menu-tray";
        tool_bar.appendChild(menuTray);
        var tool_cover = doc.createElement("DIV");
        tool_cover.className = "ke-toolbar-cover";
        tool_bar.appendChild(tool_cover);
        return {
          element: tool_bar,
          plugins,
          pluginCallButtons,
          responsiveButtons,
          menuTray,
          buttonTray
        };
      }
    };
    exports.default = _default2;
  }
});

// node_modules/kothing-editor/lib/lib/context.js
var require_context = __commonJS({
  "node_modules/kothing-editor/lib/lib/context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var $context = function $context2(element, cons, options) {
      return {
        element: {
          originElement: element,
          topArea: cons.top,
          relative: cons.relative,
          toolbar: cons.toolBar,
          buttonTray: cons.toolBar.querySelector(".ke-btn-tray"),
          menuTray: cons.menuTray,
          resizingBar: cons.resizingBar,
          navigation: cons.navigation,
          charWrapper: cons.charWrapper,
          charCounter: cons.charCounter,
          editorArea: cons.editorArea,
          wysiwygFrame: cons.wysiwygArea,
          wysiwyg: cons.wysiwygArea,
          code: cons.codeArea,
          placeholder: cons.placeholder,
          loading: cons.loading,
          lineBreaker: cons.lineBreaker,
          lineBreaker_t: cons.lineBreaker_t,
          lineBreaker_b: cons.lineBreaker_b,
          resizeBackground: cons.resizeBack,
          stickyDummy: cons.stickyDummy,
          arrow: cons.arrow
        },
        tool: {
          cover: cons.toolBar.querySelector(".ke-toolbar-cover"),
          bold: cons.toolBar.querySelector("._ke_command_bold"),
          underline: cons.toolBar.querySelector("._ke_command_underline"),
          italic: cons.toolBar.querySelector("._ke_command_italic"),
          strike: cons.toolBar.querySelector("._ke_command_strike"),
          subscript: cons.toolBar.querySelector("._ke_command_subscript"),
          superscript: cons.toolBar.querySelector("._ke_command_superscript"),
          undo: cons.toolBar.querySelector("._ke_command_undo"),
          redo: cons.toolBar.querySelector("._ke_command_redo"),
          save: cons.toolBar.querySelector("._ke_command_save"),
          outdent: cons.toolBar.querySelector("._ke_command_outdent"),
          indent: cons.toolBar.querySelector("._ke_command_indent"),
          fullScreen: cons.toolBar.querySelector("._ke_command_fullScreen"),
          showBlocks: cons.toolBar.querySelector("._ke_command_showBlocks"),
          codeView: cons.toolBar.querySelector("._ke_command_codeView")
        },
        options,
        option: options
      };
    };
    var _default = $context;
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/lib/history.js
var require_history = __commonJS({
  "node_modules/kothing-editor/lib/lib/history.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    function _default(core, change) {
      var _w = core._w;
      var util = core.util;
      var delayTime = core.options.historyStackDelayTime;
      var editor = core.context.element;
      var undo = core.context.tool.undo;
      var redo = core.context.tool.redo;
      var pushDelay = null;
      var stackIndex = 0;
      var stack = [];
      function setContentsFromStack() {
        var item = stack[stackIndex];
        editor.wysiwyg.innerHTML = item.contents;
        core.setRange(util.getNodeFromPath(item.s.path, editor.wysiwyg), item.s.offset, util.getNodeFromPath(item.e.path, editor.wysiwyg), item.e.offset);
        core.focus();
        if (stackIndex === 0) {
          if (undo)
            undo.setAttribute("disabled", true);
          if (redo)
            redo.removeAttribute("disabled");
        } else if (stackIndex === stack.length - 1) {
          if (undo)
            undo.removeAttribute("disabled");
          if (redo)
            redo.setAttribute("disabled", true);
        } else {
          if (undo)
            undo.removeAttribute("disabled");
          if (redo)
            redo.removeAttribute("disabled");
        }
        core.controllersOff();
        core._checkComponents();
        core._setCharCount();
        core._resourcesStateChange();
        change();
      }
      function pushStack() {
        core._checkComponents();
        var current = core.getContents(true);
        if (!current || !!stack[stackIndex] && current === stack[stackIndex].contents)
          return;
        stackIndex++;
        var range = core._variable._range;
        if (stack.length > stackIndex) {
          stack = stack.slice(0, stackIndex);
          if (redo)
            redo.setAttribute("disabled", true);
        }
        if (!range) {
          stack[stackIndex] = {
            contents: current,
            s: {
              path: [0, 0],
              offset: [0, 0]
            },
            e: {
              path: 0,
              offset: 0
            }
          };
        } else {
          stack[stackIndex] = {
            contents: current,
            s: {
              path: util.getNodePath(range.startContainer, null, null),
              offset: range.startOffset
            },
            e: {
              path: util.getNodePath(range.endContainer, null, null),
              offset: range.endOffset
            }
          };
        }
        if (stackIndex === 1 && undo)
          undo.removeAttribute("disabled");
        core._setCharCount();
        change();
      }
      return {
        stack,
        push: function push(delay) {
          _w.setTimeout(core._resourcesStateChange.bind(core));
          var time = typeof delay === "number" ? delay > 0 ? delay : 0 : !delay ? 0 : delayTime;
          if (!time || pushDelay) {
            _w.clearTimeout(pushDelay);
            if (!time) {
              pushStack();
              return;
            }
          }
          pushDelay = _w.setTimeout(function() {
            _w.clearTimeout(pushDelay);
            pushDelay = null;
            pushStack();
          }, time);
        },
        undo: function undo2() {
          if (stackIndex > 0) {
            stackIndex--;
            setContentsFromStack();
          }
        },
        redo: function redo2() {
          if (stack.length - 1 > stackIndex) {
            stackIndex++;
            setContentsFromStack();
          }
        },
        go: function go(index) {
          stackIndex = index < 0 ? stack.length - 1 : index;
          setContentsFromStack();
        },
        reset: function reset(ignoreChangeEvent) {
          if (undo)
            undo.setAttribute("disabled", true);
          if (redo)
            redo.setAttribute("disabled", true);
          core._variable.isChanged = false;
          if (core.context.tool.save)
            core.context.tool.save.setAttribute("disabled", true);
          stack.splice(0);
          stackIndex = 0;
          stack[stackIndex] = {
            contents: core.getContents(true),
            s: {
              path: [0, 0],
              offset: 0
            },
            e: {
              path: [0, 0],
              offset: 0
            }
          };
          if (!ignoreChangeEvent)
            change();
        },
        _resetCachingButton: function _resetCachingButton() {
          editor = core.context.element;
          undo = core.context.tool.undo;
          redo = core.context.tool.redo;
          if (stackIndex === 0) {
            if (undo)
              undo.setAttribute("disabled", true);
            if (redo && stackIndex === stack.length - 1)
              redo.setAttribute("disabled", true);
            core._variable.isChanged = false;
            if (core.context.tool.save)
              core.context.tool.save.setAttribute("disabled", true);
          } else if (stackIndex === stack.length - 1) {
            if (redo)
              redo.setAttribute("disabled", true);
          }
        },
        _destroy: function _destroy() {
          if (pushDelay)
            _w.clearTimeout(pushDelay);
          stack = null;
        }
      };
    }
  }
});

// node_modules/kothing-editor/lib/plugins/modules/notice.js
var require_notice = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/notice.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "notice",
      add: function add(core) {
        var context = core.context;
        context.notice = {};
        var notice_div = core.util.createElement("DIV");
        var notice_span = core.util.createElement("SPAN");
        var notice_button = core.util.createElement("BUTTON");
        notice_div.className = "ke-notice";
        notice_button.className = "close";
        notice_button.setAttribute("aria-label", "Close");
        notice_button.setAttribute("title", core.lang.dialogBox.close);
        notice_button.innerHTML = core.icons.cancel;
        notice_div.appendChild(notice_span);
        notice_div.appendChild(notice_button);
        context.notice.modal = notice_div;
        context.notice.message = notice_span;
        notice_button.addEventListener("click", this.onClick_cancel.bind(core));
        context.element.editorArea.appendChild(notice_div);
        notice_div = null;
      },
      onClick_cancel: function onClick_cancel(e) {
        e.preventDefault();
        e.stopPropagation();
        this.plugins.notice.close.call(this);
      },
      open: function open(text) {
        this.context.notice.message.textContent = text;
        this.context.notice.modal.style.display = "block";
      },
      close: function close() {
        this.context.notice.modal.style.display = "none";
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/lib/core.js
var require_core = __commonJS({
  "node_modules/kothing-editor/lib/lib/core.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _constructor = _interopRequireDefault(require_constructor());
    var _context = _interopRequireDefault(require_context());
    var _history = _interopRequireDefault(require_history());
    var _util = _interopRequireDefault(require_util());
    var _notice = _interopRequireDefault(require_notice());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _default(context, pluginCallButtons, plugins, lang, options, _responsiveButtons) {
      var _d = context.element.originElement.ownerDocument || document;
      var _w = _d.defaultView || window;
      var util = _util.default;
      var icons = options.icons;
      var core = {
        _d,
        _w,
        _parser: new _w.DOMParser(),
        _wd: null,
        _ww: null,
        _shadowRoot: null,
        _shadowRootControllerEventTarget: null,
        util,
        functions: null,
        options: null,
        wwComputedStyle: _w.getComputedStyle(context.element.wysiwyg),
        notice: _notice.default,
        icons,
        history: null,
        context,
        pluginCallButtons,
        plugins: plugins || {},
        initPlugins: {},
        _targetPlugins: {},
        menuTray: {},
        lang,
        effectNode: null,
        submenu: null,
        container: null,
        _submenuName: "",
        _bindedSubmenuOff: null,
        _bindedContainerOff: null,
        submenuActiveButton: null,
        containerActiveButton: null,
        controllerArray: [],
        currentControllerName: "",
        currentControllerTarget: null,
        currentFileComponentInfo: null,
        codeViewDisabledButtons: null,
        resizingDisabledButtons: null,
        _moreLayerActiveButton: null,
        _htmlCheckWhitelistRegExp: null,
        _disallowedTextTagsRegExp: null,
        editorTagsWhitelistRegExp: null,
        pasteTagsWhitelistRegExp: null,
        hasFocus: false,
        isDisabled: false,
        _attributesWhitelistRegExp: null,
        _attributesTagsWhitelist: null,
        _bindControllersOff: null,
        _isInline: null,
        _isBalloon: null,
        _isBalloonAlways: null,
        _inlineToolbarAttr: {
          top: "",
          width: "",
          isShow: false
        },
        _notHideToolbar: false,
        _sticky: false,
        _antiBlur: false,
        lineBreaker: null,
        lineBreakerButton: null,
        _componentsInfoInit: true,
        _componentsInfoReset: false,
        activePlugins: null,
        managedTagsInfo: null,
        _charTypeHTML: false,
        _fileInfoPluginsCheck: null,
        _fileInfoPluginsReset: null,
        _fileManager: {
          tags: null,
          regExp: null,
          queryString: null,
          pluginRegExp: null,
          pluginMap: null
        },
        commandMap: null,
        _styleCommandMap: null,
        _defaultCommand: {
          bold: options.textTags.bold,
          underline: options.textTags.underline,
          italic: options.textTags.italic,
          strike: options.textTags.strike,
          subscript: options.textTags.sub,
          superscript: options.textTags.sup
        },
        _variable: {
          isChanged: false,
          isCodeView: false,
          isFullScreen: false,
          innerHeight_fullScreen: 0,
          resizeClientY: 0,
          tabSize: 4,
          codeIndent: 2,
          minResizingSize: util.getNumber(context.element.wysiwygFrame.style.minHeight || "65", 0),
          currentNodes: [],
          currentNodesMap: [],
          _range: null,
          _selectionNode: null,
          _originCssText: context.element.topArea.style.cssText,
          _bodyOverflow: "",
          editorAreaOriginCssText: "",
          _wysiwygOriginCssText: "",
          _codeOriginCssText: "",
          _fullScreenAttrs: {
            sticky: false,
            balloon: false,
            inline: false
          },
          _lineBreakComp: null,
          _lineBreakDir: ""
        },
        callPlugin: function callPlugin(pluginName, callBackFunction, _target) {
          _target = _target || pluginCallButtons[pluginName];
          if (!this.plugins[pluginName]) {
            throw Error('[KothingEditor.core.callPlugin.fail] The called plugin does not exist or is in an invalid format. (pluginName:"' + pluginName + '")');
          } else if (!this.initPlugins[pluginName]) {
            this.plugins[pluginName].add(this, _target);
            this.initPlugins[pluginName] = true;
          } else if (_typeof(this._targetPlugins[pluginName]) === "object" && !!_target) {
            this.initMenuTarget(pluginName, _target, this._targetPlugins[pluginName]);
          }
          if (this.plugins[pluginName].active && !this.commandMap[pluginName] && !!_target) {
            this.commandMap[pluginName] = _target;
            this.activePlugins.push(pluginName);
          }
          if (typeof callBackFunction === "function")
            callBackFunction();
        },
        addModule: function addModule(moduleArray) {
          for (var i = 0, len = moduleArray.length, moduleName; i < len; i++) {
            moduleName = moduleArray[i].name;
            if (!this.plugins[moduleName]) {
              this.plugins[moduleName] = moduleArray[i];
            }
            if (!this.initPlugins[moduleName]) {
              this.initPlugins[moduleName] = true;
              if (typeof this.plugins[moduleName].add === "function")
                this.plugins[moduleName].add(this);
            }
          }
        },
        getGlobalScrollOffset: function getGlobalScrollOffset() {
          var t = 0, l = 0;
          var el = context.element.topArea;
          while (el) {
            t += el.scrollTop;
            l += el.scrollLeft;
            el = el.parentElement;
          }
          el = this._shadowRoot ? this._shadowRoot.host : null;
          while (el) {
            t += el.scrollTop;
            l += el.scrollLeft;
            el = el.parentElement;
          }
          return {
            top: t,
            left: l
          };
        },
        initMenuTarget: function initMenuTarget(pluginName, target, menu) {
          if (!target) {
            this._targetPlugins[pluginName] = menu;
          } else {
            context.element.menuTray.appendChild(menu);
            this._targetPlugins[pluginName] = true;
            this.menuTray[target.getAttribute("data-command")] = menu;
          }
        },
        submenuOn: function submenuOn(element) {
          if (this._bindedSubmenuOff)
            this._bindedSubmenuOff();
          if (this._bindControllersOff)
            this.controllersOff();
          var submenuName = this._submenuName = element.getAttribute("data-command");
          var menu = this.submenu = this.menuTray[submenuName];
          this.submenuActiveButton = element;
          this._setMenuPosition(element, menu);
          this._bindedSubmenuOff = this.submenuOff.bind(this);
          this.addDocEvent("mousedown", this._bindedSubmenuOff, false);
          if (this.plugins[submenuName].on)
            this.plugins[submenuName].on.call(this);
          this._antiBlur = true;
        },
        submenuOff: function submenuOff() {
          this.removeDocEvent("mousedown", this._bindedSubmenuOff);
          this._bindedSubmenuOff = null;
          if (this.submenu) {
            this._submenuName = "";
            this.submenu.style.display = "none";
            this.submenu = null;
            util.removeClass(this.submenuActiveButton, "on");
            this.submenuActiveButton = null;
            this._notHideToolbar = false;
          }
          this._antiBlur = false;
        },
        containerOn: function containerOn(element) {
          if (this._bindedContainerOff)
            this._bindedContainerOff();
          var containerName = this._containerName = element.getAttribute("data-command");
          var menu = this.container = this.menuTray[containerName];
          this.containerActiveButton = element;
          this._setMenuPosition(element, menu);
          this._bindedContainerOff = this.containerOff.bind(this);
          this.addDocEvent("mousedown", this._bindedContainerOff, false);
          if (this.plugins[containerName].on)
            this.plugins[containerName].on.call(this);
          this._antiBlur = true;
        },
        containerOff: function containerOff() {
          this.removeDocEvent("mousedown", this._bindedContainerOff);
          this._bindedContainerOff = null;
          if (this.container) {
            this._containerName = "";
            this.container.style.display = "none";
            this.container = null;
            util.removeClass(this.containerActiveButton, "on");
            this.containerActiveButton = null;
            this._notHideToolbar = false;
          }
          this._antiBlur = false;
        },
        _setMenuPosition: function _setMenuPosition(element, menu) {
          menu.style.visibility = "hidden";
          menu.style.display = "block";
          menu.style.height = "";
          util.addClass(element, "on");
          var toolbar = this.context.element.toolbar;
          var toolbarW = toolbar.offsetWidth;
          var toolbarOffset = event._getEditorOffsets(context.element.toolbar);
          var menuW = menu.offsetWidth;
          var l = element.parentElement.offsetLeft + 3;
          if (options.rtl) {
            var elementW = element.offsetWidth;
            var rtlW = menuW > elementW ? menuW - elementW : 0;
            var rtlL = rtlW > 0 ? 0 : elementW - menuW;
            menu.style.left = l - rtlW + rtlL + "px";
            if (toolbarOffset.left > event._getEditorOffsets(menu).left) {
              menu.style.left = "0px";
            }
          } else {
            var overLeft = toolbarW <= menuW ? 0 : toolbarW - (l + menuW);
            if (overLeft < 0)
              menu.style.left = l + overLeft + "px";
            else
              menu.style.left = l + "px";
          }
          var t = 0;
          var offsetEl = element;
          while (offsetEl && offsetEl !== toolbar) {
            t += offsetEl.offsetTop;
            offsetEl = offsetEl.offsetParent;
          }
          var bt = t;
          if (this._isBalloon) {
            t += toolbar.offsetTop + element.offsetHeight;
          } else {
            t -= element.offsetHeight;
          }
          var toolbarTop = toolbarOffset.top;
          var menuHeight = menu.offsetHeight;
          var scrollTop = this.getGlobalScrollOffset().top;
          var menuHeight_bottom = _w.innerHeight - (toolbarTop - scrollTop + bt + element.parentElement.offsetHeight);
          if (menuHeight_bottom < menuHeight) {
            var menuTop = -1 * (menuHeight - bt + 3);
            var insTop = toolbarTop - scrollTop + menuTop;
            var menuHeight_top = menuHeight + (insTop < 0 ? insTop : 0);
            if (menuHeight_top > menuHeight_bottom) {
              menu.style.height = menuHeight_top + "px";
              menuTop = -1 * (menuHeight_top - bt + 3);
            } else {
              menu.style.height = menuHeight_bottom + "px";
              menuTop = bt + element.parentElement.offsetHeight;
            }
            menu.style.top = menuTop + "px";
          } else {
            menu.style.top = bt + element.parentElement.offsetHeight + "px";
          }
          menu.style.visibility = "";
        },
        controllersOn: function controllersOn() {
          if (this._bindControllersOff)
            this._bindControllersOff();
          this.controllerArray = [];
          for (var i = 0, arg; i < arguments.length; i++) {
            arg = arguments[i];
            if (!arg)
              continue;
            if (typeof arg === "string") {
              this.currentControllerName = arg;
              continue;
            }
            if (typeof arg === "function") {
              this.controllerArray.push(arg);
              continue;
            }
            if (!util.hasClass(arg, "ke-controller")) {
              this.currentControllerTarget = arg;
              this.currentFileComponentInfo = this.getFileComponent(arg);
              continue;
            }
            if (arg.style) {
              arg.style.display = "block";
              if (this._shadowRoot && this._shadowRootControllerEventTarget.indexOf(arg) === -1) {
                arg.addEventListener("mousedown", function(e) {
                  e.preventDefault();
                  e.stopPropagation();
                });
                this._shadowRootControllerEventTarget.push(arg);
              }
            }
            this.controllerArray.push(arg);
          }
          this._bindControllersOff = this.controllersOff.bind(this);
          this.addDocEvent("mousedown", this._bindControllersOff, false);
          this.addDocEvent("keydown", this._bindControllersOff, false);
          this._antiBlur = true;
          if (typeof functions.showController === "function")
            functions.showController(this.currentControllerName, this.controllerArray, this);
        },
        controllersOff: function controllersOff(e) {
          this.lineBreaker.style.display = "none";
          var len = this.controllerArray.length;
          if (e && e.target && len > 0) {
            for (var i = 0; i < len; i++) {
              if (typeof this.controllerArray[i].contains === "function" && this.controllerArray[i].contains(e.target))
                return;
            }
          }
          if (this._fileManager.pluginRegExp.test(this.currentControllerName) && e && e.type === "keydown" && e.keyCode !== 27)
            return;
          context.element.lineBreaker_t.style.display = context.element.lineBreaker_b.style.display = "none";
          this._variable._lineBreakComp = null;
          this.currentControllerName = "";
          this.currentControllerTarget = null;
          this.currentFileComponentInfo = null;
          this.effectNode = null;
          if (!this._bindControllersOff)
            return;
          this.removeDocEvent("mousedown", this._bindControllersOff);
          this.removeDocEvent("keydown", this._bindControllersOff);
          this._bindControllersOff = null;
          if (len > 0) {
            for (var _i = 0; _i < len; _i++) {
              if (typeof this.controllerArray[_i] === "function")
                this.controllerArray[_i]();
              else
                this.controllerArray[_i].style.display = "none";
            }
            this.controllerArray = [];
          }
          this._antiBlur = false;
        },
        setControllerPosition: function setControllerPosition(controller, referEl, position, addOffset) {
          if (options.rtl)
            addOffset.left *= -1;
          var offset = util.getOffset(referEl, context.element.wysiwygFrame);
          controller.style.visibility = "hidden";
          controller.style.display = "block";
          var topMargin = position === "top" ? -(controller.offsetHeight + 2) : referEl.offsetHeight + 12;
          controller.style.top = offset.top + topMargin + addOffset.top + "px";
          var l = offset.left - context.element.wysiwygFrame.scrollLeft + addOffset.left;
          var controllerW = controller.offsetWidth;
          var referElW = referEl.offsetWidth;
          var allow = util.hasClass(controller.firstElementChild, "ke-arrow") ? controller.firstElementChild : null;
          if (options.rtl) {
            var rtlW = controllerW > referElW ? controllerW - referElW : 0;
            var rtlL = rtlW > 0 ? 0 : referElW - controllerW;
            controller.style.left = l - rtlW + rtlL + "px";
            if (rtlW > 0) {
              if (allow)
                allow.style.left = (controllerW - 14 < 10 + rtlW ? controllerW - 14 : 10 + rtlW) + "px";
            }
            var overSize = context.element.wysiwygFrame.offsetLeft - controller.offsetLeft;
            if (overSize > 0) {
              controller.style.left = "0px";
              if (allow)
                allow.style.left = overSize + "px";
            }
          } else {
            controller.style.left = l + "px";
            var _overSize = context.element.wysiwygFrame.offsetWidth - (controller.offsetLeft + controllerW);
            if (_overSize < 0) {
              controller.style.left = controller.offsetLeft + _overSize + "px";
              if (allow)
                allow.style.left = 20 - _overSize + "px";
            } else {
              if (allow)
                allow.style.left = "20px";
            }
          }
          controller.style.visibility = "";
        },
        execCommand: function execCommand(command, showDefaultUI, value) {
          this._wd.execCommand(command, showDefaultUI, command === "formatBlock" ? "<" + value + ">" : value);
          this.history.push(true);
        },
        nativeFocus: function nativeFocus() {
          var caption = util.getParentElement(this.getSelectionNode(), "figcaption");
          if (caption) {
            caption.focus();
          } else {
            context.element.wysiwyg.focus();
          }
          this._editorRange();
        },
        focus: function focus() {
          if (context.element.wysiwygFrame.style.display === "none")
            return;
          if (options.iframe) {
            this.nativeFocus();
          } else {
            try {
              var range = this.getRange();
              if (range.startContainer === range.endContainer && util.isWysiwygDiv(range.startContainer)) {
                var currentNode = range.commonAncestorContainer.children[range.startOffset];
                if (!util.isFormatElement(currentNode) && !util.isComponent(currentNode)) {
                  var format = util.createElement(options.defaultTag);
                  var br = util.createElement("BR");
                  format.appendChild(br);
                  context.element.wysiwyg.insertBefore(format, currentNode);
                  this.setRange(br, 0, br, 0);
                  return;
                }
              }
              this.setRange(range.startContainer, range.startOffset, range.endContainer, range.endOffset);
            } catch (e) {
              this.nativeFocus();
            }
          }
          event._applyTagEffects();
          if (this._isBalloon)
            event._toggleToolbarBalloon();
        },
        focusEdge: function focusEdge(focusEl) {
          if (!focusEl)
            focusEl = context.element.wysiwyg.lastElementChild;
          var fileComponentInfo = this.getFileComponent(focusEl);
          if (fileComponentInfo) {
            this.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);
          } else if (focusEl) {
            focusEl = util.getChildElement(focusEl, function(current) {
              return current.childNodes.length === 0 || current.nodeType === 3;
            }, true);
            if (!focusEl)
              this.nativeFocus();
            else
              this.setRange(focusEl, focusEl.textContent.length, focusEl, focusEl.textContent.length);
          } else {
            this.focus();
          }
        },
        blur: function blur() {
          if (options.iframe) {
            context.element.wysiwygFrame.blur();
          } else {
            context.element.wysiwyg.blur();
          }
        },
        setRange: function setRange(startCon, startOff, endCon, endOff) {
          if (!startCon || !endCon)
            return;
          if (startOff > startCon.textContent.length)
            startOff = startCon.textContent.length;
          if (endOff > endCon.textContent.length)
            endOff = endCon.textContent.length;
          if (util.isFormatElement(startCon)) {
            startCon = startCon.childNodes[startOff] || startCon;
            startOff = 0;
          }
          if (util.isFormatElement(endCon)) {
            endCon = endCon.childNodes[endOff] || endCon;
            endOff = startOff > 1 ? startOff : 0;
          }
          var range = this._wd.createRange();
          try {
            range.setStart(startCon, startOff);
            range.setEnd(endCon, endOff);
          } catch (error) {
            console.warn("[KothingEditor.core.focus.error] " + error);
            this.nativeFocus();
            return;
          }
          var selection = this.getSelection();
          if (selection.removeAllRanges) {
            selection.removeAllRanges();
          }
          selection.addRange(range);
          this._editorRange();
          if (options.iframe)
            this.nativeFocus();
          return range;
        },
        removeRange: function removeRange() {
          this._variable._range = null;
          this._variable._selectionNode = null;
          if (this.hasFocus)
            this.getSelection().removeAllRanges();
          var commandMap = this.commandMap;
          var activePlugins = this.activePlugins;
          for (var key in commandMap) {
            if (!util.hasOwn(commandMap, key))
              continue;
            if (activePlugins.indexOf(key) > -1) {
              plugins[key].active.call(this, null);
            } else if (commandMap.OUTDENT && /^OUTDENT$/i.test(key)) {
              commandMap.OUTDENT.setAttribute("disabled", true);
            } else if (commandMap.INDENT && /^INDENT$/i.test(key)) {
              commandMap.INDENT.removeAttribute("disabled");
            } else {
              util.removeClass(commandMap[key], "active");
            }
          }
        },
        getRange: function getRange() {
          var range = this._variable._range || this._createDefaultRange();
          var selection = this.getSelection();
          if (range.collapsed === selection.isCollapsed || !context.element.wysiwyg.contains(selection.focusNode))
            return range;
          if (selection.rangeCount > 0) {
            this._variable._range = selection.getRangeAt(0);
            return this._variable._range;
          } else {
            var sc = selection.anchorNode, ec = selection.focusNode, so = selection.anchorOffset, eo = selection.focusOffset;
            var compareValue = util.compareElements(sc, ec);
            var rightDir = compareValue.ancestor && (compareValue.result === 0 ? so <= eo : compareValue.result > 1 ? true : false);
            return this.setRange(rightDir ? sc : ec, rightDir ? so : eo, rightDir ? ec : sc, rightDir ? eo : so);
          }
        },
        getRange_addLine: function getRange_addLine(range, container) {
          if (this._selectionVoid(range)) {
            var wysiwyg = context.element.wysiwyg;
            var op = util.createElement(options.defaultTag);
            op.innerHTML = "<br>";
            wysiwyg.insertBefore(op, container && container !== wysiwyg ? container.nextElementSibling : wysiwyg.firstElementChild);
            this.setRange(op.firstElementChild, 0, op.firstElementChild, 1);
            range = this._variable._range;
          }
          return range;
        },
        getSelection: function getSelection() {
          return this._shadowRoot && this._shadowRoot.getSelection ? this._shadowRoot.getSelection() : this._ww.getSelection();
        },
        getSelectionNode: function getSelectionNode() {
          if (!context.element.wysiwyg.contains(this._variable._selectionNode))
            this._editorRange();
          if (!this._variable._selectionNode) {
            var selectionNode = util.getChildElement(context.element.wysiwyg.firstChild, function(current) {
              return current.childNodes.length === 0 || current.nodeType === 3;
            }, false);
            if (!selectionNode) {
              this._editorRange();
            } else {
              this._variable._selectionNode = selectionNode;
              return selectionNode;
            }
          }
          return this._variable._selectionNode;
        },
        _editorRange: function _editorRange() {
          var selection = this.getSelection();
          if (!selection)
            return null;
          var range = null;
          var selectionNode = null;
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
          } else {
            range = this._createDefaultRange();
          }
          this._variable._range = range;
          if (range.collapsed) {
            if (util.isWysiwygDiv(range.commonAncestorContainer))
              selectionNode = range.commonAncestorContainer.children[range.startOffset] || range.commonAncestorContainer;
            else
              selectionNode = range.commonAncestorContainer;
          } else {
            selectionNode = selection.extentNode || selection.anchorNode;
          }
          this._variable._selectionNode = selectionNode;
        },
        _createDefaultRange: function _createDefaultRange() {
          var wysiwyg = context.element.wysiwyg;
          wysiwyg.focus();
          var range = this._wd.createRange();
          var focusEl = wysiwyg.firstElementChild;
          if (!focusEl) {
            focusEl = util.createElement(options.defaultTag);
            focusEl.innerHTML = "<br>";
            wysiwyg.appendChild(focusEl);
          }
          range.setStart(focusEl, 0);
          range.setEnd(focusEl, 0);
          return range;
        },
        _selectionVoid: function _selectionVoid(range) {
          var comm = range.commonAncestorContainer;
          return util.isWysiwygDiv(range.startContainer) && util.isWysiwygDiv(range.endContainer) || /FIGURE/i.test(comm.nodeName) || this._fileManager.regExp.test(comm.nodeName) || util.isMediaComponent(comm);
        },
        _resetRangeToTextNode: function _resetRangeToTextNode() {
          var range = this.getRange();
          if (this._selectionVoid(range))
            return false;
          var startCon = range.startContainer;
          var startOff = range.startOffset;
          var endCon = range.endContainer;
          var endOff = range.endOffset;
          var tempCon, tempOffset, tempChild;
          if (util.isFormatElement(startCon)) {
            startCon = startCon.childNodes[startOff] || startCon.lastChild;
            startOff = startCon.textContent.length;
          }
          if (util.isFormatElement(endCon)) {
            endCon = endCon.childNodes[endOff] || endCon.lastChild;
            endOff = endCon.textContent.length;
          }
          tempCon = util.isWysiwygDiv(startCon) ? context.element.wysiwyg.firstChild : startCon;
          tempOffset = startOff;
          if (util.isBreak(tempCon) || tempCon.nodeType === 1 && tempCon.childNodes.length > 0) {
            var onlyBreak = util.isBreak(tempCon);
            if (!onlyBreak) {
              while (tempCon && !util.isBreak(tempCon) && tempCon.nodeType === 1) {
                tempCon = tempCon.childNodes[tempOffset] || tempCon.nextElementSibling || tempCon.nextSibling;
                tempOffset = 0;
              }
              var format = util.getFormatElement(tempCon, null);
              if (format === util.getRangeFormatElement(format, null)) {
                format = util.createElement(util.getParentElement(tempCon, util.isCell) ? "DIV" : options.defaultTag);
                tempCon.parentNode.insertBefore(format, tempCon);
                format.appendChild(tempCon);
              }
            }
            if (util.isBreak(tempCon)) {
              var emptyText = util.createTextNode(util.zeroWidthSpace);
              tempCon.parentNode.insertBefore(emptyText, tempCon);
              tempCon = emptyText;
              if (onlyBreak) {
                if (startCon === endCon) {
                  endCon = tempCon;
                  endOff = 1;
                }
              }
            }
          }
          startCon = tempCon;
          startOff = tempOffset;
          tempCon = util.isWysiwygDiv(endCon) ? context.element.wysiwyg.lastChild : endCon;
          tempOffset = endOff;
          if (util.isBreak(tempCon) || tempCon.nodeType === 1 && tempCon.childNodes.length > 0) {
            var _onlyBreak = util.isBreak(tempCon);
            if (!_onlyBreak) {
              while (tempCon && !util.isBreak(tempCon) && tempCon.nodeType === 1) {
                tempChild = tempCon.childNodes;
                if (tempChild.length === 0)
                  break;
                tempCon = tempChild[tempOffset > 0 ? tempOffset - 1 : tempOffset] || !/FIGURE/i.test(tempChild[0].nodeName) ? tempChild[0] : tempCon.previousElementSibling || tempCon.previousSibling || startCon;
                tempOffset = tempOffset > 0 ? tempCon.textContent.length : tempOffset;
              }
              var _format = util.getFormatElement(tempCon, null);
              if (_format === util.getRangeFormatElement(_format, null)) {
                _format = util.createElement(util.isCell(_format) ? "DIV" : options.defaultTag);
                tempCon.parentNode.insertBefore(_format, tempCon);
                _format.appendChild(tempCon);
              }
            }
            if (util.isBreak(tempCon)) {
              var _emptyText = util.createTextNode(util.zeroWidthSpace);
              tempCon.parentNode.insertBefore(_emptyText, tempCon);
              tempCon = _emptyText;
              tempOffset = 1;
              if (_onlyBreak && !tempCon.previousSibling) {
                util.removeItem(endCon);
              }
            }
          }
          endCon = tempCon;
          endOff = tempOffset;
          this.setRange(startCon, startOff, endCon, endOff);
          return true;
        },
        getSelectedElements: function getSelectedElements(validation) {
          if (!this._resetRangeToTextNode())
            return [];
          var range = this.getRange();
          if (util.isWysiwygDiv(range.startContainer)) {
            var children = context.element.wysiwyg.children;
            if (children.length === 0)
              return [];
            this.setRange(children[0], 0, children[children.length - 1], children[children.length - 1].textContent.trim().length);
            range = this.getRange();
          }
          var startCon = range.startContainer;
          var endCon = range.endContainer;
          var commonCon = range.commonAncestorContainer;
          var lineNodes = util.getListChildren(commonCon, function(current) {
            return validation ? validation(current) : util.isFormatElement(current);
          });
          if (!util.isWysiwygDiv(commonCon) && !util.isRangeFormatElement(commonCon))
            lineNodes.unshift(util.getFormatElement(commonCon, null));
          if (startCon === endCon || lineNodes.length === 1)
            return lineNodes;
          var startLine = util.getFormatElement(startCon, null);
          var endLine = util.getFormatElement(endCon, null);
          var startIdx = null;
          var endIdx = null;
          var onlyTable = function onlyTable2(current) {
            return util.isTable(current) ? /^TABLE$/i.test(current.nodeName) : true;
          };
          var startRangeEl = util.getRangeFormatElement(startLine, onlyTable);
          var endRangeEl = util.getRangeFormatElement(endLine, onlyTable);
          if (util.isTable(startRangeEl) && util.isListCell(startRangeEl.parentNode))
            startRangeEl = startRangeEl.parentNode;
          if (util.isTable(endRangeEl) && util.isListCell(endRangeEl.parentNode))
            endRangeEl = endRangeEl.parentNode;
          var sameRange = startRangeEl === endRangeEl;
          for (var i = 0, len = lineNodes.length, line; i < len; i++) {
            line = lineNodes[i];
            if (startLine === line || !sameRange && line === startRangeEl) {
              startIdx = i;
              continue;
            }
            if (endLine === line || !sameRange && line === endRangeEl) {
              endIdx = i;
              break;
            }
          }
          if (startIdx === null)
            startIdx = 0;
          if (endIdx === null)
            endIdx = lineNodes.length - 1;
          return lineNodes.slice(startIdx, endIdx + 1);
        },
        getSelectedElementsAndComponents: function getSelectedElementsAndComponents(removeDuplicate) {
          var commonCon = this.getRange().commonAncestorContainer;
          var myComponent = util.getParentElement(commonCon, util.isComponent);
          var selectedLines = util.isTable(commonCon) ? this.getSelectedElements(null) : this.getSelectedElements(function(current) {
            var component = this.getParentElement(current, this.isComponent);
            return this.isFormatElement(current) && (!component || component === myComponent) || this.isComponent(current) && !this.getFormatElement(current);
          }.bind(util));
          if (removeDuplicate) {
            for (var i = 0, len = selectedLines.length; i < len; i++) {
              for (var j = i - 1; j >= 0; j--) {
                if (selectedLines[j].contains(selectedLines[i])) {
                  selectedLines.splice(i, 1);
                  i--;
                  len--;
                  break;
                }
              }
            }
          }
          return selectedLines;
        },
        isEdgePoint: function isEdgePoint(container, offset, dir) {
          return dir !== "end" && offset === 0 || (!dir || dir !== "front") && !container.nodeValue && offset === 1 || (!dir || dir === "end") && !!container.nodeValue && offset === container.nodeValue.length;
        },
        _isEdgeFormat: function _isEdgeFormat(node, offset, dir) {
          if (!this.isEdgePoint(node, offset, dir))
            return false;
          var result = [];
          dir = dir === "front" ? "previousSibling" : "nextSibling";
          while (node && !util.isFormatElement(node) && !util.isWysiwygDiv(node)) {
            if (!node[dir] || util.isBreak(node[dir]) && !node[dir][dir]) {
              if (node.nodeType === 1)
                result.push(node.cloneNode(false));
              node = node.parentNode;
            } else {
              return null;
            }
          }
          return result;
        },
        showLoading: function showLoading() {
          context.element.loading.style.display = "block";
        },
        closeLoading: function closeLoading() {
          context.element.loading.style.display = "none";
        },
        appendFormatTag: function appendFormatTag(element, formatNode) {
          var currentFormatEl = util.getFormatElement(this.getSelectionNode(), null);
          var oFormatName = formatNode ? typeof formatNode === "string" ? formatNode : formatNode.nodeName : util.isFormatElement(currentFormatEl) && !util.isFreeFormatElement(currentFormatEl) ? currentFormatEl.nodeName : options.defaultTag;
          var oFormat = util.createElement(oFormatName);
          oFormat.innerHTML = "<br>";
          if (formatNode && typeof formatNode !== "string" || !formatNode && util.isFormatElement(currentFormatEl)) {
            util.copyTagAttributes(oFormat, formatNode || currentFormatEl);
          }
          if (util.isCell(element))
            element.insertBefore(oFormat, element.nextElementSibling);
          else
            element.parentNode.insertBefore(oFormat, element.nextElementSibling);
          return oFormat;
        },
        insertComponent: function insertComponent(element, notHistoryPush, checkCharCount, notSelect) {
          if (checkCharCount && !this.checkCharCount(element, null)) {
            return null;
          }
          var r = this.removeNode();
          this.getRange_addLine(this.getRange(), r.container);
          var oNode = null;
          var selectionNode = this.getSelectionNode();
          var formatEl = util.getFormatElement(selectionNode, null);
          if (util.isListCell(formatEl)) {
            this.insertNode(element, selectionNode === formatEl ? null : r.container.nextSibling, false);
            if (!element.nextSibling)
              element.parentNode.appendChild(util.createElement("BR"));
          } else {
            if (this.getRange().collapsed && (r.container.nodeType === 3 || util.isBreak(r.container))) {
              var depthFormat = util.getParentElement(r.container, function(current) {
                return this.isRangeFormatElement(current);
              }.bind(util));
              oNode = util.splitElement(r.container, r.offset, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);
              if (oNode)
                formatEl = oNode.previousSibling;
            }
            this.insertNode(element, formatEl, false);
            if (formatEl && util.onlyZeroWidthSpace(formatEl))
              util.removeItem(formatEl);
          }
          this.setRange(element, 0, element, 0);
          if (!notSelect) {
            var fileComponentInfo = this.getFileComponent(element);
            if (fileComponentInfo) {
              this.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);
            } else if (oNode) {
              oNode = util.getEdgeChildNodes(oNode, null).sc || oNode;
              this.setRange(oNode, 0, oNode, 0);
            }
          }
          if (!notHistoryPush)
            this.history.push(1);
          return oNode || element;
        },
        getFileComponent: function getFileComponent(element) {
          if (!this._fileManager.queryString || !element)
            return null;
          var target, pluginName;
          if (/^FIGURE$/i.test(element.nodeName) || /ke-component/.test(element.className)) {
            target = element.querySelector(this._fileManager.queryString);
          }
          if (!target && element.nodeName && this._fileManager.regExp.test(element.nodeName)) {
            target = element;
          }
          if (target) {
            pluginName = this._fileManager.pluginMap[target.nodeName.toLowerCase()];
            if (pluginName) {
              return {
                target,
                component: util.getParentElement(target, util.isComponent),
                pluginName
              };
            }
          }
          return null;
        },
        selectComponent: function selectComponent(element, pluginName) {
          if (util.isUneditableComponent(util.getParentElement(element, util.isComponent)) || util.isUneditableComponent(element))
            return false;
          if (!this.hasFocus)
            this.focus();
          var plugin = this.plugins[pluginName];
          if (!plugin)
            return;
          _w.setTimeout(function() {
            if (typeof plugin.select === "function")
              this.callPlugin(pluginName, plugin.select.bind(this, element), null);
            this._setComponentLineBreaker(element);
          }.bind(this));
        },
        _setComponentLineBreaker: function _setComponentLineBreaker(element) {
          this.lineBreaker.style.display = "none";
          var container = util.getParentElement(element, util.isComponent);
          var t_style = context.element.lineBreaker_t.style;
          var b_style = context.element.lineBreaker_b.style;
          var target = this.context.resizing.resizeContainer.style.display === "block" ? this.context.resizing.resizeContainer : element;
          var isList = util.isListCell(container.parentNode);
          var componentTop, wScroll, w;
          if (isList ? !container.previousSibling : !util.isFormatElement(container.previousElementSibling)) {
            this._variable._lineBreakComp = container;
            wScroll = context.element.wysiwyg.scrollTop;
            componentTop = util.getOffset(element, context.element.wysiwygFrame).top + wScroll;
            w = target.offsetWidth / 2 / 2;
            t_style.top = componentTop - wScroll - 12 + "px";
            t_style.left = util.getOffset(target).left + w + "px";
            t_style.display = "block";
          } else {
            t_style.display = "none";
          }
          if (isList ? !container.nextSibling : !util.isFormatElement(container.nextElementSibling)) {
            if (!componentTop) {
              this._variable._lineBreakComp = container;
              wScroll = context.element.wysiwyg.scrollTop;
              componentTop = util.getOffset(element, context.element.wysiwygFrame).top + wScroll;
              w = target.offsetWidth / 2 / 2;
            }
            b_style.top = componentTop + target.offsetHeight - wScroll - 12 + "px";
            b_style.left = util.getOffset(target).left + target.offsetWidth - w - 24 + "px";
            b_style.display = "block";
          } else {
            b_style.display = "none";
          }
        },
        insertNode: function insertNode(oNode, afterNode, checkCharCount) {
          if (checkCharCount && !this.checkCharCount(oNode, null)) {
            return null;
          }
          var freeFormat = util.getFreeFormatElement(this.getSelectionNode(), null);
          var isFormats = !freeFormat && (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode)) || util.isComponent(oNode);
          if (!afterNode && (isFormats || util.isComponent(oNode) || util.isMedia(oNode))) {
            var r = this.removeNode();
            if (r.container.nodeType === 3 || util.isBreak(r.container)) {
              var depthFormat = util.getParentElement(r.container, function(current) {
                return this.isRangeFormatElement(current) || this.isListCell(current);
              }.bind(util));
              afterNode = util.splitElement(r.container, r.offset, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);
              if (afterNode)
                afterNode = afterNode.previousSibling;
            }
          }
          var range = !afterNode && !isFormats ? this.getRange_addLine(this.getRange(), null) : this.getRange();
          var commonCon = range.commonAncestorContainer;
          var startOff = range.startOffset;
          var endOff = range.endOffset;
          var formatRange = range.startContainer === commonCon && util.isFormatElement(commonCon);
          var startCon = formatRange ? commonCon.childNodes[startOff] || commonCon.childNodes[0] : range.startContainer;
          var endCon = formatRange ? commonCon.childNodes[endOff] || commonCon.childNodes[commonCon.childNodes.length - 1] : range.endContainer;
          var parentNode, originAfter = null;
          if (!afterNode) {
            parentNode = startCon;
            if (startCon.nodeType === 3) {
              parentNode = startCon.parentNode;
            }
            if (range.collapsed) {
              if (commonCon.nodeType === 3) {
                if (commonCon.textContent.length > endOff)
                  afterNode = commonCon.splitText(endOff);
                else
                  afterNode = commonCon.nextSibling;
              } else {
                if (!util.isBreak(parentNode)) {
                  var c = parentNode.childNodes[startOff];
                  var focusNode = c && c.nodeType === 3 && util.onlyZeroWidthSpace(c) && util.isBreak(c.nextSibling) ? c.nextSibling : c;
                  if (focusNode) {
                    if (!focusNode.nextSibling) {
                      parentNode.removeChild(focusNode);
                      afterNode = null;
                    } else {
                      afterNode = util.isBreak(focusNode) && !util.isBreak(oNode) ? focusNode : focusNode.nextSibling;
                    }
                  } else {
                    afterNode = null;
                  }
                } else {
                  afterNode = parentNode;
                  parentNode = parentNode.parentNode;
                }
              }
            } else {
              var isSameContainer = startCon === endCon;
              if (isSameContainer) {
                if (this.isEdgePoint(endCon, endOff))
                  afterNode = endCon.nextSibling;
                else
                  afterNode = endCon.splitText(endOff);
                var removeNode = startCon;
                if (!this.isEdgePoint(startCon, startOff))
                  removeNode = startCon.splitText(startOff);
                parentNode.removeChild(removeNode);
                if (parentNode.childNodes.length === 0 && isFormats) {
                  parentNode.innerHTML = "<br>";
                }
              } else {
                var removedTag = this.removeNode();
                var container = removedTag.container;
                var prevContainer = removedTag.prevContainer;
                if (container && container.childNodes.length === 0 && isFormats) {
                  if (util.isFormatElement(container)) {
                    container.innerHTML = "<br>";
                  } else if (util.isRangeFormatElement(container)) {
                    container.innerHTML = "<" + options.defaultTag + "><br></" + options.defaultTag + ">";
                  }
                }
                if (!isFormats && prevContainer) {
                  parentNode = prevContainer.nodeType === 3 ? prevContainer.parentNode : prevContainer;
                  if (parentNode.contains(container)) {
                    var sameParent = true;
                    afterNode = container;
                    while (afterNode.parentNode !== parentNode) {
                      afterNode = afterNode.parentNode;
                      sameParent = false;
                    }
                    if (sameParent && container === prevContainer)
                      afterNode = afterNode.nextSibling;
                  } else {
                    afterNode = null;
                  }
                } else {
                  afterNode = isFormats ? endCon : container === prevContainer ? container.nextSibling : container;
                  parentNode = !afterNode || !afterNode.parentNode ? commonCon : afterNode.parentNode;
                }
                while (afterNode && !util.isFormatElement(afterNode) && afterNode.parentNode !== commonCon) {
                  afterNode = afterNode.parentNode;
                }
              }
            }
          } else {
            parentNode = afterNode.parentNode;
            afterNode = afterNode.nextSibling;
            originAfter = true;
          }
          try {
            if (util.isWysiwygDiv(afterNode) || parentNode === context.element.wysiwyg.parentNode) {
              parentNode = context.element.wysiwyg;
              afterNode = null;
            }
            if (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode) || !util.isListCell(parentNode) && util.isComponent(oNode)) {
              var oldParent = parentNode;
              if (util.isList(afterNode)) {
                parentNode = afterNode;
                afterNode = null;
              } else if (util.isListCell(afterNode)) {
                parentNode = afterNode.previousElementSibling || afterNode;
              } else if (!originAfter && !afterNode) {
                var _r = this.removeNode();
                var _container = _r.container.nodeType === 3 ? util.isListCell(util.getFormatElement(_r.container, null)) ? _r.container : util.getFormatElement(_r.container, null) || _r.container.parentNode : _r.container;
                var rangeCon = util.isWysiwygDiv(_container) || util.isRangeFormatElement(_container);
                parentNode = rangeCon ? _container : _container.parentNode;
                afterNode = rangeCon ? null : _container.nextSibling;
              }
              if (oldParent.childNodes.length === 0 && parentNode !== oldParent)
                util.removeItem(oldParent);
            }
            if (isFormats && !freeFormat && !util.isRangeFormatElement(parentNode) && !util.isListCell(parentNode) && !util.isWysiwygDiv(parentNode)) {
              afterNode = parentNode.nextElementSibling;
              parentNode = parentNode.parentNode;
            }
            if (util.isWysiwygDiv(parentNode) && (oNode.nodeType === 3 || util.isBreak(oNode))) {
              var fNode = util.createElement(options.defaultTag);
              fNode.appendChild(oNode);
              oNode = fNode;
            }
            parentNode.insertBefore(oNode, parentNode === afterNode ? parentNode.lastChild : afterNode);
          } catch (e) {
            parentNode.appendChild(oNode);
          } finally {
            if ((util.isFormatElement(oNode) || util.isComponent(oNode)) && startCon === endCon) {
              var cItem = util.getFormatElement(commonCon, null);
              if (cItem && cItem.nodeType === 1 && util.isEmptyLine(cItem)) {
                util.removeItem(cItem);
              }
            }
            if (freeFormat && (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode))) {
              oNode = this._setIntoFreeFormat(oNode);
            }
            if (!util.isComponent(oNode)) {
              var offset = 1;
              if (oNode.nodeType === 3) {
                var previous = oNode.previousSibling;
                var next = oNode.nextSibling;
                var previousText = !previous || previous.nodeType === 1 || util.onlyZeroWidthSpace(previous) ? "" : previous.textContent;
                var nextText = !next || next.nodeType === 1 || util.onlyZeroWidthSpace(next) ? "" : next.textContent;
                if (previous && previousText.length > 0) {
                  oNode.textContent = previousText + oNode.textContent;
                  util.removeItem(previous);
                }
                if (next && next.length > 0) {
                  oNode.textContent += nextText;
                  util.removeItem(next);
                }
                var newRange = {
                  container: oNode,
                  startOffset: previousText.length,
                  endOffset: oNode.textContent.length - nextText.length
                };
                this.setRange(oNode, newRange.startOffset, oNode, newRange.endOffset);
                return newRange;
              } else if (!util.isBreak(oNode) && util.isFormatElement(parentNode)) {
                var zeroWidth = null;
                if (!oNode.previousSibling || util.isBreak(oNode.previousSibling)) {
                  zeroWidth = util.createTextNode(util.zeroWidthSpace);
                  oNode.parentNode.insertBefore(zeroWidth, oNode);
                }
                if (!oNode.nextSibling || util.isBreak(oNode.nextSibling)) {
                  zeroWidth = util.createTextNode(util.zeroWidthSpace);
                  oNode.parentNode.insertBefore(zeroWidth, oNode.nextSibling);
                }
                if (util._isIgnoreNodeChange(oNode)) {
                  oNode = oNode.nextSibling;
                  offset = 0;
                }
              }
              this.setRange(oNode, offset, oNode, offset);
            }
            this.history.push(true);
            return oNode;
          }
        },
        _setIntoFreeFormat: function _setIntoFreeFormat(oNode) {
          var parentNode = oNode.parentNode;
          var oNodeChildren, lastONode;
          while (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode)) {
            oNodeChildren = oNode.childNodes;
            lastONode = null;
            while (oNodeChildren[0]) {
              lastONode = oNodeChildren[0];
              if (util.isFormatElement(lastONode) || util.isRangeFormatElement(lastONode)) {
                this._setIntoFreeFormat(lastONode);
                if (!oNode.parentNode)
                  break;
                oNodeChildren = oNode.childNodes;
                continue;
              }
              parentNode.insertBefore(lastONode, oNode);
            }
            if (oNode.childNodes.length === 0)
              util.removeItem(oNode);
            oNode = util.createElement("BR");
            parentNode.insertBefore(oNode, lastONode.nextSibling);
          }
          return oNode;
        },
        removeNode: function removeNode() {
          this._resetRangeToTextNode();
          var range = this.getRange();
          var container, offset = 0;
          var startCon = range.startContainer;
          var endCon = range.endContainer;
          var startOff = range.startOffset;
          var endOff = range.endOffset;
          var commonCon = range.commonAncestorContainer.nodeType === 3 && range.commonAncestorContainer.parentNode === startCon.parentNode ? startCon.parentNode : range.commonAncestorContainer;
          if (commonCon === startCon && commonCon === endCon) {
            startCon = commonCon.children[startOff];
            endCon = commonCon.children[endOff];
            startOff = endOff = 0;
          }
          var beforeNode = null;
          var afterNode = null;
          var childNodes = util.getListChildNodes(commonCon, null);
          var startIndex = util.getArrayIndex(childNodes, startCon);
          var endIndex = util.getArrayIndex(childNodes, endCon);
          if (childNodes.length > 0 && startIndex > -1 && endIndex > -1) {
            for (var i = startIndex + 1, startNode = startCon; i >= 0; i--) {
              if (childNodes[i] === startNode.parentNode && childNodes[i].firstChild === startNode && startOff === 0) {
                startIndex = i;
                startNode = startNode.parentNode;
              }
            }
            for (var _i2 = endIndex - 1, endNode = endCon; _i2 > startIndex; _i2--) {
              if (childNodes[_i2] === endNode.parentNode && childNodes[_i2].nodeType === 1) {
                childNodes.splice(_i2, 1);
                endNode = endNode.parentNode;
                --endIndex;
              }
            }
          } else {
            if (childNodes.length === 0) {
              if (util.isFormatElement(commonCon) || util.isRangeFormatElement(commonCon) || util.isWysiwygDiv(commonCon) || util.isBreak(commonCon) || util.isMedia(commonCon)) {
                return {
                  container: commonCon,
                  offset: 0
                };
              } else if (commonCon.nodeType === 3) {
                return {
                  container: commonCon,
                  offset: endOff
                };
              }
              childNodes.push(commonCon);
              startCon = endCon = commonCon;
            } else {
              startCon = endCon = childNodes[0];
              if (util.isBreak(startCon) || util.onlyZeroWidthSpace(startCon)) {
                return {
                  container: util.isMedia(commonCon) ? commonCon : startCon,
                  offset: 0
                };
              }
            }
            startIndex = endIndex = 0;
          }
          function remove(item2) {
            var format = util.getFormatElement(item2, null);
            util.removeItem(item2);
            if (util.isListCell(format)) {
              var list = util.getArrayItem(format.children, util.isList, false);
              if (list) {
                var child = list.firstElementChild;
                var children = child.childNodes;
                while (children[0]) {
                  format.insertBefore(children[0], list);
                }
                util.removeItemAllParents(child, null, null);
              }
            }
          }
          for (var _i3 = startIndex; _i3 <= endIndex; _i3++) {
            var item = childNodes[_i3];
            if (item.length === 0 || item.nodeType === 3 && item.data === void 0) {
              remove(item);
              continue;
            }
            if (item === startCon) {
              if (startCon.nodeType === 1) {
                if (util.isComponent(startCon))
                  continue;
                else
                  beforeNode = util.createTextNode(startCon.textContent);
              } else {
                if (item === endCon) {
                  beforeNode = util.createTextNode(startCon.substringData(0, startOff) + endCon.substringData(endOff, endCon.length - endOff));
                  offset = startOff;
                } else {
                  beforeNode = util.createTextNode(startCon.substringData(0, startOff));
                }
              }
              if (beforeNode.length > 0) {
                startCon.data = beforeNode.data;
              } else {
                remove(startCon);
              }
              if (item === endCon)
                break;
              continue;
            }
            if (item === endCon) {
              if (endCon.nodeType === 1) {
                if (util.isComponent(endCon))
                  continue;
                else
                  afterNode = util.createTextNode(endCon.textContent);
              } else {
                afterNode = util.createTextNode(endCon.substringData(endOff, endCon.length - endOff));
              }
              if (afterNode.length > 0) {
                endCon.data = afterNode.data;
              } else {
                remove(endCon);
              }
              continue;
            }
            remove(item);
          }
          container = endCon && endCon.parentNode ? endCon : startCon && startCon.parentNode ? startCon : range.endContainer || range.startContainer;
          if (!util.isWysiwygDiv(container) && container.childNodes.length === 0) {
            var rc = util.removeItemAllParents(container, function(current) {
              if (this.isComponent(current))
                return false;
              var text = current.textContent;
              return text.length === 0 || /^(\n|\u200B)+$/.test(text);
            }.bind(util), null);
            if (rc)
              container = rc.sc || rc.ec || context.element.wysiwyg;
          }
          this.setRange(container, offset, container, offset);
          this.history.push(true);
          return {
            container,
            offset,
            prevContainer: startCon && startCon.parentNode ? startCon : null
          };
        },
        applyRangeFormatElement: function applyRangeFormatElement(rangeElement) {
          this.getRange_addLine(this.getRange(), null);
          var rangeLines = this.getSelectedElementsAndComponents(false);
          if (!rangeLines || rangeLines.length === 0)
            return;
          linesLoop:
            for (var i = 0, len = rangeLines.length, line, nested, fEl, lEl, f, l; i < len; i++) {
              line = rangeLines[i];
              if (!util.isListCell(line))
                continue;
              nested = line.lastElementChild;
              if (nested && util.isListCell(line.nextElementSibling) && rangeLines.indexOf(line.nextElementSibling) > -1) {
                lEl = nested.lastElementChild;
                if (rangeLines.indexOf(lEl) > -1) {
                  var list = null;
                  while (list = lEl.lastElementChild) {
                    if (util.isList(list)) {
                      if (rangeLines.indexOf(list.lastElementChild) > -1) {
                        lEl = list.lastElementChild;
                      } else {
                        continue linesLoop;
                      }
                    }
                  }
                  fEl = nested.firstElementChild;
                  f = rangeLines.indexOf(fEl);
                  l = rangeLines.indexOf(lEl);
                  rangeLines.splice(f, l - f + 1);
                  len = rangeLines.length;
                  continue;
                }
              }
            }
          var last = rangeLines[rangeLines.length - 1];
          var standTag, beforeTag, pElement;
          if (util.isRangeFormatElement(last) || util.isFormatElement(last)) {
            standTag = last;
          } else {
            standTag = util.getRangeFormatElement(last, null) || util.getFormatElement(last, null);
          }
          if (util.isCell(standTag)) {
            beforeTag = null;
            pElement = standTag;
          } else {
            beforeTag = standTag.nextSibling;
            pElement = standTag.parentNode;
          }
          var parentDepth = util.getElementDepth(standTag);
          var listParent = null;
          var lineArr = [];
          var removeItems = function removeItems2(parent, origin, before2) {
            var cc = null;
            if (parent !== origin && !util.isTable(origin)) {
              if (origin && util.getElementDepth(parent) === util.getElementDepth(origin))
                return before2;
              cc = util.removeItemAllParents(origin, null, parent);
            }
            return cc ? cc.ec : before2;
          };
          for (var _i4 = 0, _len = rangeLines.length, _line, originParent, depth, before, nextLine, nextList, _nested; _i4 < _len; _i4++) {
            _line = rangeLines[_i4];
            originParent = _line.parentNode;
            if (!originParent || rangeElement.contains(originParent))
              continue;
            depth = util.getElementDepth(_line);
            if (util.isList(originParent)) {
              if (listParent === null) {
                if (nextList) {
                  listParent = nextList;
                  _nested = true;
                  nextList = null;
                } else {
                  listParent = originParent.cloneNode(false);
                }
              }
              lineArr.push(_line);
              nextLine = rangeLines[_i4 + 1];
              if (_i4 === _len - 1 || nextLine && nextLine.parentNode !== originParent) {
                if (nextLine && _line.contains(nextLine.parentNode)) {
                  nextList = nextLine.parentNode.cloneNode(false);
                }
                var _list = originParent.parentNode, p = void 0;
                while (util.isList(_list)) {
                  p = util.createElement(_list.nodeName);
                  p.appendChild(listParent);
                  listParent = p;
                  _list = _list.parentNode;
                }
                var _edge = this.detachRangeFormatElement(originParent, lineArr, null, true, true);
                if (parentDepth >= depth) {
                  parentDepth = depth;
                  pElement = _edge.cc;
                  beforeTag = removeItems(pElement, originParent, _edge.ec);
                  if (beforeTag)
                    pElement = beforeTag.parentNode;
                } else if (pElement === _edge.cc) {
                  beforeTag = _edge.ec;
                }
                if (pElement !== _edge.cc) {
                  before = removeItems(pElement, _edge.cc, before);
                  if (before !== void 0)
                    beforeTag = before;
                  else
                    beforeTag = _edge.cc;
                }
                for (var c = 0, cLen = _edge.removeArray.length; c < cLen; c++) {
                  listParent.appendChild(_edge.removeArray[c]);
                }
                if (!_nested)
                  rangeElement.appendChild(listParent);
                if (nextList)
                  _edge.removeArray[_edge.removeArray.length - 1].appendChild(nextList);
                listParent = null;
                _nested = false;
              }
            } else {
              if (parentDepth >= depth) {
                parentDepth = depth;
                pElement = originParent;
                beforeTag = _line.nextSibling;
              }
              rangeElement.appendChild(_line);
              if (pElement !== originParent) {
                before = removeItems(pElement, originParent);
                if (before !== void 0)
                  beforeTag = before;
              }
            }
          }
          this.effectNode = null;
          util.mergeSameTags(rangeElement, null, false);
          util.mergeNestedTags(rangeElement, function(current) {
            return this.isList(current);
          }.bind(util));
          if (beforeTag && util.getElementDepth(beforeTag) > 0 && (util.isList(beforeTag.parentNode) || util.isList(beforeTag.parentNode.parentNode))) {
            var depthFormat = util.getParentElement(beforeTag, function(current) {
              return this.isRangeFormatElement(current) && !this.isList(current);
            }.bind(util));
            var splitRange = util.splitElement(beforeTag, null, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);
            splitRange.parentNode.insertBefore(rangeElement, splitRange);
          } else {
            pElement.insertBefore(rangeElement, beforeTag);
            removeItems(rangeElement, beforeTag);
          }
          var edge = util.getEdgeChildNodes(rangeElement.firstElementChild, rangeElement.lastElementChild);
          if (rangeLines.length > 1) {
            this.setRange(edge.sc, 0, edge.ec, edge.ec.textContent.length);
          } else {
            this.setRange(edge.ec, edge.ec.textContent.length, edge.ec, edge.ec.textContent.length);
          }
          this.history.push(false);
        },
        detachRangeFormatElement: function detachRangeFormatElement(rangeElement, selectedFormats, newRangeElement, remove, notHistoryPush) {
          var range = this.getRange();
          var so = range.startOffset;
          var eo = range.endOffset;
          var children = util.getListChildNodes(rangeElement, function(current) {
            return current.parentNode === rangeElement;
          });
          var parent = rangeElement.parentNode;
          var firstNode = null;
          var lastNode = null;
          var rangeEl = rangeElement.cloneNode(false);
          var removeArray = [];
          var newList = util.isList(newRangeElement);
          var insertedNew = false;
          var reset = false;
          var moveComplete = false;
          function appendNode(parent2, insNode2, sibling, originNode) {
            if (util.onlyZeroWidthSpace(insNode2))
              insNode2.innerHTML = util.zeroWidthSpace;
            if (insNode2.nodeType === 3) {
              parent2.insertBefore(insNode2, sibling);
              return insNode2;
            }
            var insChildren = (moveComplete ? insNode2 : originNode).childNodes;
            var format = insNode2.cloneNode(false);
            var first = null;
            var c = null;
            while (insChildren[0]) {
              c = insChildren[0];
              if (util._notTextNode(c) && !util.isBreak(c) && !util.isListCell(format)) {
                if (format.childNodes.length > 0) {
                  if (!first)
                    first = format;
                  parent2.insertBefore(format, sibling);
                  format = insNode2.cloneNode(false);
                }
                parent2.insertBefore(c, sibling);
                if (!first)
                  first = c;
              } else {
                format.appendChild(c);
              }
            }
            if (format.childNodes.length > 0) {
              if (util.isListCell(parent2) && util.isListCell(format) && util.isList(sibling)) {
                if (newList) {
                  first = sibling;
                  while (sibling) {
                    format.appendChild(sibling);
                    sibling = sibling.nextSibling;
                  }
                  parent2.parentNode.insertBefore(format, parent2.nextElementSibling);
                } else {
                  var originNext = originNode.nextElementSibling;
                  var detachRange2 = util.detachNestedList(originNode, false);
                  if (rangeElement !== detachRange2 || originNext !== originNode.nextElementSibling) {
                    var fChildren = format.childNodes;
                    while (fChildren[0]) {
                      originNode.appendChild(fChildren[0]);
                    }
                    rangeElement = detachRange2;
                    reset = true;
                  }
                }
              } else {
                parent2.insertBefore(format, sibling);
              }
              if (!first)
                first = format;
            }
            return first;
          }
          for (var i = 0, len = children.length, insNode, lineIndex, next; i < len; i++) {
            insNode = children[i];
            if (insNode.nodeType === 3 && util.isList(rangeEl))
              continue;
            moveComplete = false;
            if (remove && i === 0) {
              if (!selectedFormats || selectedFormats.length === len || selectedFormats[0] === insNode) {
                firstNode = rangeElement.previousSibling;
              } else {
                firstNode = rangeEl;
              }
            }
            if (selectedFormats)
              lineIndex = selectedFormats.indexOf(insNode);
            if (selectedFormats && lineIndex === -1) {
              if (!rangeEl)
                rangeEl = rangeElement.cloneNode(false);
              rangeEl.appendChild(insNode);
            } else {
              if (selectedFormats)
                next = selectedFormats[lineIndex + 1];
              if (rangeEl && rangeEl.children.length > 0) {
                parent.insertBefore(rangeEl, rangeElement);
                rangeEl = null;
              }
              if (!newList && util.isListCell(insNode)) {
                if (next && util.getElementDepth(insNode) !== util.getElementDepth(next) && (util.isListCell(parent) || util.getArrayItem(insNode.children, util.isList, false))) {
                  var insNext = insNode.nextElementSibling;
                  var detachRange = util.detachNestedList(insNode, false);
                  if (rangeElement !== detachRange || insNext !== insNode.nextElementSibling) {
                    rangeElement = detachRange;
                    reset = true;
                  }
                } else {
                  var inner = insNode;
                  insNode = util.createElement(remove ? inner.nodeName : util.isList(rangeElement.parentNode) || util.isListCell(rangeElement.parentNode) ? "LI" : util.isCell(rangeElement.parentNode) ? "DIV" : options.defaultTag);
                  var isCell = util.isListCell(insNode);
                  var innerChildren = inner.childNodes;
                  while (innerChildren[0]) {
                    if (util.isList(innerChildren[0]) && !isCell)
                      break;
                    insNode.appendChild(innerChildren[0]);
                  }
                  util.copyFormatAttributes(insNode, inner);
                  moveComplete = true;
                }
              } else {
                insNode = insNode.cloneNode(false);
              }
              if (!reset) {
                if (!remove) {
                  if (newRangeElement) {
                    if (!insertedNew) {
                      parent.insertBefore(newRangeElement, rangeElement);
                      insertedNew = true;
                    }
                    insNode = appendNode(newRangeElement, insNode, null, children[i]);
                  } else {
                    insNode = appendNode(parent, insNode, rangeElement, children[i]);
                  }
                  if (!reset) {
                    if (selectedFormats) {
                      lastNode = insNode;
                      if (!firstNode) {
                        firstNode = insNode;
                      }
                    } else if (!firstNode) {
                      firstNode = lastNode = insNode;
                    }
                  }
                } else {
                  removeArray.push(insNode);
                  util.removeItem(children[i]);
                }
                if (reset) {
                  reset = moveComplete = false;
                  children = util.getListChildNodes(rangeElement, function(current) {
                    return current.parentNode === rangeElement;
                  });
                  rangeEl = rangeElement.cloneNode(false);
                  parent = rangeElement.parentNode;
                  i = -1;
                  len = children.length;
                  continue;
                }
              }
            }
          }
          var rangeParent = rangeElement.parentNode;
          var rangeRight = rangeElement.nextSibling;
          if (rangeEl && rangeEl.children.length > 0) {
            rangeParent.insertBefore(rangeEl, rangeRight);
          }
          if (newRangeElement)
            firstNode = newRangeElement.previousSibling;
          else if (!firstNode)
            firstNode = rangeElement.previousSibling;
          rangeRight = rangeElement.nextSibling;
          if (rangeElement.children.length === 0 || rangeElement.textContent.length === 0) {
            util.removeItem(rangeElement);
          } else {
            util.removeEmptyNode(rangeElement, null);
          }
          var edge = null;
          if (remove) {
            edge = {
              cc: rangeParent,
              sc: firstNode,
              ec: rangeRight,
              removeArray
            };
          } else {
            if (!firstNode)
              firstNode = lastNode;
            if (!lastNode)
              lastNode = firstNode;
            var childEdge = util.getEdgeChildNodes(firstNode, lastNode.parentNode ? firstNode : lastNode);
            edge = {
              cc: (childEdge.sc || childEdge.ec).parentNode,
              sc: childEdge.sc,
              ec: childEdge.ec
            };
          }
          this.effectNode = null;
          if (notHistoryPush)
            return edge;
          if (!remove && edge) {
            if (!selectedFormats) {
              this.setRange(edge.sc, 0, edge.sc, 0);
            } else {
              this.setRange(edge.sc, so, edge.ec, eo);
            }
          }
          this.history.push(false);
        },
        detachList: function detachList(selectedFormats, remove) {
          var rangeArr = {};
          var listFirst = false;
          var listLast = false;
          var first = null;
          var last = null;
          var passComponent = function(current) {
            return !this.isComponent(current);
          }.bind(util);
          for (var i = 0, len = selectedFormats.length, r, o, lastIndex, isList; i < len; i++) {
            lastIndex = i === len - 1;
            o = util.getRangeFormatElement(selectedFormats[i], passComponent);
            isList = util.isList(o);
            if (!r && isList) {
              r = o;
              rangeArr = {
                r,
                f: [util.getParentElement(selectedFormats[i], "LI")]
              };
              if (i === 0)
                listFirst = true;
            } else if (r && isList) {
              if (r !== o) {
                var edge = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, null, remove, true);
                o = selectedFormats[i].parentNode;
                if (listFirst) {
                  first = edge.sc;
                  listFirst = false;
                }
                if (lastIndex)
                  last = edge.ec;
                if (isList) {
                  r = o;
                  rangeArr = {
                    r,
                    f: [util.getParentElement(selectedFormats[i], "LI")]
                  };
                  if (lastIndex)
                    listLast = true;
                } else {
                  r = null;
                }
              } else {
                rangeArr.f.push(util.getParentElement(selectedFormats[i], "LI"));
                if (lastIndex)
                  listLast = true;
              }
            }
            if (lastIndex && util.isList(r)) {
              var _edge2 = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, null, remove, true);
              if (listLast || len === 1)
                last = _edge2.ec;
              if (listFirst)
                first = _edge2.sc || last;
            }
          }
          return {
            sc: first,
            ec: last
          };
        },
        nodeChange: function nodeChange(appendNode, styleArray, removeNodeArray, strictRemove) {
          this._resetRangeToTextNode();
          var range = this.getRange_addLine(this.getRange(), null);
          styleArray = styleArray && styleArray.length > 0 ? styleArray : false;
          removeNodeArray = removeNodeArray && removeNodeArray.length > 0 ? removeNodeArray : false;
          var isRemoveNode = !appendNode;
          var isRemoveFormat = isRemoveNode && !removeNodeArray && !styleArray;
          var startCon = range.startContainer;
          var startOff = range.startOffset;
          var endCon = range.endContainer;
          var endOff = range.endOffset;
          if (isRemoveFormat && range.collapsed && util.isFormatElement(startCon.parentNode) && util.isFormatElement(endCon.parentNode) || startCon === endCon && startCon.nodeType === 1 && util.isNonEditable(startCon)) {
            return;
          }
          if (range.collapsed && !isRemoveFormat) {
            if (startCon.nodeType === 1 && !util.isBreak(startCon) && !util.isComponent(startCon)) {
              var afterNode = null;
              var focusNode = startCon.childNodes[startOff];
              if (focusNode) {
                if (!focusNode.nextSibling) {
                  afterNode = null;
                } else {
                  afterNode = util.isBreak(focusNode) ? focusNode : focusNode.nextSibling;
                }
              }
              var zeroWidth = util.createTextNode(util.zeroWidthSpace);
              startCon.insertBefore(zeroWidth, afterNode);
              this.setRange(zeroWidth, 1, zeroWidth, 1);
              range = this.getRange();
              startCon = range.startContainer;
              startOff = range.startOffset;
              endCon = range.endContainer;
              endOff = range.endOffset;
            }
          }
          if (util.isFormatElement(startCon)) {
            startCon = startCon.childNodes[startOff] || startCon.firstChild;
            startOff = 0;
          }
          if (util.isFormatElement(endCon)) {
            endCon = endCon.childNodes[endOff] || endCon.lastChild;
            endOff = endCon.textContent.length;
          }
          if (isRemoveNode) {
            appendNode = util.createElement("DIV");
          }
          var wRegExp = _w.RegExp;
          var newNodeName = appendNode.nodeName;
          if (!isRemoveFormat && startCon === endCon && !removeNodeArray && appendNode) {
            var sNode = startCon;
            var checkCnt = 0;
            var checkAttrs = [];
            var checkStyles = appendNode.style;
            for (var i = 0, len = checkStyles.length; i < len; i++) {
              checkAttrs.push(checkStyles[i]);
            }
            var ckeckClasses = appendNode.classList;
            for (var _i5 = 0, _len2 = ckeckClasses.length; _i5 < _len2; _i5++) {
              checkAttrs.push("." + ckeckClasses[_i5]);
            }
            if (checkAttrs.length > 0) {
              while (!util.isFormatElement(sNode) && !util.isWysiwygDiv(sNode)) {
                for (var _i6 = 0; _i6 < checkAttrs.length; _i6++) {
                  if (sNode.nodeType === 1) {
                    var s = checkAttrs[_i6];
                    var classReg = /^\./.test(s) ? new wRegExp("\\s*" + s.replace(/^\./, "") + "(\\s+|$)", "ig") : false;
                    var styleCheck = isRemoveNode ? !!sNode.style[s] : !!sNode.style[s] && !!appendNode.style[s] && sNode.style[s] === appendNode.style[s];
                    var classCheck = classReg === false ? false : isRemoveNode ? !!sNode.className.match(classReg) : !!sNode.className.match(classReg) && !!appendNode.className.match(classReg);
                    if (styleCheck || classCheck) {
                      checkCnt++;
                    }
                  }
                }
                sNode = sNode.parentNode;
              }
              if (checkCnt >= checkAttrs.length)
                return;
            }
          }
          var start = {}, end = {};
          var newNode, styleRegExp = "", classRegExp = "", removeNodeRegExp = "";
          if (styleArray) {
            for (var _i7 = 0, _len3 = styleArray.length, _s; _i7 < _len3; _i7++) {
              _s = styleArray[_i7];
              if (/^\./.test(_s)) {
                classRegExp += (classRegExp ? "|" : "\\s*(?:") + _s.replace(/^\./, "");
              } else {
                styleRegExp += (styleRegExp ? "|" : "(?:;|^|\\s)(?:") + _s;
              }
            }
            if (styleRegExp) {
              styleRegExp += ")\\s*:[^;]*\\s*(?:;|$)";
              styleRegExp = new wRegExp(styleRegExp, "ig");
            }
            if (classRegExp) {
              classRegExp += ")(?=\\s+|$)";
              classRegExp = new wRegExp(classRegExp, "ig");
            }
          }
          if (removeNodeArray) {
            removeNodeRegExp = "^(?:" + removeNodeArray[0];
            for (var _i8 = 1; _i8 < removeNodeArray.length; _i8++) {
              removeNodeRegExp += "|" + removeNodeArray[_i8];
            }
            removeNodeRegExp += ")$";
            removeNodeRegExp = new wRegExp(removeNodeRegExp, "i");
          }
          var wBoolean = _w.Boolean;
          var _removeCheck = {
            v: false
          };
          var validation = function validation2(checkNode) {
            var vNode = checkNode.cloneNode(false);
            if (vNode.nodeType === 3 || util.isBreak(vNode))
              return vNode;
            if (isRemoveFormat)
              return null;
            var tagRemove = !removeNodeRegExp && isRemoveNode || removeNodeRegExp && removeNodeRegExp.test(vNode.nodeName);
            if (tagRemove && !strictRemove) {
              _removeCheck.v = true;
              return null;
            }
            var originStyle = vNode.style.cssText;
            var style = "";
            if (styleRegExp && originStyle.length > 0) {
              style = originStyle.replace(styleRegExp, "").trim();
              if (style !== originStyle)
                _removeCheck.v = true;
            }
            var originClasses = vNode.className;
            var classes = "";
            if (classRegExp && originClasses.length > 0) {
              classes = originClasses.replace(classRegExp, "").trim();
              if (classes !== originClasses)
                _removeCheck.v = true;
            }
            if (isRemoveNode) {
              if ((classRegExp || !originClasses) && (styleRegExp || !originStyle) && !style && !classes && tagRemove) {
                _removeCheck.v = true;
                return null;
              }
            }
            if (style || classes || vNode.nodeName !== newNodeName || wBoolean(styleRegExp) !== wBoolean(originStyle) || wBoolean(classRegExp) !== wBoolean(originClasses)) {
              if (styleRegExp && originStyle.length > 0)
                vNode.style.cssText = style;
              if (!vNode.style.cssText) {
                vNode.removeAttribute("style");
              }
              if (classRegExp && originClasses.length > 0)
                vNode.className = classes.trim();
              if (!vNode.className.trim()) {
                vNode.removeAttribute("class");
              }
              if (!vNode.style.cssText && !vNode.className && (vNode.nodeName === newNodeName || tagRemove)) {
                _removeCheck.v = true;
                return null;
              }
              return vNode;
            }
            _removeCheck.v = true;
            return null;
          };
          var lineNodes = this.getSelectedElements(null);
          range = this.getRange();
          startCon = range.startContainer;
          startOff = range.startOffset;
          endCon = range.endContainer;
          endOff = range.endOffset;
          if (!util.getFormatElement(startCon, null)) {
            startCon = util.getChildElement(lineNodes[0], function(current) {
              return current.nodeType === 3;
            }, false);
            startOff = 0;
          }
          if (!util.getFormatElement(endCon, null)) {
            endCon = util.getChildElement(lineNodes[lineNodes.length - 1], function(current) {
              return current.nodeType === 3;
            }, false);
            endOff = endCon.textContent.length;
          }
          var oneLine = util.getFormatElement(startCon, null) === util.getFormatElement(endCon, null);
          var endLength = lineNodes.length - (oneLine ? 0 : 1);
          newNode = appendNode.cloneNode(false);
          var isRemoveAnchor = isRemoveFormat || isRemoveNode && function(arr) {
            for (var n = 0, _len4 = arr.length; n < _len4; n++) {
              if (util._isMaintainedNode(arr[n]) || util._isSizeNode(arr[n]))
                return true;
            }
            return false;
          }(removeNodeArray);
          var isSizeNode = isRemoveNode || util._isSizeNode(newNode);
          var _getMaintainedNode = this._util_getMaintainedNode.bind(util, isRemoveAnchor, isSizeNode);
          var _isMaintainedNode = this._util_isMaintainedNode.bind(util, isRemoveAnchor, isSizeNode);
          if (oneLine) {
            var newRange = this._nodeChange_oneLine(lineNodes[0], newNode, validation, startCon, startOff, endCon, endOff, isRemoveFormat, isRemoveNode, range.collapsed, _removeCheck, _getMaintainedNode, _isMaintainedNode);
            start.container = newRange.startContainer;
            start.offset = newRange.startOffset;
            end.container = newRange.endContainer;
            end.offset = newRange.endOffset;
            if (start.container === end.container && util.onlyZeroWidthSpace(start.container)) {
              start.offset = end.offset = 1;
            }
            this._setCommonListStyle(newRange.ancestor, null);
          } else {
            if (endLength > 0) {
              newNode = appendNode.cloneNode(false);
              end = this._nodeChange_endLine(lineNodes[endLength], newNode, validation, endCon, endOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode);
            }
            for (var _i9 = endLength - 1, _newRange; _i9 > 0; _i9--) {
              newNode = appendNode.cloneNode(false);
              _newRange = this._nodeChange_middleLine(lineNodes[_i9], newNode, validation, isRemoveFormat, isRemoveNode, _removeCheck, end.container);
              if (_newRange.endContainer) {
                end.ancestor = null;
                end.container = _newRange.endContainer;
              }
              this._setCommonListStyle(_newRange.ancestor, null);
            }
            newNode = appendNode.cloneNode(false);
            start = this._nodeChange_startLine(lineNodes[0], newNode, validation, startCon, startOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode, end.container);
            if (start.endContainer) {
              end.ancestor = null;
              end.container = start.endContainer;
            }
            if (endLength <= 0) {
              end = start;
            } else if (!end.container) {
              end.ancestor = null;
              end.container = start.container;
              end.offset = start.container.textContent.length;
            }
            this._setCommonListStyle(start.ancestor, null);
            this._setCommonListStyle(end.ancestor || util.getFormatElement(end.container), null);
          }
          this.controllersOff();
          this.setRange(start.container, start.offset, end.container, end.offset);
          this.history.push(false);
        },
        _setCommonListStyle: function _setCommonListStyle(el, child) {
          if (!util.isListCell(el))
            return;
          if (!child)
            el.removeAttribute("style");
          var children = util.getArrayItem((child || el).childNodes, function(current) {
            return !util.isBreak(current) && !util.onlyZeroWidthSpace(current.textContent.trim());
          }, true);
          if (children[0] && children.length === 1) {
            child = children[0];
            if (!child || child.nodeType !== 1)
              return;
            var childStyle = child.style;
            var elStyle = el.style;
            if (/STRONG/i.test(child.nodeName))
              elStyle.fontWeight = "bold";
            else if (childStyle.fontWeight)
              elStyle.fontWeight = childStyle.fontWeight;
            if (childStyle.color)
              elStyle.color = childStyle.color;
            if (childStyle.fontSize)
              elStyle.fontSize = childStyle.fontSize;
            this._setCommonListStyle(el, child);
          }
        },
        _stripRemoveNode: function _stripRemoveNode(removeNode) {
          var element = removeNode.parentNode;
          if (!removeNode || removeNode.nodeType === 3 || !element)
            return;
          var children = removeNode.childNodes;
          while (children[0]) {
            element.insertBefore(children[0], removeNode);
          }
          element.removeChild(removeNode);
        },
        _util_getMaintainedNode: function _util_getMaintainedNode(_isRemove, _isSizeNode, element) {
          if (!element || _isRemove)
            return null;
          return this.getParentElement(element, this._isMaintainedNode.bind(this)) || (!_isSizeNode ? this.getParentElement(element, this._isSizeNode.bind(this)) : null);
        },
        _util_isMaintainedNode: function _util_isMaintainedNode(_isRemove, _isSizeNode, element) {
          if (!element || _isRemove || element.nodeType !== 1)
            return false;
          var anchor = this._isMaintainedNode(element);
          return this.getParentElement(element, this._isMaintainedNode.bind(this)) ? anchor : anchor || (!_isSizeNode ? this._isSizeNode(element) : false);
        },
        _nodeChange_oneLine: function _nodeChange_oneLine(element, newInnerNode, validation, startCon, startOff, endCon, endOff, isRemoveFormat, isRemoveNode, collapsed, _removeCheck, _getMaintainedNode, _isMaintainedNode) {
          var parentCon = startCon.parentNode;
          while (!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)) {
            if (parentCon.nodeName === newInnerNode.nodeName)
              break;
            parentCon = parentCon.parentNode;
          }
          if (!isRemoveNode && parentCon === endCon.parentNode && parentCon.nodeName === newInnerNode.nodeName) {
            if (util.onlyZeroWidthSpace(startCon.textContent.slice(0, startOff)) && util.onlyZeroWidthSpace(endCon.textContent.slice(endOff))) {
              var children = parentCon.childNodes;
              var sameTag = true;
              for (var i = 0, len = children.length, c, s, e, z; i < len; i++) {
                c = children[i];
                z = !util.onlyZeroWidthSpace(c);
                if (c === startCon) {
                  s = true;
                  continue;
                }
                if (c === endCon) {
                  e = true;
                  continue;
                }
                if (!s && z || s && e && z) {
                  sameTag = false;
                  break;
                }
              }
              if (sameTag) {
                util.copyTagAttributes(parentCon, newInnerNode);
                return {
                  startContainer: startCon,
                  startOffset: startOff,
                  endContainer: endCon,
                  endOffset: endOff
                };
              }
            }
          }
          _removeCheck.v = false;
          var el = element;
          var nNodeArray = [newInnerNode];
          var pNode = element.cloneNode(false);
          var isSameNode = startCon === endCon;
          var startContainer = startCon;
          var startOffset = startOff;
          var endContainer = endCon;
          var endOffset = endOff;
          var startPass = false;
          var endPass = false;
          var pCurrent, newNode, appendNode, cssText, anchorNode;
          var wRegExp = _w.RegExp;
          function checkCss(vNode) {
            var regExp = new wRegExp("(?:;|^|\\s)(?:" + cssText + "null)\\s*:[^;]*\\s*(?:;|$)", "ig");
            var style = "";
            if (regExp && vNode.style.cssText.length > 0) {
              style = regExp.test(vNode.style.cssText);
            }
            return !style;
          }
          (function recursionFunc(current, ancestor) {
            var childNodes = current.childNodes;
            for (var _i10 = 0, _len5 = childNodes.length, vNode; _i10 < _len5; _i10++) {
              var child = childNodes[_i10];
              if (!child)
                continue;
              var coverNode = ancestor;
              var cloneNode = void 0;
              if (!startPass && child === startContainer) {
                var line = pNode;
                anchorNode = _getMaintainedNode(child);
                var prevNode = util.createTextNode(startContainer.nodeType === 1 ? "" : startContainer.substringData(0, startOffset));
                var textNode2 = util.createTextNode(startContainer.nodeType === 1 ? "" : startContainer.substringData(startOffset, isSameNode ? endOffset >= startOffset ? endOffset - startOffset : startContainer.data.length - startOffset : startContainer.data.length - startOffset));
                if (anchorNode) {
                  var a = _getMaintainedNode(ancestor);
                  if (a && a.parentNode !== line) {
                    var m = a;
                    var p = null;
                    while (m.parentNode !== line) {
                      ancestor = p = m.parentNode.cloneNode(false);
                      while (m.childNodes[0]) {
                        p.appendChild(m.childNodes[0]);
                      }
                      m.appendChild(p);
                      m = m.parentNode;
                    }
                    m.parentNode.appendChild(a);
                  }
                  anchorNode = anchorNode.cloneNode(false);
                }
                if (!util.onlyZeroWidthSpace(prevNode)) {
                  ancestor.appendChild(prevNode);
                }
                var prevAnchorNode = _getMaintainedNode(ancestor);
                if (!!prevAnchorNode)
                  anchorNode = prevAnchorNode;
                if (anchorNode)
                  line = anchorNode;
                newNode = child;
                pCurrent = [];
                cssText = "";
                while (newNode !== line && newNode !== el && newNode !== null) {
                  vNode = _isMaintainedNode(newNode) ? null : validation(newNode);
                  if (vNode && newNode.nodeType === 1 && checkCss(newNode)) {
                    pCurrent.push(vNode);
                    cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(":")) + "|";
                  }
                  newNode = newNode.parentNode;
                }
                var childNode = pCurrent.pop() || textNode2;
                appendNode = newNode = childNode;
                while (pCurrent.length > 0) {
                  newNode = pCurrent.pop();
                  appendNode.appendChild(newNode);
                  appendNode = newNode;
                }
                newInnerNode.appendChild(childNode);
                line.appendChild(newInnerNode);
                if (anchorNode && !_getMaintainedNode(endContainer)) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  pNode.appendChild(newInnerNode);
                  nNodeArray.push(newInnerNode);
                }
                startContainer = textNode2;
                startOffset = 0;
                startPass = true;
                if (newNode !== textNode2)
                  newNode.appendChild(startContainer);
                if (!isSameNode)
                  continue;
              }
              if (!endPass && child === endContainer) {
                anchorNode = _getMaintainedNode(child);
                var afterNode = util.createTextNode(endContainer.nodeType === 1 ? "" : endContainer.substringData(endOffset, endContainer.length - endOffset));
                var _textNode = util.createTextNode(isSameNode || endContainer.nodeType === 1 ? "" : endContainer.substringData(0, endOffset));
                if (anchorNode) {
                  anchorNode = anchorNode.cloneNode(false);
                } else if (_isMaintainedNode(newInnerNode.parentNode) && !anchorNode) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  pNode.appendChild(newInnerNode);
                  nNodeArray.push(newInnerNode);
                }
                if (!util.onlyZeroWidthSpace(afterNode)) {
                  newNode = child;
                  cssText = "";
                  pCurrent = [];
                  var anchors = [];
                  while (newNode !== pNode && newNode !== el && newNode !== null) {
                    if (newNode.nodeType === 1 && checkCss(newNode)) {
                      if (_isMaintainedNode(newNode))
                        anchors.push(newNode.cloneNode(false));
                      else
                        pCurrent.push(newNode.cloneNode(false));
                      cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(":")) + "|";
                    }
                    newNode = newNode.parentNode;
                  }
                  pCurrent = pCurrent.concat(anchors);
                  cloneNode = appendNode = newNode = pCurrent.pop() || afterNode;
                  while (pCurrent.length > 0) {
                    newNode = pCurrent.pop();
                    appendNode.appendChild(newNode);
                    appendNode = newNode;
                  }
                  pNode.appendChild(cloneNode);
                  newNode.textContent = afterNode.data;
                }
                if (anchorNode && cloneNode) {
                  var afterAnchorNode = _getMaintainedNode(cloneNode);
                  if (afterAnchorNode) {
                    anchorNode = afterAnchorNode;
                  }
                }
                newNode = child;
                pCurrent = [];
                cssText = "";
                while (newNode !== pNode && newNode !== el && newNode !== null) {
                  vNode = _isMaintainedNode(newNode) ? null : validation(newNode);
                  if (vNode && newNode.nodeType === 1 && checkCss(newNode)) {
                    pCurrent.push(vNode);
                    cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(":")) + "|";
                  }
                  newNode = newNode.parentNode;
                }
                var _childNode = pCurrent.pop() || _textNode;
                appendNode = newNode = _childNode;
                while (pCurrent.length > 0) {
                  newNode = pCurrent.pop();
                  appendNode.appendChild(newNode);
                  appendNode = newNode;
                }
                if (anchorNode) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  newInnerNode.appendChild(_childNode);
                  anchorNode.insertBefore(newInnerNode, anchorNode.firstChild);
                  pNode.appendChild(anchorNode);
                  nNodeArray.push(newInnerNode);
                  anchorNode = null;
                } else {
                  newInnerNode.appendChild(_childNode);
                }
                endContainer = _textNode;
                endOffset = _textNode.data.length;
                endPass = true;
                if (!isRemoveFormat && collapsed) {
                  newInnerNode = _textNode;
                  _textNode.textContent = util.zeroWidthSpace;
                }
                if (newNode !== _textNode)
                  newNode.appendChild(endContainer);
                continue;
              }
              if (startPass) {
                if (child.nodeType === 1 && !util.isBreak(child)) {
                  if (util._isIgnoreNodeChange(child)) {
                    pNode.appendChild(child.cloneNode(true));
                    if (!collapsed) {
                      newInnerNode = newInnerNode.cloneNode(false);
                      pNode.appendChild(newInnerNode);
                      nNodeArray.push(newInnerNode);
                    }
                  } else {
                    recursionFunc(child, child);
                  }
                  continue;
                }
                newNode = child;
                pCurrent = [];
                cssText = "";
                var _anchors = [];
                while (newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode) {
                  vNode = endPass ? newNode.cloneNode(false) : validation(newNode);
                  if (newNode.nodeType === 1 && !util.isBreak(child) && vNode && checkCss(newNode)) {
                    if (_isMaintainedNode(newNode)) {
                      if (!anchorNode)
                        _anchors.push(vNode);
                    } else {
                      pCurrent.push(vNode);
                    }
                    cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(":")) + "|";
                  }
                  newNode = newNode.parentNode;
                }
                pCurrent = pCurrent.concat(_anchors);
                var _childNode2 = pCurrent.pop() || child;
                appendNode = newNode = _childNode2;
                while (pCurrent.length > 0) {
                  newNode = pCurrent.pop();
                  appendNode.appendChild(newNode);
                  appendNode = newNode;
                }
                if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(_childNode2) && !util.onlyZeroWidthSpace(newInnerNode)) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  pNode.appendChild(newInnerNode);
                  nNodeArray.push(newInnerNode);
                }
                if (!endPass && !anchorNode && _isMaintainedNode(_childNode2)) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  var aChildren = _childNode2.childNodes;
                  for (var _a = 0, aLen = aChildren.length; _a < aLen; _a++) {
                    newInnerNode.appendChild(aChildren[_a]);
                  }
                  _childNode2.appendChild(newInnerNode);
                  pNode.appendChild(_childNode2);
                  nNodeArray.push(newInnerNode);
                  if (newInnerNode.children.length > 0)
                    ancestor = newNode;
                  else
                    ancestor = newInnerNode;
                } else if (_childNode2 === child) {
                  if (!endPass)
                    ancestor = newInnerNode;
                  else
                    ancestor = pNode;
                } else if (endPass) {
                  pNode.appendChild(_childNode2);
                  ancestor = newNode;
                } else {
                  newInnerNode.appendChild(_childNode2);
                  ancestor = newNode;
                }
                if (anchorNode && child.nodeType === 3) {
                  if (_getMaintainedNode(child)) {
                    var ancestorAnchorNode = util.getParentElement(ancestor, function(current2) {
                      return this._isMaintainedNode(current2.parentNode) || current2.parentNode === pNode;
                    }.bind(util));
                    anchorNode.appendChild(ancestorAnchorNode);
                    newInnerNode = ancestorAnchorNode.cloneNode(false);
                    nNodeArray.push(newInnerNode);
                    pNode.appendChild(newInnerNode);
                  } else {
                    anchorNode = null;
                  }
                }
              }
              cloneNode = child.cloneNode(false);
              ancestor.appendChild(cloneNode);
              if (child.nodeType === 1 && !util.isBreak(child))
                coverNode = cloneNode;
              recursionFunc(child, coverNode);
            }
          })(element, pNode);
          if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {
            return {
              ancestor: element,
              startContainer: startCon,
              startOffset: startOff,
              endContainer: endCon,
              endOffset: endOff
            };
          }
          isRemoveFormat = isRemoveFormat && isRemoveNode;
          if (isRemoveFormat) {
            for (var _i11 = 0; _i11 < nNodeArray.length; _i11++) {
              var removeNode = nNodeArray[_i11];
              var textNode = void 0, textNode_s = void 0, textNode_e = void 0;
              if (collapsed) {
                textNode = util.createTextNode(util.zeroWidthSpace);
                pNode.replaceChild(textNode, removeNode);
              } else {
                var rChildren = removeNode.childNodes;
                textNode_s = rChildren[0];
                while (rChildren[0]) {
                  textNode_e = rChildren[0];
                  pNode.insertBefore(textNode_e, removeNode);
                }
                util.removeItem(removeNode);
              }
              if (_i11 === 0) {
                if (collapsed) {
                  startContainer = endContainer = textNode;
                } else {
                  startContainer = textNode_s;
                  endContainer = textNode_e;
                }
              }
            }
          } else {
            if (isRemoveNode) {
              for (var _i12 = 0; _i12 < nNodeArray.length; _i12++) {
                this._stripRemoveNode(nNodeArray[_i12]);
              }
            }
            if (collapsed) {
              startContainer = endContainer = newInnerNode;
            }
          }
          util.removeEmptyNode(pNode, newInnerNode);
          if (collapsed) {
            startOffset = startContainer.textContent.length;
            endOffset = endContainer.textContent.length;
          }
          var endConReset = isRemoveFormat || endContainer.textContent.length === 0;
          if (!util.isBreak(endContainer) && endContainer.textContent.length === 0) {
            util.removeItem(endContainer);
            endContainer = startContainer;
          }
          endOffset = endConReset ? endContainer.textContent.length : endOffset;
          var newStartOffset = {
            s: 0,
            e: 0
          };
          var startPath = util.getNodePath(startContainer, pNode, newStartOffset);
          var mergeEndCon = !endContainer.parentNode;
          if (mergeEndCon)
            endContainer = startContainer;
          var newEndOffset = {
            s: 0,
            e: 0
          };
          var endPath = util.getNodePath(endContainer, pNode, !mergeEndCon && !endConReset ? newEndOffset : null);
          startOffset += newStartOffset.s;
          endOffset = collapsed ? startOffset : mergeEndCon ? startContainer.textContent.length : endConReset ? endOffset + newStartOffset.s : endOffset + newEndOffset.s;
          var newOffsets = util.mergeSameTags(pNode, [startPath, endPath], true);
          element.parentNode.replaceChild(pNode, element);
          startContainer = util.getNodeFromPath(startPath, pNode);
          endContainer = util.getNodeFromPath(endPath, pNode);
          return {
            ancestor: pNode,
            startContainer,
            startOffset: startOffset + newOffsets[0],
            endContainer,
            endOffset: endOffset + newOffsets[1]
          };
        },
        _nodeChange_startLine: function _nodeChange_startLine(element, newInnerNode, validation, startCon, startOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode, _endContainer) {
          var parentCon = startCon.parentNode;
          while (!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)) {
            if (parentCon.nodeName === newInnerNode.nodeName)
              break;
            parentCon = parentCon.parentNode;
          }
          if (!isRemoveNode && parentCon.nodeName === newInnerNode.nodeName && !util.isFormatElement(parentCon) && !parentCon.nextSibling && util.onlyZeroWidthSpace(startCon.textContent.slice(0, startOff))) {
            var sameTag = true;
            var s = startCon.previousSibling;
            while (s) {
              if (!util.onlyZeroWidthSpace(s)) {
                sameTag = false;
                break;
              }
              s = s.previousSibling;
            }
            if (sameTag) {
              util.copyTagAttributes(parentCon, newInnerNode);
              return {
                ancestor: element,
                container: startCon,
                offset: startOff
              };
            }
          }
          _removeCheck.v = false;
          var el = element;
          var nNodeArray = [newInnerNode];
          var pNode = element.cloneNode(false);
          var container = startCon;
          var offset = startOff;
          var passNode = false;
          var pCurrent, newNode, appendNode, anchorNode;
          (function recursionFunc(current, ancestor) {
            var childNodes = current.childNodes;
            for (var i2 = 0, len = childNodes.length, vNode, cloneChild; i2 < len; i2++) {
              var child = childNodes[i2];
              if (!child)
                continue;
              var coverNode = ancestor;
              if (passNode && !util.isBreak(child)) {
                if (child.nodeType === 1) {
                  if (util._isIgnoreNodeChange(child)) {
                    newInnerNode = newInnerNode.cloneNode(false);
                    cloneChild = child.cloneNode(true);
                    pNode.appendChild(cloneChild);
                    pNode.appendChild(newInnerNode);
                    nNodeArray.push(newInnerNode);
                    if (_endContainer && child.contains(_endContainer)) {
                      var endPath = util.getNodePath(_endContainer, child);
                      _endContainer = util.getNodeFromPath(endPath, cloneChild);
                    }
                  } else {
                    recursionFunc(child, child);
                  }
                  continue;
                }
                newNode = child;
                pCurrent = [];
                var anchors = [];
                while (newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode) {
                  vNode = validation(newNode);
                  if (newNode.nodeType === 1 && vNode) {
                    if (_isMaintainedNode(newNode)) {
                      if (!anchorNode)
                        anchors.push(vNode);
                    } else {
                      pCurrent.push(vNode);
                    }
                  }
                  newNode = newNode.parentNode;
                }
                pCurrent = pCurrent.concat(anchors);
                var isTopNode = pCurrent.length > 0;
                var childNode = pCurrent.pop() || child;
                appendNode = newNode = childNode;
                while (pCurrent.length > 0) {
                  newNode = pCurrent.pop();
                  appendNode.appendChild(newNode);
                  appendNode = newNode;
                }
                if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(childNode)) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  pNode.appendChild(newInnerNode);
                  nNodeArray.push(newInnerNode);
                }
                if (!anchorNode && _isMaintainedNode(childNode)) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  var aChildren = childNode.childNodes;
                  for (var a = 0, aLen = aChildren.length; a < aLen; a++) {
                    newInnerNode.appendChild(aChildren[a]);
                  }
                  childNode.appendChild(newInnerNode);
                  pNode.appendChild(childNode);
                  ancestor = !_isMaintainedNode(newNode) ? newNode : newInnerNode;
                  nNodeArray.push(newInnerNode);
                } else if (isTopNode) {
                  newInnerNode.appendChild(childNode);
                  ancestor = newNode;
                } else {
                  ancestor = newInnerNode;
                }
                if (anchorNode && child.nodeType === 3) {
                  if (_getMaintainedNode(child)) {
                    var ancestorAnchorNode = util.getParentElement(ancestor, function(current2) {
                      return this._isMaintainedNode(current2.parentNode) || current2.parentNode === pNode;
                    }.bind(util));
                    anchorNode.appendChild(ancestorAnchorNode);
                    newInnerNode = ancestorAnchorNode.cloneNode(false);
                    nNodeArray.push(newInnerNode);
                    pNode.appendChild(newInnerNode);
                  } else {
                    anchorNode = null;
                  }
                }
              }
              if (!passNode && child === container) {
                var line = pNode;
                anchorNode = _getMaintainedNode(child);
                var prevNode = util.createTextNode(container.nodeType === 1 ? "" : container.substringData(0, offset));
                var textNode2 = util.createTextNode(container.nodeType === 1 ? "" : container.substringData(offset, container.length - offset));
                if (anchorNode) {
                  var _a2 = _getMaintainedNode(ancestor);
                  if (_a2 && _a2.parentNode !== line) {
                    var m = _a2;
                    var p = null;
                    while (m.parentNode !== line) {
                      ancestor = p = m.parentNode.cloneNode(false);
                      while (m.childNodes[0]) {
                        p.appendChild(m.childNodes[0]);
                      }
                      m.appendChild(p);
                      m = m.parentNode;
                    }
                    m.parentNode.appendChild(_a2);
                  }
                  anchorNode = anchorNode.cloneNode(false);
                }
                if (!util.onlyZeroWidthSpace(prevNode)) {
                  ancestor.appendChild(prevNode);
                }
                var prevAnchorNode = _getMaintainedNode(ancestor);
                if (!!prevAnchorNode)
                  anchorNode = prevAnchorNode;
                if (anchorNode)
                  line = anchorNode;
                newNode = ancestor;
                pCurrent = [];
                while (newNode !== line && newNode !== null) {
                  vNode = validation(newNode);
                  if (newNode.nodeType === 1 && vNode) {
                    pCurrent.push(vNode);
                  }
                  newNode = newNode.parentNode;
                }
                var _childNode3 = pCurrent.pop() || ancestor;
                appendNode = newNode = _childNode3;
                while (pCurrent.length > 0) {
                  newNode = pCurrent.pop();
                  appendNode.appendChild(newNode);
                  appendNode = newNode;
                }
                if (_childNode3 !== ancestor) {
                  newInnerNode.appendChild(_childNode3);
                  ancestor = newNode;
                } else {
                  ancestor = newInnerNode;
                }
                if (util.isBreak(child))
                  newInnerNode.appendChild(child.cloneNode(false));
                line.appendChild(newInnerNode);
                container = textNode2;
                offset = 0;
                passNode = true;
                ancestor.appendChild(container);
                continue;
              }
              vNode = !passNode ? child.cloneNode(false) : validation(child);
              if (vNode) {
                ancestor.appendChild(vNode);
                if (child.nodeType === 1 && !util.isBreak(child))
                  coverNode = vNode;
              }
              recursionFunc(child, coverNode);
            }
          })(element, pNode);
          if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {
            return {
              ancestor: element,
              container: startCon,
              offset: startOff,
              endContainer: _endContainer
            };
          }
          isRemoveFormat = isRemoveFormat && isRemoveNode;
          if (isRemoveFormat) {
            for (var i = 0; i < nNodeArray.length; i++) {
              var removeNode = nNodeArray[i];
              var rChildren = removeNode.childNodes;
              var textNode = rChildren[0];
              while (rChildren[0]) {
                pNode.insertBefore(rChildren[0], removeNode);
              }
              util.removeItem(removeNode);
              if (i === 0)
                container = textNode;
            }
          } else if (isRemoveNode) {
            newInnerNode = newInnerNode.firstChild;
            for (var _i13 = 0; _i13 < nNodeArray.length; _i13++) {
              this._stripRemoveNode(nNodeArray[_i13]);
            }
          }
          if (!isRemoveFormat && pNode.childNodes.length === 0) {
            if (element.childNodes) {
              container = element.childNodes[0];
            } else {
              container = util.createTextNode(util.zeroWidthSpace);
              element.appendChild(container);
            }
          } else {
            util.removeEmptyNode(pNode, newInnerNode);
            if (util.onlyZeroWidthSpace(pNode.textContent)) {
              container = pNode.firstChild;
              offset = 0;
            }
            var offsets = {
              s: 0,
              e: 0
            };
            var path = util.getNodePath(container, pNode, offsets);
            offset += offsets.s;
            var newOffsets = util.mergeSameTags(pNode, [path], true);
            element.parentNode.replaceChild(pNode, element);
            container = util.getNodeFromPath(path, pNode);
            offset += newOffsets[0];
          }
          return {
            ancestor: pNode,
            container,
            offset,
            endContainer: _endContainer
          };
        },
        _nodeChange_middleLine: function _nodeChange_middleLine(element, newInnerNode, validation, isRemoveFormat, isRemoveNode, _removeCheck, _endContainer) {
          if (!isRemoveNode) {
            var endPath = null;
            if (_endContainer && element.contains(_endContainer))
              endPath = util.getNodePath(_endContainer, element);
            var tempNode = element.cloneNode(true);
            var newNodeName = newInnerNode.nodeName;
            var newCssText = newInnerNode.style.cssText;
            var newClass = newInnerNode.className;
            var children = tempNode.childNodes;
            var i = 0, len = children.length;
            for (var child; i < len; i++) {
              child = children[i];
              if (child.nodeType === 3)
                break;
              if (child.nodeName === newNodeName) {
                child.style.cssText += newCssText;
                util.addClass(child, newClass);
              } else if (!util.isBreak(child) && util._isIgnoreNodeChange(child)) {
                continue;
              } else if (len === 1) {
                children = child.childNodes;
                len = children.length;
                i = -1;
                continue;
              } else {
                break;
              }
            }
            if (len > 0 && i === len) {
              element.innerHTML = tempNode.innerHTML;
              return {
                ancestor: element,
                endContainer: endPath ? util.getNodeFromPath(endPath, element) : null
              };
            }
          }
          _removeCheck.v = false;
          var pNode = element.cloneNode(false);
          var nNodeArray = [newInnerNode];
          var noneChange = true;
          (function recursionFunc(current, ancestor) {
            var childNodes = current.childNodes;
            for (var _i14 = 0, _len6 = childNodes.length, vNode, cloneChild; _i14 < _len6; _i14++) {
              var _child = childNodes[_i14];
              if (!_child)
                continue;
              var coverNode = ancestor;
              if (!util.isBreak(_child) && util._isIgnoreNodeChange(_child)) {
                if (newInnerNode.childNodes.length > 0) {
                  pNode.appendChild(newInnerNode);
                  newInnerNode = newInnerNode.cloneNode(false);
                }
                cloneChild = _child.cloneNode(true);
                pNode.appendChild(cloneChild);
                pNode.appendChild(newInnerNode);
                nNodeArray.push(newInnerNode);
                ancestor = newInnerNode;
                if (_endContainer && _child.contains(_endContainer)) {
                  var _endPath = util.getNodePath(_endContainer, _child);
                  _endContainer = util.getNodeFromPath(_endPath, cloneChild);
                }
                continue;
              } else {
                vNode = validation(_child);
                if (vNode) {
                  noneChange = false;
                  ancestor.appendChild(vNode);
                  if (_child.nodeType === 1)
                    coverNode = vNode;
                }
              }
              if (!util.isBreak(_child))
                recursionFunc(_child, coverNode);
            }
          })(element, newInnerNode);
          if (noneChange || isRemoveNode && !isRemoveFormat && !_removeCheck.v)
            return {
              ancestor: element,
              endContainer: _endContainer
            };
          pNode.appendChild(newInnerNode);
          if (isRemoveFormat && isRemoveNode) {
            for (var _i15 = 0; _i15 < nNodeArray.length; _i15++) {
              var removeNode = nNodeArray[_i15];
              var rChildren = removeNode.childNodes;
              while (rChildren[0]) {
                pNode.insertBefore(rChildren[0], removeNode);
              }
              util.removeItem(removeNode);
            }
          } else if (isRemoveNode) {
            newInnerNode = newInnerNode.firstChild;
            for (var _i16 = 0; _i16 < nNodeArray.length; _i16++) {
              this._stripRemoveNode(nNodeArray[_i16]);
            }
          }
          util.removeEmptyNode(pNode, newInnerNode);
          util.mergeSameTags(pNode, null, true);
          element.parentNode.replaceChild(pNode, element);
          return {
            ancestor: pNode,
            endContainer: _endContainer
          };
        },
        _nodeChange_endLine: function _nodeChange_endLine(element, newInnerNode, validation, endCon, endOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode) {
          var parentCon = endCon.parentNode;
          while (!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)) {
            if (parentCon.nodeName === newInnerNode.nodeName)
              break;
            parentCon = parentCon.parentNode;
          }
          if (!isRemoveNode && parentCon.nodeName === newInnerNode.nodeName && !util.isFormatElement(parentCon) && !parentCon.previousSibling && util.onlyZeroWidthSpace(endCon.textContent.slice(endOff))) {
            var sameTag = true;
            var e = endCon.nextSibling;
            while (e) {
              if (!util.onlyZeroWidthSpace(e)) {
                sameTag = false;
                break;
              }
              e = e.nextSibling;
            }
            if (sameTag) {
              util.copyTagAttributes(parentCon, newInnerNode);
              return {
                ancestor: element,
                container: endCon,
                offset: endOff
              };
            }
          }
          _removeCheck.v = false;
          var el = element;
          var nNodeArray = [newInnerNode];
          var pNode = element.cloneNode(false);
          var container = endCon;
          var offset = endOff;
          var passNode = false;
          var pCurrent, newNode, appendNode, anchorNode;
          (function recursionFunc(current, ancestor) {
            var childNodes = current.childNodes;
            for (var i2 = childNodes.length - 1, vNode; 0 <= i2; i2--) {
              var child = childNodes[i2];
              if (!child)
                continue;
              var coverNode = ancestor;
              if (passNode && !util.isBreak(child)) {
                if (child.nodeType === 1) {
                  if (util._isIgnoreNodeChange(child)) {
                    newInnerNode = newInnerNode.cloneNode(false);
                    var cloneChild = child.cloneNode(true);
                    pNode.insertBefore(cloneChild, ancestor);
                    pNode.insertBefore(newInnerNode, cloneChild);
                    nNodeArray.push(newInnerNode);
                  } else {
                    recursionFunc(child, child);
                  }
                  continue;
                }
                newNode = child;
                pCurrent = [];
                var anchors = [];
                while (newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode) {
                  vNode = validation(newNode);
                  if (vNode && newNode.nodeType === 1) {
                    if (_isMaintainedNode(newNode)) {
                      if (!anchorNode)
                        anchors.push(vNode);
                    } else {
                      pCurrent.push(vNode);
                    }
                  }
                  newNode = newNode.parentNode;
                }
                pCurrent = pCurrent.concat(anchors);
                var isTopNode = pCurrent.length > 0;
                var childNode = pCurrent.pop() || child;
                appendNode = newNode = childNode;
                while (pCurrent.length > 0) {
                  newNode = pCurrent.pop();
                  appendNode.appendChild(newNode);
                  appendNode = newNode;
                }
                if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(childNode)) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  pNode.insertBefore(newInnerNode, pNode.firstChild);
                  nNodeArray.push(newInnerNode);
                }
                if (!anchorNode && _isMaintainedNode(childNode)) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  var aChildren = childNode.childNodes;
                  for (var a = 0, aLen = aChildren.length; a < aLen; a++) {
                    newInnerNode.appendChild(aChildren[a]);
                  }
                  childNode.appendChild(newInnerNode);
                  pNode.insertBefore(childNode, pNode.firstChild);
                  nNodeArray.push(newInnerNode);
                  if (newInnerNode.children.length > 0)
                    ancestor = newNode;
                  else
                    ancestor = newInnerNode;
                } else if (isTopNode) {
                  newInnerNode.insertBefore(childNode, newInnerNode.firstChild);
                  ancestor = newNode;
                } else {
                  ancestor = newInnerNode;
                }
                if (anchorNode && child.nodeType === 3) {
                  if (_getMaintainedNode(child)) {
                    var ancestorAnchorNode = util.getParentElement(ancestor, function(current2) {
                      return this._isMaintainedNode(current2.parentNode) || current2.parentNode === pNode;
                    }.bind(util));
                    anchorNode.appendChild(ancestorAnchorNode);
                    newInnerNode = ancestorAnchorNode.cloneNode(false);
                    nNodeArray.push(newInnerNode);
                    pNode.insertBefore(newInnerNode, pNode.firstChild);
                  } else {
                    anchorNode = null;
                  }
                }
              }
              if (!passNode && child === container) {
                anchorNode = _getMaintainedNode(child);
                var afterNode = util.createTextNode(container.nodeType === 1 ? "" : container.substringData(offset, container.length - offset));
                var textNode2 = util.createTextNode(container.nodeType === 1 ? "" : container.substringData(0, offset));
                if (anchorNode) {
                  anchorNode = anchorNode.cloneNode(false);
                  var _a3 = _getMaintainedNode(ancestor);
                  if (_a3 && _a3.parentNode !== pNode) {
                    var m = _a3;
                    var p = null;
                    while (m.parentNode !== pNode) {
                      ancestor = p = m.parentNode.cloneNode(false);
                      while (m.childNodes[0]) {
                        p.appendChild(m.childNodes[0]);
                      }
                      m.appendChild(p);
                      m = m.parentNode;
                    }
                    m.parentNode.insertBefore(_a3, m.parentNode.firstChild);
                  }
                  anchorNode = anchorNode.cloneNode(false);
                } else if (_isMaintainedNode(newInnerNode.parentNode) && !anchorNode) {
                  newInnerNode = newInnerNode.cloneNode(false);
                  pNode.appendChild(newInnerNode);
                  nNodeArray.push(newInnerNode);
                }
                if (!util.onlyZeroWidthSpace(afterNode)) {
                  ancestor.insertBefore(afterNode, ancestor.firstChild);
                }
                newNode = ancestor;
                pCurrent = [];
                while (newNode !== pNode && newNode !== null) {
                  vNode = _isMaintainedNode(newNode) ? null : validation(newNode);
                  if (vNode && newNode.nodeType === 1) {
                    pCurrent.push(vNode);
                  }
                  newNode = newNode.parentNode;
                }
                var _childNode4 = pCurrent.pop() || ancestor;
                appendNode = newNode = _childNode4;
                while (pCurrent.length > 0) {
                  newNode = pCurrent.pop();
                  appendNode.appendChild(newNode);
                  appendNode = newNode;
                }
                if (_childNode4 !== ancestor) {
                  newInnerNode.insertBefore(_childNode4, newInnerNode.firstChild);
                  ancestor = newNode;
                } else {
                  ancestor = newInnerNode;
                }
                if (util.isBreak(child))
                  newInnerNode.appendChild(child.cloneNode(false));
                if (anchorNode) {
                  anchorNode.insertBefore(newInnerNode, anchorNode.firstChild);
                  pNode.insertBefore(anchorNode, pNode.firstChild);
                  anchorNode = null;
                } else {
                  pNode.insertBefore(newInnerNode, pNode.firstChild);
                }
                container = textNode2;
                offset = textNode2.data.length;
                passNode = true;
                ancestor.insertBefore(container, ancestor.firstChild);
                continue;
              }
              vNode = !passNode ? child.cloneNode(false) : validation(child);
              if (vNode) {
                ancestor.insertBefore(vNode, ancestor.firstChild);
                if (child.nodeType === 1 && !util.isBreak(child))
                  coverNode = vNode;
              }
              recursionFunc(child, coverNode);
            }
          })(element, pNode);
          if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {
            return {
              ancestor: element,
              container: endCon,
              offset: endOff
            };
          }
          isRemoveFormat = isRemoveFormat && isRemoveNode;
          if (isRemoveFormat) {
            for (var i = 0; i < nNodeArray.length; i++) {
              var removeNode = nNodeArray[i];
              var rChildren = removeNode.childNodes;
              var textNode = null;
              while (rChildren[0]) {
                textNode = rChildren[0];
                pNode.insertBefore(textNode, removeNode);
              }
              util.removeItem(removeNode);
              if (i === nNodeArray.length - 1) {
                container = textNode;
                offset = textNode.textContent.length;
              }
            }
          } else if (isRemoveNode) {
            newInnerNode = newInnerNode.firstChild;
            for (var _i17 = 0; _i17 < nNodeArray.length; _i17++) {
              this._stripRemoveNode(nNodeArray[_i17]);
            }
          }
          if (!isRemoveFormat && pNode.childNodes.length === 0) {
            if (element.childNodes) {
              container = element.childNodes[0];
            } else {
              container = util.createTextNode(util.zeroWidthSpace);
              element.appendChild(container);
            }
          } else {
            if (!isRemoveNode && newInnerNode.textContent.length === 0) {
              util.removeEmptyNode(pNode, null);
              return {
                ancestor: null,
                container: null,
                offset: 0
              };
            }
            util.removeEmptyNode(pNode, newInnerNode);
            if (util.onlyZeroWidthSpace(pNode.textContent)) {
              container = pNode.firstChild;
              offset = container.textContent.length;
            } else if (util.onlyZeroWidthSpace(container)) {
              container = newInnerNode;
              offset = 1;
            }
            var offsets = {
              s: 0,
              e: 0
            };
            var path = util.getNodePath(container, pNode, offsets);
            offset += offsets.s;
            var newOffsets = util.mergeSameTags(pNode, [path], true);
            element.parentNode.replaceChild(pNode, element);
            container = util.getNodeFromPath(path, pNode);
            offset += newOffsets[0];
          }
          return {
            ancestor: pNode,
            container,
            offset
          };
        },
        actionCall: function actionCall(command, display, target) {
          if (display) {
            if (/more/i.test(display) && target !== this._moreLayerActiveButton) {
              var layer = context.element.toolbar.querySelector("." + command);
              if (layer) {
                if (this._moreLayerActiveButton) {
                  context.element.toolbar.querySelector("." + this._moreLayerActiveButton.getAttribute("data-command")).style.display = "none";
                  util.removeClass(this._moreLayerActiveButton, "on");
                }
                util.addClass(target, "on");
                this._moreLayerActiveButton = target;
                layer.style.display = "block";
                event._showToolbarBalloon();
                event._showToolbarInline();
              }
              return;
            } else if (/submenu/.test(display) && (this.menuTray[command] === null || target !== this.submenuActiveButton)) {
              this.callPlugin(command, this.submenuOn.bind(this, target), target);
              return;
            } else if (/dialog/.test(display)) {
              this.callPlugin(command, this.plugins[command].open.bind(this), target);
              return;
            } else if (/command/.test(display)) {
              this.callPlugin(command, this.plugins[command].action.bind(this), target);
            } else if (/container/.test(display) && (this.menuTray[command] === null || target !== this.containerActiveButton)) {
              this.callPlugin(command, this.containerOn.bind(this, target), target);
              return;
            } else if (/fileBrowser/.test(display)) {
              this.callPlugin(command, this.plugins[command].open.bind(this, null), target);
            }
          } else if (command) {
            this.commandHandler(target, command);
          }
          if (/more/i.test(display)) {
            var _layer = context.element.toolbar.querySelector("." + this._moreLayerActiveButton.getAttribute("data-command"));
            if (_layer) {
              util.removeClass(this._moreLayerActiveButton, "on");
              this._moreLayerActiveButton = null;
              _layer.style.display = "none";
              event._showToolbarBalloon();
              event._showToolbarInline();
            }
          } else if (/submenu/.test(display)) {
            this.submenuOff();
          } else if (!/command/.test(display)) {
            this.submenuOff();
            this.containerOff();
          }
        },
        commandHandler: function commandHandler(target, command) {
          switch (command) {
            case "copy":
            case "cut":
              this.execCommand(command);
              break;
            case "paste":
              break;
            case "selectAll":
              var wysiwyg = context.element.wysiwyg;
              var first = util.getChildElement(wysiwyg.firstChild, function(current) {
                return current.childNodes.length === 0 || current.nodeType === 3;
              }, false) || wysiwyg.firstChild;
              var last = util.getChildElement(wysiwyg.lastChild, function(current) {
                return current.childNodes.length === 0 || current.nodeType === 3;
              }, true) || wysiwyg.lastChild;
              if (!first || !last)
                return;
              if (util.isMedia(first)) {
                var info = this.getFileComponent(first);
                var br = util.createElement("BR");
                var format = util.createElement(options.defaultTag);
                format.appendChild(br);
                first = info ? info.component : first;
                first.parentNode.insertBefore(format, first);
                first = br;
              }
              if (util.isMedia(last)) {
                var _br = util.createElement("BR");
                var _format2 = util.createElement(options.defaultTag);
                _format2.appendChild(_br);
                wysiwyg.appendChild(_format2);
                last = _br;
              }
              this.setRange(first, 0, last, last.textContent.length);
              break;
            case "codeView":
              this.toggleCodeView();
              break;
            case "fullScreen":
              this.toggleFullScreen(target);
              break;
            case "indent":
            case "outdent":
              this.indent(command);
              break;
            case "undo":
              this.history.undo();
              break;
            case "redo":
              this.history.redo();
              break;
            case "removeFormat":
              this.removeFormat();
              this.focus();
              break;
            case "print":
              this.print();
              break;
            case "preview":
              this.preview();
              break;
            case "showBlocks":
              this.toggleDisplayBlocks();
              break;
            case "save":
              if (typeof options.callBackSave === "function") {
                options.callBackSave(this.getContents(false), this._variable.isChanged);
              } else if (this._variable.isChanged && typeof functions.save === "function") {
                functions.save();
              } else {
                throw Error("[KothingEditor.core.commandHandler.fail] Please register call back function in creation option. (callBackSave : Function)");
              }
              this._variable.isChanged = false;
              if (context.tool.save)
                context.tool.save.setAttribute("disabled", true);
              break;
            default:
              command = this._defaultCommand[command.toLowerCase()] || command;
              if (!this.commandMap[command])
                this.commandMap[command] = target;
              var nodesMap = this._variable.currentNodesMap;
              var cmd = nodesMap.indexOf(command) > -1 ? null : util.createElement(command);
              var removeNode = command;
              if (/^SUB$/i.test(command) && nodesMap.indexOf("SUP") > -1) {
                removeNode = "SUP";
              } else if (/^SUP$/i.test(command) && nodesMap.indexOf("SUB") > -1) {
                removeNode = "SUB";
              }
              this.nodeChange(cmd, null, [removeNode], false);
              this.focus();
          }
        },
        removeFormat: function removeFormat() {
          this.nodeChange(null, null, null, null);
        },
        indent: function indent(command) {
          var range = this.getRange();
          var rangeLines = this.getSelectedElements(null);
          var cells = [];
          var shift = command !== "indent";
          var marginDir = options.rtl ? "marginRight" : "marginLeft";
          var sc = range.startContainer;
          var ec = range.endContainer;
          var so = range.startOffset;
          var eo = range.endOffset;
          for (var i = 0, len = rangeLines.length, f, margin; i < len; i++) {
            f = rangeLines[i];
            if (!util.isListCell(f) || !this.plugins.list) {
              margin = /\d+/.test(f.style[marginDir]) ? util.getNumber(f.style[marginDir], 0) : 0;
              if (shift) {
                margin -= 25;
              } else {
                margin += 25;
              }
              util.setStyle(f, marginDir, margin <= 0 ? "" : margin + "px");
            } else {
              if (shift || f.previousElementSibling) {
                cells.push(f);
              }
            }
          }
          if (cells.length > 0) {
            this.plugins.list.editInsideList.call(this, shift, cells);
          }
          this.effectNode = null;
          this.setRange(sc, so, ec, eo);
          this.history.push(false);
        },
        toggleDisplayBlocks: function toggleDisplayBlocks() {
          var wysiwyg = context.element.wysiwyg;
          util.toggleClass(wysiwyg, "ke-show-block");
          if (util.hasClass(wysiwyg, "ke-show-block")) {
            util.addClass(this._styleCommandMap.showBlocks, "active");
          } else {
            util.removeClass(this._styleCommandMap.showBlocks, "active");
          }
          this._resourcesStateChange();
        },
        toggleCodeView: function toggleCodeView() {
          var isCodeView = this._variable.isCodeView;
          this.controllersOff();
          util.setDisabledButtons(!isCodeView, this.codeViewDisabledButtons);
          if (isCodeView) {
            this._setCodeDataToEditor();
            context.element.wysiwygFrame.scrollTop = 0;
            context.element.code.style.display = "none";
            context.element.wysiwygFrame.style.display = "block";
            this._variable._codeOriginCssText = this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/, "display: none");
            this._variable._wysiwygOriginCssText = this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/, "display: block");
            if (options.height === "auto" && !options.codeMirrorEditor)
              context.element.code.style.height = "0px";
            this._variable.isCodeView = false;
            if (!this._variable.isFullScreen) {
              this._notHideToolbar = false;
              if (/balloon|balloon-always/i.test(options.mode)) {
                context.element.arrow.style.display = "";
                this._isInline = false;
                this._isBalloon = true;
                event._hideToolbar();
              }
            }
            this.nativeFocus();
            util.removeClass(this._styleCommandMap.codeView, "active");
            this.history.push(false);
            this.history._resetCachingButton();
          } else {
            this._setEditorDataToCodeView();
            this._variable._codeOriginCssText = this._variable._codeOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/, "display: block");
            this._variable._wysiwygOriginCssText = this._variable._wysiwygOriginCssText.replace(/(\s?display(\s+)?:(\s+)?)[a-zA-Z]+(?=;)/, "display: none");
            if (options.height === "auto" && !options.codeMirrorEditor)
              context.element.code.style.height = context.element.code.scrollHeight > 0 ? context.element.code.scrollHeight + "px" : "auto";
            if (options.codeMirrorEditor)
              options.codeMirrorEditor.refresh();
            this._variable.isCodeView = true;
            if (!this._variable.isFullScreen) {
              this._notHideToolbar = true;
              if (this._isBalloon) {
                context.element.arrow.style.display = "none";
                context.element.toolbar.style.left = "";
                this._isInline = true;
                this._isBalloon = false;
                event._showToolbarInline();
              }
            }
            this._variable._range = null;
            context.element.code.focus();
            util.addClass(this._styleCommandMap.codeView, "active");
          }
          this._checkPlaceholder();
          if (typeof functions.toggleCodeView === "function")
            functions.toggleCodeView(this._variable.isCodeView, this);
        },
        _setCodeDataToEditor: function _setCodeDataToEditor() {
          var code_html = this._getCodeView();
          if (options.fullPage) {
            var parseDocument = this._parser.parseFromString(code_html, "text/html");
            var headChildren = parseDocument.head.children;
            for (var i = 0, len = headChildren.length; i < len; i++) {
              if (/^script$/i.test(headChildren[i].tagName)) {
                parseDocument.head.removeChild(headChildren[i]);
                i--, len--;
              }
            }
            this._wd.head.innerHTML = parseDocument.head.innerHTML;
            this._wd.body.innerHTML = this.convertContentsForEditor(parseDocument.body.innerHTML);
            var attrs = parseDocument.body.attributes;
            for (var _i18 = 0, _len7 = attrs.length; _i18 < _len7; _i18++) {
              if (attrs[_i18].name === "contenteditable")
                continue;
              this._wd.body.setAttribute(attrs[_i18].name, attrs[_i18].value);
            }
            if (!util.hasClass(this._wd.body, "kothing-editor-editable")) {
              var editableClasses = options._editableClass.split(" ");
              for (var _i19 = 0; _i19 < editableClasses.length; _i19++) {
                util.addClass(this._wd.body, options._editableClass[_i19]);
              }
            }
          } else {
            context.element.wysiwyg.innerHTML = code_html.length > 0 ? this.convertContentsForEditor(code_html) : "<" + options.defaultTag + "><br></" + options.defaultTag + ">";
          }
        },
        _setEditorDataToCodeView: function _setEditorDataToCodeView() {
          var codeContents = this.convertHTMLForCodeView(context.element.wysiwyg);
          var codeValue = "";
          if (options.fullPage) {
            var attrs = util.getAttributesToString(this._wd.body, null);
            codeValue = "<!DOCTYPE html>\n<html>\n" + this._wd.head.outerHTML.replace(/>(?!\n)/g, ">\n") + "<body " + attrs + ">\n" + codeContents + "</body>\n</html>";
          } else {
            codeValue = codeContents;
          }
          context.element.code.style.display = "block";
          context.element.wysiwygFrame.style.display = "none";
          this._setCodeView(codeValue);
        },
        toggleFullScreen: function toggleFullScreen(element) {
          var topArea = context.element.topArea;
          var toolbar = context.element.toolbar;
          var editorArea = context.element.editorArea;
          var wysiwygFrame = context.element.wysiwygFrame;
          var code = context.element.code;
          var _var = this._variable;
          this.controllersOff();
          if (!_var.isFullScreen) {
            _var.isFullScreen = true;
            _var._fullScreenAttrs.inline = this._isInline;
            _var._fullScreenAttrs.balloon = this._isBalloon;
            if (this._isInline || this._isBalloon) {
              this._isInline = false;
              this._isBalloon = false;
            }
            if (!!options.toolbarContainer)
              context.element.relative.insertBefore(toolbar, editorArea);
            topArea.style.position = "fixed";
            topArea.style.top = "0";
            topArea.style.left = "0";
            topArea.style.width = "100%";
            topArea.style.maxWidth = "100%";
            topArea.style.height = "100%";
            topArea.style.zIndex = "2147483647";
            if (context.element.stickyDummy.style.display !== "") {
              _var._fullScreenAttrs.sticky = true;
              context.element.stickyDummy.style.display = "none";
              util.removeClass(toolbar, "ke-toolbar-sticky");
            }
            _var._bodyOverflow = _d.body.style.overflow;
            _d.body.style.overflow = "hidden";
            _var.editorAreaOriginCssText = editorArea.style.cssText;
            _var._wysiwygOriginCssText = wysiwygFrame.style.cssText;
            _var._codeOriginCssText = code.style.cssText;
            editorArea.style.cssText = toolbar.style.cssText = "";
            wysiwygFrame.style.cssText = (wysiwygFrame.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/) || [""])[0];
            code.style.cssText = (code.style.cssText.match(/\s?display(\s+)?:(\s+)?[a-zA-Z]+;/) || [""])[0];
            toolbar.style.width = wysiwygFrame.style.height = code.style.height = "100%";
            toolbar.style.position = "relative";
            toolbar.style.display = "block";
            _var.innerHeight_fullScreen = _w.innerHeight - toolbar.offsetHeight;
            editorArea.style.height = _var.innerHeight_fullScreen - options.fullScreenOffset + "px";
            util.changeElement(element.firstElementChild, icons.reduction);
            if (options.iframe && options.height === "auto") {
              editorArea.style.overflow = "auto";
              this._iframeAutoHeight();
            }
            context.element.topArea.style.marginTop = options.fullScreenOffset + "px";
            util.addClass(this._styleCommandMap.fullScreen, "active");
          } else {
            _var.isFullScreen = false;
            wysiwygFrame.style.cssText = _var._wysiwygOriginCssText;
            code.style.cssText = _var._codeOriginCssText;
            toolbar.style.cssText = "";
            editorArea.style.cssText = _var.editorAreaOriginCssText;
            topArea.style.cssText = _var._originCssText;
            _d.body.style.overflow = _var._bodyOverflow;
            if (!!options.toolbarContainer)
              options.toolbarContainer.appendChild(toolbar);
            if (options.stickyToolbar > -1) {
              util.removeClass(toolbar, "ke-toolbar-sticky");
            }
            if (_var._fullScreenAttrs.sticky && !options.toolbarContainer) {
              _var._fullScreenAttrs.sticky = false;
              context.element.stickyDummy.style.display = "block";
              util.addClass(toolbar, "ke-toolbar-sticky");
            }
            this._isInline = _var._fullScreenAttrs.inline;
            this._isBalloon = _var._fullScreenAttrs.balloon;
            if (this._isInline)
              event._showToolbarInline();
            if (!!options.toolbarContainer)
              util.removeClass(toolbar, "ke-toolbar-balloon");
            event.onScroll_window();
            util.changeElement(element.firstElementChild, icons.expansion);
            context.element.topArea.style.marginTop = "";
            util.removeClass(this._styleCommandMap.fullScreen, "active");
          }
          if (typeof functions.toggleFullScreen === "function")
            functions.toggleFullScreen(this._variable.isFullScreen, this);
        },
        print: function print() {
          var iframe = util.createElement("IFRAME");
          iframe.style.display = "none";
          _d.body.appendChild(iframe);
          var contentsHTML = options.printTemplate ? options.printTemplate.replace(/\{\{\s*contents\s*\}\}/i, this.getContents(true)) : this.getContents(true);
          var printDocument = util.getIframeDocument(iframe);
          var wDoc = this._wd;
          if (options.iframe) {
            var arrts = options._printClass !== null ? 'class="' + options._printClass + '"' : options.fullPage ? util.getAttributesToString(wDoc.body, ["contenteditable"]) : 'class="' + options._editableClass + '"';
            printDocument.write("<!DOCTYPE html><html><head>" + wDoc.head.innerHTML + "</head><body " + arrts + ">" + contentsHTML + "</body></html>");
          } else {
            var links = _d.head.getElementsByTagName("link");
            var styles = _d.head.getElementsByTagName("style");
            var linkHTML = "";
            for (var i = 0, len = links.length; i < len; i++) {
              linkHTML += links[i].outerHTML;
            }
            for (var _i20 = 0, _len8 = styles.length; _i20 < _len8; _i20++) {
              linkHTML += styles[_i20].outerHTML;
            }
            printDocument.write("<!DOCTYPE html><html><head>" + linkHTML + '</head><body class="' + (options._printClass !== null ? options._printClass : options._editableClass) + '">' + contentsHTML + "</body></html>");
          }
          this.showLoading();
          _w.setTimeout(function() {
            try {
              iframe.focus();
              if (util.isIE_Edge || !!_d.documentMode || !!_w.StyleMedia) {
                try {
                  iframe.contentWindow.document.execCommand("print", false, null);
                } catch (e) {
                  iframe.contentWindow.print();
                }
              } else {
                iframe.contentWindow.print();
              }
            } catch (error) {
              throw Error("[KothingEditor.core.print.fail] error: " + error);
            } finally {
              core.closeLoading();
              util.removeItem(iframe);
            }
          }, 1e3);
        },
        preview: function preview() {
          core.submenuOff();
          core.containerOff();
          core.controllersOff();
          var contentsHTML = options.previewTemplate ? options.previewTemplate.replace(/\{\{\s*contents\s*\}\}/i, this.getContents(true)) : this.getContents(true);
          var windowObject = _w.open("", "_blank");
          windowObject.mimeType = "text/html";
          var wDoc = this._wd;
          if (options.iframe) {
            var arrts = options._printClass !== null ? 'class="' + options._printClass + '"' : options.fullPage ? util.getAttributesToString(wDoc.body, ["contenteditable"]) : 'class="' + options._editableClass + '"';
            windowObject.document.write("<!DOCTYPE html><html><head>" + wDoc.head.innerHTML + "<style>body {overflow:auto !important; margin: 10px auto !important; height:auto !important; outline:1px dashed #ccc;}</style></head><body " + arrts + ">" + contentsHTML + "</body></html>");
          } else {
            var links = _d.head.getElementsByTagName("link");
            var styles = _d.head.getElementsByTagName("style");
            var linkHTML = "";
            for (var i = 0, len = links.length; i < len; i++) {
              linkHTML += links[i].outerHTML;
            }
            for (var _i21 = 0, _len9 = styles.length; _i21 < _len9; _i21++) {
              linkHTML += styles[_i21].outerHTML;
            }
            windowObject.document.write('<!DOCTYPE html><html><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1"><title>' + lang.toolbar.preview + "</title>" + linkHTML + '</head><body class="' + (options._printClass !== null ? options._printClass : options._editableClass) + '" style="margin:10px auto !important; height:auto !important; outline:1px dashed #ccc;">' + contentsHTML + "</body></html>");
          }
        },
        setContents: function setContents(html) {
          this.removeRange();
          var convertValue = html === null || html === void 0 ? "" : this.convertContentsForEditor(html);
          this._resetComponents();
          if (!this._variable.isCodeView) {
            context.element.wysiwyg.innerHTML = convertValue;
            this.history.push(false);
          } else {
            var value = this.convertHTMLForCodeView(convertValue);
            this._setCodeView(value);
          }
        },
        setIframeContents: function setIframeContents(ctx) {
          if (!options.iframe)
            return false;
          if (ctx.head)
            this._wd.head.innerHTML = ctx.head.replace(/<script[\s\S]*>[\s\S]*<\/script>/gi, "");
          if (ctx.body)
            this._wd.body.innerHTML = this.convertContentsForEditor(ctx.body);
        },
        getContents: function getContents(onlyContents) {
          var contents = context.element.wysiwyg.innerHTML;
          var renderHTML = util.createElement("DIV");
          renderHTML.innerHTML = contents;
          var figcaptions = util.getListChildren(renderHTML, function(current) {
            return /FIGCAPTION/i.test(current.nodeName);
          });
          for (var i = 0, len = figcaptions.length; i < len; i++) {
            figcaptions[i].removeAttribute("contenteditable");
          }
          if (options.fullPage && !onlyContents) {
            var attrs = util.getAttributesToString(this._wd.body, ["contenteditable"]);
            return "<!DOCTYPE html><html>" + this._wd.head.outerHTML + "<body " + attrs + ">" + renderHTML.innerHTML + "</body></html>";
          } else {
            return renderHTML.innerHTML;
          }
        },
        _makeLine: function _makeLine(node, requireFormat) {
          var defaultTag = options.defaultTag;
          if (node.nodeType === 1) {
            if (util._disallowedTags(node))
              return "";
            if (!requireFormat || util.isFormatElement(node) || util.isRangeFormatElement(node) || util.isComponent(node) || util.isMedia(node) || util.isAnchor(node) && util.isMedia(node.firstElementChild)) {
              return node.outerHTML;
            } else {
              return "<" + defaultTag + ">" + node.outerHTML + "</" + defaultTag + ">";
            }
          }
          if (node.nodeType === 3) {
            if (!requireFormat)
              return util._HTMLConvertor(node.textContent);
            var textArray = node.textContent.split(/\n/g);
            var html = "";
            for (var i = 0, tLen = textArray.length, text; i < tLen; i++) {
              text = textArray[i].trim();
              if (text.length > 0)
                html += "<" + defaultTag + ">" + util._HTMLConvertor(text) + "</" + defaultTag + ">";
            }
            return html;
          }
          if (node.nodeType === 8 && this._allowHTMLComments) {
            return "<!--" + node.textContent.trim() + "-->";
          }
          return "";
        },
        _tagConvertor: function _tagConvertor(text) {
          if (!this._disallowedTextTagsRegExp)
            return text;
          var ec = options._textTagsMap;
          return text.replace(this._disallowedTextTagsRegExp, function(m, t, n, p) {
            return t + (typeof ec[n] === "string" ? ec[n] : n) + (p ? " " + p : "");
          });
        },
        _deleteDisallowedTags: function _deleteDisallowedTags(html) {
          return html.replace(/\n/g, "").replace(/<(script|style)[\s\S]*>[\s\S]*<\/(script|style)>/gi, "").replace(/<[a-z0-9]+\:[a-z0-9]+[^>^\/]*>[^>]*<\/[a-z0-9]+\:[a-z0-9]+>/gi, "").replace(this.editorTagsWhitelistRegExp, "");
        },
        _cleanTags: function _cleanTags(rowLevelCheck, m, t) {
          if (/^<[a-z0-9]+\:[a-z0-9]+/i.test(m))
            return m;
          var v = null;
          var tAttr = this._attributesTagsWhitelist[t.match(/(?!<)[a-zA-Z0-9\-]+/)[0].toLowerCase()];
          if (tAttr)
            v = m.match(tAttr);
          else
            v = m.match(this._attributesWhitelistRegExp);
          if ((rowLevelCheck || /<span/i.test(t)) && (!v || !/style=/i.test(v.toString()))) {
            var sv = m.match(/style\s*=\s*(?:"|')[^"']*(?:"|')/);
            if (sv) {
              if (!v)
                v = [];
              v.push(sv[0]);
            }
          }
          if (/<a\b/i.test(t)) {
            var _sv = m.match(/id\s*=\s*(?:"|')[^"']*(?:"|')/);
            if (_sv) {
              if (!v)
                v = [];
              v.push(_sv[0]);
            }
          }
          if (v) {
            for (var i = 0, len = v.length; i < len; i++) {
              if (!rowLevelCheck && /^class="(?!(__ke__|ke-|katex))/.test(v[i]))
                continue;
              t += " " + (/^href\s*=\s*('|"|\s)*javascript\s*\:/i.test(v[i]) ? "" : v[i]);
            }
          }
          return t;
        },
        cleanHTML: function cleanHTML(html, whitelist) {
          html = this._deleteDisallowedTags(this._parser.parseFromString(html, "text/html").body.innerHTML).replace(/(<[a-zA-Z0-9\-]+)[^>]*(?=>)/g, this._cleanTags.bind(this, false));
          var dom = _d.createRange().createContextualFragment(html);
          try {
            util._consistencyCheckOfHTML(dom, this._htmlCheckWhitelistRegExp);
          } catch (error) {
            console.warn("[KothingEditor.cleanHTML.consistencyCheck.fail] " + error);
          }
          if (this.managedTagsInfo && this.managedTagsInfo.query) {
            var textCompList = dom.querySelectorAll(this.managedTagsInfo.query);
            for (var i = 0, len = textCompList.length, initMethod, classList; i < len; i++) {
              classList = [].slice.call(textCompList[i].classList);
              for (var c = 0, cLen = classList.length; c < cLen; c++) {
                initMethod = this.managedTagsInfo.map[classList[c]];
                if (initMethod) {
                  initMethod(textCompList[i]);
                  break;
                }
              }
            }
          }
          var domTree = dom.childNodes;
          var cleanHTML2 = "";
          var requireFormat = false;
          for (var _i22 = 0, _len10 = domTree.length, t; _i22 < _len10; _i22++) {
            t = domTree[_i22];
            if (t.nodeType === 1 && !util.isTextStyleElement(t) && !util.isBreak(t) && !util._disallowedTags(t)) {
              requireFormat = true;
              break;
            }
          }
          for (var _i23 = 0, _len11 = domTree.length; _i23 < _len11; _i23++) {
            cleanHTML2 += this._makeLine(domTree[_i23], requireFormat);
          }
          cleanHTML2 = util.htmlRemoveWhiteSpace(cleanHTML2);
          return this._tagConvertor(!cleanHTML2 ? html : !whitelist ? cleanHTML2 : cleanHTML2.replace(typeof whitelist === "string" ? util.createTagsWhitelist(whitelist) : whitelist, ""));
        },
        convertContentsForEditor: function convertContentsForEditor(contents) {
          contents = this._deleteDisallowedTags(this._parser.parseFromString(contents, "text/html").body.innerHTML).replace(/(<[a-zA-Z0-9\-]+)[^>]*(?=>)/g, this._cleanTags.bind(this, true));
          var dom = _d.createRange().createContextualFragment(contents);
          try {
            util._consistencyCheckOfHTML(dom, this._htmlCheckWhitelistRegExp);
          } catch (error) {
            console.warn("[KothingEditor.convertContentsForEditor.consistencyCheck.fail] " + error);
          }
          if (this.managedTagsInfo && this.managedTagsInfo.query) {
            var textCompList = dom.querySelectorAll(this.managedTagsInfo.query);
            for (var i = 0, len = textCompList.length, initMethod, classList; i < len; i++) {
              classList = [].slice.call(textCompList[i].classList);
              for (var c = 0, cLen = classList.length; c < cLen; c++) {
                initMethod = this.managedTagsInfo.map[classList[c]];
                if (initMethod) {
                  initMethod(textCompList[i]);
                  break;
                }
              }
            }
          }
          var domTree = dom.childNodes;
          var cleanHTML = "";
          for (var _i24 = 0, _len12 = domTree.length; _i24 < _len12; _i24++) {
            cleanHTML += this._makeLine(domTree[_i24], true);
          }
          if (cleanHTML.length === 0)
            return "<" + options.defaultTag + "><br></" + options.defaultTag + ">";
          cleanHTML = util.htmlRemoveWhiteSpace(cleanHTML);
          return this._tagConvertor(cleanHTML);
        },
        convertHTMLForCodeView: function convertHTMLForCodeView(html) {
          var returnHTML = "";
          var wRegExp = _w.RegExp;
          var brReg = new wRegExp("^(BLOCKQUOTE|PRE|TABLE|THEAD|TBODY|TR|TH|TD|OL|UL|IMG|IFRAME|VIDEO|AUDIO|FIGURE|FIGCAPTION|HR|BR|CANVAS|SELECT)$", "i");
          var wDoc = typeof html === "string" ? _d.createRange().createContextualFragment(html) : html;
          var isFormat = function(current) {
            return this.isFormatElement(current) || this.isComponent(current);
          }.bind(util);
          var indentSize = this._variable.codeIndent * 1;
          indentSize = indentSize > 0 ? new _w.Array(indentSize + 1).join(" ") : "";
          (function recursionFunc(element, indent, lineBR) {
            var children = element.childNodes;
            var elementRegTest = brReg.test(element.nodeName);
            var elementIndent = elementRegTest ? indent : "";
            for (var i = 0, len = children.length, node, br, nodeRegTest, tag, tagIndent; i < len; i++) {
              node = children[i];
              nodeRegTest = brReg.test(node.nodeName);
              br = nodeRegTest ? "\n" : "";
              lineBR = isFormat(node) && !elementRegTest && !/^(TH|TD)$/i.test(element.nodeName) ? "\n" : "";
              if (node.nodeType === 8) {
                returnHTML += "\n<!-- " + node.textContent.trim() + " -->" + br;
                continue;
              }
              if (node.nodeType === 3) {
                if (!util.isList(node.parentElement))
                  returnHTML += util._HTMLConvertor(/^\n+$/.test(node.data) ? "" : node.data);
                continue;
              }
              if (node.childNodes.length === 0) {
                returnHTML += (/^HR$/i.test(node.nodeName) ? "\n" : "") + (/^PRE$/i.test(node.parentElement.nodeName) && /^BR$/i.test(node.nodeName) ? "" : elementIndent) + node.outerHTML + br;
                continue;
              }
              if (!node.outerHTML) {
                returnHTML += new _w.XMLSerializer().serializeToString(node);
              } else {
                tag = node.nodeName.toLowerCase();
                tagIndent = elementIndent || nodeRegTest ? indent : "";
                returnHTML += (lineBR || (elementRegTest ? "" : br)) + tagIndent + node.outerHTML.match(wRegExp("<" + tag + "[^>]*>", "i"))[0] + br;
                recursionFunc(node, indent + indentSize, "");
                returnHTML += (/\n$/.test(returnHTML) ? tagIndent : "") + "</" + tag + ">" + (lineBR || br || elementRegTest ? "\n" : /^(TH|TD)$/i.test(node.nodeName) ? "\n" : "");
              }
            }
          })(wDoc, "", "\n");
          return returnHTML.trim() + "\n";
        },
        addDocEvent: function addDocEvent(type, listener, useCapture) {
          _d.addEventListener(type, listener, useCapture);
          if (options.iframe) {
            this._wd.addEventListener(type, listener);
          }
        },
        removeDocEvent: function removeDocEvent(type, listener) {
          _d.removeEventListener(type, listener);
          if (options.iframe) {
            this._wd.removeEventListener(type, listener);
          }
        },
        _charCount: function _charCount(inputText) {
          var maxCharCount = options.maxCharCount;
          var countType = options.charCounterType;
          var nextCharCount = 0;
          if (!!inputText)
            nextCharCount = this.getCharLength(inputText, countType);
          this._setCharCount();
          if (maxCharCount > 0) {
            var over = false;
            var count = functions.getCharCount(countType);
            if (count > maxCharCount) {
              over = true;
              if (nextCharCount > 0) {
                this._editorRange();
                var range = this.getRange();
                var endOff = range.endOffset - 1;
                var text = this.getSelectionNode().textContent;
                var slicePosition = range.endOffset - (count - maxCharCount);
                this.getSelectionNode().textContent = text.slice(0, slicePosition < 0 ? 0 : slicePosition) + text.slice(range.endOffset, text.length);
                this.setRange(range.endContainer, endOff, range.endContainer, endOff);
              }
            } else if (count + nextCharCount > maxCharCount) {
              over = true;
            }
            if (over) {
              this._callCounterBlink();
              if (nextCharCount > 0)
                return false;
            }
          }
          return true;
        },
        checkCharCount: function checkCharCount(element, charCounterType) {
          if (options.maxCharCount) {
            var countType = charCounterType || options.charCounterType;
            var length = this.getCharLength(typeof element === "string" ? element : this._charTypeHTML && element.nodeType === 1 ? element.outerHTML : element.textContent, countType);
            if (length > 0 && length + functions.getCharCount(countType) > options.maxCharCount) {
              this._callCounterBlink();
              return false;
            }
          }
          return true;
        },
        getCharLength: function getCharLength(content, charCounterType) {
          return /byte/.test(charCounterType) ? util.getByteLength(content) : content.length;
        },
        _setCharCount: function _setCharCount() {
          if (context.element.charCounter) {
            _w.setTimeout(function() {
              context.element.charCounter.textContent = functions.getCharCount(options.charCounterType);
            });
          }
        },
        _callCounterBlink: function _callCounterBlink() {
          var charWrapper = context.element.charWrapper;
          if (charWrapper && !util.hasClass(charWrapper, "ke-blink")) {
            util.addClass(charWrapper, "ke-blink");
            _w.setTimeout(function() {
              util.removeClass(charWrapper, "ke-blink");
            }, 600);
          }
        },
        _checkComponents: function _checkComponents() {
          for (var i = 0, len = this._fileInfoPluginsCheck.length; i < len; i++) {
            this._fileInfoPluginsCheck[i]();
          }
        },
        _resetComponents: function _resetComponents() {
          for (var i = 0, len = this._fileInfoPluginsReset.length; i < len; i++) {
            this._fileInfoPluginsReset[i]();
          }
        },
        _setCodeView: function _setCodeView(value) {
          if (options.codeMirrorEditor) {
            options.codeMirrorEditor.getDoc().setValue(value);
          } else {
            context.element.code.value = value;
          }
        },
        _getCodeView: function _getCodeView() {
          return options.codeMirrorEditor ? options.codeMirrorEditor.getDoc().getValue() : context.element.code.value;
        },
        _init: function _init(reload, _initHTML) {
          var wRegExp = _w.RegExp;
          this._ww = options.iframe ? context.element.wysiwygFrame.contentWindow : _w;
          this._wd = _d;
          this._charTypeHTML = options.charCounterType === "byte-html";
          if (!options.iframe && typeof _w.ShadowRoot === "function") {
            var child = context.element.wysiwygFrame;
            while (child) {
              if (child.shadowRoot) {
                this._shadowRoot = child.shadowRoot;
                break;
              } else if (child instanceof _w.ShadowRoot) {
                this._shadowRoot = child;
                break;
              }
              child = child.parentNode;
            }
            if (this._shadowRoot)
              this._shadowRootControllerEventTarget = [];
          }
          var disallowTextTags = _w.Object.keys(options._textTagsMap);
          var allowTextTags = !options.addTagsWhitelist ? [] : options.addTagsWhitelist.split("|").filter(function(v) {
            return /b|i|ins|s|strike/i.test(v);
          });
          for (var i = 0; i < allowTextTags.length; i++) {
            disallowTextTags.splice(disallowTextTags.indexOf(allowTextTags[i].toLowerCase()), 1);
          }
          this._disallowedTextTagsRegExp = disallowTextTags.length === 0 ? null : new wRegExp("(<\\/?)(" + disallowTextTags.join("|") + ")\\b\\s*([^>^<]+)?\\s*(?=>)", "gi");
          var defaultAttr = "contenteditable|id|colspan|rowspan|target|href|download|rel|src|alt|class|type|controls|data-format|data-size|data-file-size|data-file-name|data-origin|data-align|data-image-link|data-rotate|data-proportion|data-percentage|origin-size|data-exp|data-font-size";
          this._allowHTMLComments = options._editorTagsWhitelist.indexOf("//") > -1;
          this._htmlCheckWhitelistRegExp = new wRegExp("^(" + options._editorTagsWhitelist.replace("|//", "") + ")$", "i");
          this.editorTagsWhitelistRegExp = util.createTagsWhitelist(options._editorTagsWhitelist.replace("|//", "|<!--|-->"));
          this.pasteTagsWhitelistRegExp = util.createTagsWhitelist(options.pasteTagsWhitelist);
          var regEndStr = '\\s*=\\s*(")[^"]*\\1';
          var _attr = options.attributesWhitelist;
          var tagsAttr = {};
          var allAttr = "";
          if (!!_attr) {
            for (var k in _attr) {
              if (!util.hasOwn(_attr, k) || /^on[a-z]+$/i.test(_attr[k]))
                continue;
              if (k === "all") {
                allAttr = _attr[k] + "|";
              } else {
                tagsAttr[k] = new wRegExp("(?:" + _attr[k] + "|" + defaultAttr + ")" + regEndStr, "ig");
              }
            }
          }
          this._attributesWhitelistRegExp = new wRegExp("(?:" + allAttr + defaultAttr + ")" + regEndStr, "ig");
          this._attributesTagsWhitelist = tagsAttr;
          this._isInline = /inline/i.test(options.mode);
          this._isBalloon = /balloon|balloon-always/i.test(options.mode);
          this._isBalloonAlways = /balloon-always/i.test(options.mode);
          this._cachingButtons();
          this._fileInfoPluginsCheck = [];
          this._fileInfoPluginsReset = [];
          this.managedTagsInfo = {
            query: "",
            map: {}
          };
          var managedClass = [];
          this.activePlugins = [];
          this._fileManager.tags = [];
          this._fileManager.pluginMap = {};
          var filePluginRegExp = [];
          var plugin, button;
          for (var key in plugins) {
            if (!util.hasOwn(plugins, key))
              continue;
            plugin = plugins[key];
            button = pluginCallButtons[key];
            if (plugin.active && button) {
              this.callPlugin(key, null, button);
            }
            if (typeof plugin.checkFileInfo === "function" && typeof plugin.resetFileInfo === "function") {
              this.callPlugin(key, null, button);
              this._fileInfoPluginsCheck.push(plugin.checkFileInfo.bind(this));
              this._fileInfoPluginsReset.push(plugin.resetFileInfo.bind(this));
            }
            if (_w.Array.isArray(plugin.fileTags)) {
              var fileTags = plugin.fileTags;
              this.callPlugin(key, null, button);
              this._fileManager.tags = this._fileManager.tags.concat(fileTags);
              filePluginRegExp.push(key);
              for (var tag = 0, tLen = fileTags.length; tag < tLen; tag++) {
                this._fileManager.pluginMap[fileTags[tag].toLowerCase()] = key;
              }
            }
            if (plugin.managedTags) {
              var info = plugin.managedTags();
              managedClass.push("." + info.className);
              this.managedTagsInfo.map[info.className] = info.method.bind(this);
            }
          }
          this.managedTagsInfo.query = managedClass.toString();
          this._fileManager.queryString = this._fileManager.tags.join(",");
          this._fileManager.regExp = new wRegExp("^(" + this._fileManager.tags.join("|") + ")$", "i");
          this._fileManager.pluginRegExp = new wRegExp("^(" + (filePluginRegExp.length === 0 ? "undefined" : filePluginRegExp.join("|")) + ")$", "i");
          this._variable._originCssText = context.element.topArea.style.cssText;
          this.placeholder = context.element.placeholder;
          this.lineBreaker = context.element.lineBreaker;
          this.lineBreakerButton = this.lineBreaker.querySelector("button");
          this.history = (0, _history.default)(this, this._onChange_historyStack.bind(this));
          this.addModule([_notice.default]);
          if (options.iframe) {
            this._wd = context.element.wysiwygFrame.contentDocument;
            context.element.wysiwyg = this._wd.body;
            if (options._editorStyles.editor)
              context.element.wysiwyg.style.cssText = options._editorStyles.editor;
            if (options.height === "auto")
              this._iframeAuto = this._wd.body;
          }
          this._initWysiwygArea(reload, _initHTML);
        },
        _cachingButtons: function _cachingButtons() {
          _w.setTimeout(function() {
            this.codeViewDisabledButtons = context.element.buttonTray.querySelectorAll('.ke-menu-list button[data-display]:not([class~="ke-code-view-enabled"])');
            this.resizingDisabledButtons = context.element.buttonTray.querySelectorAll('.ke-menu-list button[data-display]:not([class~="ke-resizing-enabled"]):not([data-display="MORE"])');
          }.bind(this));
          var tool = context.tool;
          this.commandMap = {
            SUB: tool.subscript,
            SUP: tool.superscript,
            OUTDENT: tool.outdent,
            INDENT: tool.indent
          };
          this.commandMap[options.textTags.bold.toUpperCase()] = tool.bold;
          this.commandMap[options.textTags.underline.toUpperCase()] = tool.underline;
          this.commandMap[options.textTags.italic.toUpperCase()] = tool.italic;
          this.commandMap[options.textTags.strike.toUpperCase()] = tool.strike;
          this._styleCommandMap = {
            fullScreen: tool.fullScreen,
            showBlocks: tool.showBlocks,
            codeView: tool.codeView
          };
        },
        _initWysiwygArea: function _initWysiwygArea(reload, _initHTML) {
          context.element.wysiwyg.innerHTML = reload ? _initHTML : this.convertContentsForEditor(typeof _initHTML === "string" ? _initHTML : context.element.originElement.value);
        },
        _resourcesStateChange: function _resourcesStateChange() {
          this._iframeAutoHeight();
          this._checkPlaceholder();
        },
        _onChange_historyStack: function _onChange_historyStack() {
          if (this.hasFocus)
            event._applyTagEffects();
          this._variable.isChanged = true;
          if (context.tool.save)
            context.tool.save.removeAttribute("disabled");
          if (functions.onChange)
            functions.onChange(this.getContents(true), this);
          if (context.element.toolbar.style.display === "block")
            event._showToolbarBalloon();
        },
        _iframeAutoHeight: function _iframeAutoHeight() {
          if (this._iframeAuto) {
            _w.setTimeout(function() {
              context.element.wysiwygFrame.style.height = core._iframeAuto.offsetHeight + "px";
            });
          }
        },
        _checkPlaceholder: function _checkPlaceholder() {
          if (this.placeholder) {
            if (this._variable.isCodeView) {
              this.placeholder.style.display = "none";
              return;
            }
            var wysiwyg = context.element.wysiwyg;
            if (!util.onlyZeroWidthSpace(wysiwyg.textContent) || wysiwyg.querySelector(util._allowedEmptyNodeList) || (wysiwyg.innerText.match(/\n/g) || "").length > 1) {
              this.placeholder.style.display = "none";
            } else {
              this.placeholder.style.display = "block";
            }
          }
        },
        _setDefaultFormat: function _setDefaultFormat(formatName) {
          if (this._fileManager.pluginRegExp.test(this.currentControllerName))
            return;
          var range = this.getRange();
          var commonCon = range.commonAncestorContainer;
          var startCon = range.startContainer;
          var rangeEl = util.getRangeFormatElement(commonCon, null);
          var focusNode, offset, format;
          var fileComponent = util.getParentElement(commonCon, util.isComponent);
          if (fileComponent && !util.isTable(fileComponent))
            return;
          if ((util.isRangeFormatElement(startCon) || util.isWysiwygDiv(startCon)) && (util.isComponent(startCon.children[range.startOffset]) || util.isComponent(startCon.children[range.startOffset - 1])))
            return;
          if (rangeEl) {
            format = util.createElement(formatName || options.defaultTag);
            format.innerHTML = rangeEl.innerHTML;
            if (format.childNodes.length === 0)
              format.innerHTML = util.zeroWidthSpace;
            rangeEl.innerHTML = format.outerHTML;
            format = rangeEl.firstChild;
            focusNode = util.getEdgeChildNodes(format, null).sc;
            if (!focusNode) {
              focusNode = util.createTextNode(util.zeroWidthSpace);
              format.insertBefore(focusNode, format.firstChild);
            }
            offset = focusNode.textContent.length;
            this.setRange(focusNode, offset, focusNode, offset);
            return;
          }
          if (util.isRangeFormatElement(commonCon) && commonCon.childNodes.length <= 1) {
            var br = null;
            if (commonCon.childNodes.length === 1 && util.isBreak(commonCon.firstChild)) {
              br = commonCon.firstChild;
            } else {
              br = util.createTextNode(util.zeroWidthSpace);
              commonCon.appendChild(br);
            }
            this.setRange(br, 1, br, 1);
            return;
          }
          this.execCommand("formatBlock", false, formatName || options.defaultTag);
          focusNode = util.getEdgeChildNodes(commonCon, commonCon);
          focusNode = focusNode ? focusNode.ec : commonCon;
          format = util.getFormatElement(focusNode, null);
          if (!format) {
            this.removeRange();
            this._editorRange();
            return;
          }
          if (util.isBreak(format.nextSibling))
            util.removeItem(format.nextSibling);
          if (util.isBreak(format.previousSibling))
            util.removeItem(format.previousSibling);
          if (util.isBreak(focusNode)) {
            var zeroWidth = util.createTextNode(util.zeroWidthSpace);
            focusNode.parentNode.insertBefore(zeroWidth, focusNode);
            focusNode = zeroWidth;
          }
          this.effectNode = null;
          this.nativeFocus();
        },
        _setOptionsInit: function _setOptionsInit(el, _initHTML) {
          this.context = context = (0, _context.default)(el.originElement, this._getConstructed(el), options);
          this._componentsInfoReset = true;
          this._editorInit(true, _initHTML);
        },
        _editorInit: function _editorInit(reload, _initHTML) {
          this._init(reload, _initHTML);
          event._addEvent();
          this._setCharCount();
          event._offStickyToolbar();
          event.onResize_window();
          context.element.toolbar.style.visibility = "";
          this._checkComponents();
          this._componentsInfoInit = false;
          this._componentsInfoReset = false;
          this.history.reset(true);
          this._resourcesStateChange();
          _w.setTimeout(function() {
            if (typeof functions.onload === "function")
              functions.onload(core, reload);
          });
        },
        _getConstructed: function _getConstructed(contextEl2) {
          return {
            top: contextEl2.topArea,
            relative: contextEl2.relative,
            toolBar: contextEl2.toolbar,
            menuTray: contextEl2.menuTray,
            editorArea: contextEl2.editorArea,
            wysiwygArea: contextEl2.wysiwygFrame,
            codeArea: contextEl2.code,
            placeholder: contextEl2.placeholder,
            resizingBar: contextEl2.resizingBar,
            navigation: contextEl2.navigation,
            charCounter: contextEl2.charCounter,
            charWrapper: contextEl2.charWrapper,
            loading: contextEl2.loading,
            lineBreaker: contextEl2.lineBreaker,
            lineBreaker_t: contextEl2.lineBreaker_t,
            lineBreaker_b: contextEl2.lineBreaker_b,
            resizeBack: contextEl2.resizeBackground,
            stickyDummy: contextEl2.stickyDummy,
            arrow: contextEl2.arrow
          };
        }
      };
      var event = {
        _IEisComposing: false,
        lineBreakerBind: null,
        _responsiveCurrentSize: "default",
        _responsiveButtonSize: null,
        _responsiveButtons: null,
        _directionKeyCode: new _w.RegExp("^(8|13|3[2-9]|40|46)$"),
        _nonTextKeyCode: new _w.RegExp("^(8|13|1[6-9]|20|27|3[3-9]|40|45|46|11[2-9]|12[0-3]|144|145)$"),
        $historyIgnoreKeyCode: new _w.RegExp("^(1[6-9]|20|27|3[3-9]|40|45|11[2-9]|12[0-3]|144|145)$"),
        _onButtonsCheck: new _w.RegExp("^(" + _w.Object.keys(options._textTagsMap).join("|") + ")$", "i"),
        _frontZeroWidthReg: new _w.RegExp(util.zeroWidthSpace + "+", ""),
        _keyCodeShortcut: {
          65: "A",
          66: "B",
          83: "S",
          85: "U",
          73: "I",
          89: "Y",
          90: "Z",
          219: "[",
          221: "]"
        },
        _shortcutCommand: function _shortcutCommand(keyCode, shift) {
          var command = null;
          var keyStr = event._keyCodeShortcut[keyCode];
          switch (keyStr) {
            case "A":
              command = "selectAll";
              break;
            case "B":
              if (options.shortcutsDisable.indexOf("bold") === -1) {
                command = "bold";
              }
              break;
            case "S":
              if (shift && options.shortcutsDisable.indexOf("strike") === -1) {
                command = "strike";
              } else if (!shift && options.shortcutsDisable.indexOf("save") === -1) {
                command = "save";
              }
              break;
            case "U":
              if (options.shortcutsDisable.indexOf("underline") === -1) {
                command = "underline";
              }
              break;
            case "I":
              if (options.shortcutsDisable.indexOf("italic") === -1) {
                command = "italic";
              }
              break;
            case "Z":
              if (options.shortcutsDisable.indexOf("undo") === -1) {
                if (shift) {
                  command = "redo";
                } else {
                  command = "undo";
                }
              }
              break;
            case "Y":
              if (options.shortcutsDisable.indexOf("undo") === -1) {
                command = "redo";
              }
              break;
            case "[":
              if (options.shortcutsDisable.indexOf("indent") === -1) {
                command = options.rtl ? "indent" : "outdent";
              }
              break;
            case "]":
              if (options.shortcutsDisable.indexOf("indent") === -1) {
                command = options.rtl ? "outdent" : "indent";
              }
              break;
          }
          if (!command)
            return false;
          core.commandHandler(core.commandMap[command], command);
          return true;
        },
        _applyTagEffects: function _applyTagEffects() {
          var selectionNode = core.getSelectionNode();
          if (selectionNode === core.effectNode)
            return;
          core.effectNode = selectionNode;
          var marginDir = options.rtl ? "marginRight" : "marginLeft";
          var commandMap = core.commandMap;
          var classOnCheck = this._onButtonsCheck;
          var commandMapNodes = [];
          var currentNodes = [];
          var activePlugins = core.activePlugins;
          var cLen = activePlugins.length;
          var nodeName = "";
          while (selectionNode.firstChild) {
            selectionNode = selectionNode.firstChild;
          }
          for (var element = selectionNode; !util.isWysiwygDiv(element); element = element.parentNode) {
            if (!element)
              break;
            if (element.nodeType !== 1 || util.isBreak(element))
              continue;
            nodeName = element.nodeName.toUpperCase();
            currentNodes.push(nodeName);
            for (var c = 0, name; c < cLen; c++) {
              name = activePlugins[c];
              if (commandMapNodes.indexOf(name) === -1 && plugins[name].active.call(core, element)) {
                commandMapNodes.push(name);
              }
            }
            if (util.isFormatElement(element)) {
              if (commandMapNodes.indexOf("OUTDENT") === -1 && commandMap.OUTDENT) {
                if (util.isListCell(element) || element.style[marginDir] && util.getNumber(element.style[marginDir], 0) > 0) {
                  commandMapNodes.push("OUTDENT");
                  commandMap.OUTDENT.removeAttribute("disabled");
                }
              }
              if (commandMapNodes.indexOf("INDENT") === -1 && commandMap.INDENT) {
                commandMapNodes.push("INDENT");
                if (util.isListCell(element) && !element.previousElementSibling) {
                  commandMap.INDENT.setAttribute("disabled", true);
                } else {
                  commandMap.INDENT.removeAttribute("disabled");
                }
              }
              continue;
            }
            if (classOnCheck.test(nodeName)) {
              commandMapNodes.push(nodeName);
              util.addClass(commandMap[nodeName], "active");
            }
          }
          for (var key in commandMap) {
            if (commandMapNodes.indexOf(key) > -1 || !util.hasOwn(commandMap, key))
              continue;
            if (activePlugins.indexOf(key) > -1) {
              plugins[key].active.call(core, null);
            } else if (commandMap.OUTDENT && /^OUTDENT$/i.test(key)) {
              commandMap.OUTDENT.setAttribute("disabled", true);
            } else if (commandMap.INDENT && /^INDENT$/i.test(key)) {
              commandMap.INDENT.removeAttribute("disabled");
            } else {
              util.removeClass(commandMap[key], "active");
            }
          }
          core._variable.currentNodes = currentNodes.reverse();
          core._variable.currentNodesMap = commandMapNodes;
          if (options.showPathLabel)
            context.element.navigation.textContent = core._variable.currentNodes.join(" > ");
        },
        _cancelCaptionEdit: function _cancelCaptionEdit() {
          this.setAttribute("contenteditable", false);
          this.removeEventListener("blur", event._cancelCaptionEdit);
        },
        _buttonsEventHandler: function _buttonsEventHandler(e) {
          var target = e.target;
          if (core._bindControllersOff)
            e.stopPropagation();
          if (/^(input|textarea|select|option)$/i.test(target.nodeName)) {
            core._antiBlur = false;
          } else {
            e.preventDefault();
          }
          if (util.getParentElement(target, ".ke-submenu")) {
            e.stopPropagation();
            core._notHideToolbar = true;
          } else {
            var command = target.getAttribute("data-command");
            var className = target.className;
            while (!command && !/ke-menu-list/.test(className) && !/kothing-editor-common/.test(className)) {
              target = target.parentNode;
              command = target.getAttribute("data-command");
              className = target.className;
            }
            if (command === core._submenuName || command === core._containerName) {
              e.stopPropagation();
            }
          }
        },
        onClick_toolbar: function onClick_toolbar(e) {
          var target = e.target;
          var display = target.getAttribute("data-display");
          var command = target.getAttribute("data-command");
          var className = target.className;
          core.controllersOff();
          while (target.parentNode && !command && !/ke-menu-list/.test(className) && !/ke-toolbar/.test(className)) {
            target = target.parentNode;
            command = target.getAttribute("data-command");
            display = target.getAttribute("data-display");
            className = target.className;
          }
          if (!command && !display)
            return;
          if (target.disabled)
            return;
          if (!core.hasFocus)
            core.nativeFocus();
          if (!core._variable.isCodeView)
            core._editorRange();
          core.actionCall(command, display, target);
        },
        onMouseDown_wysiwyg: function onMouseDown_wysiwyg(e) {
          if (util.isNonEditable(context.element.wysiwyg))
            return;
          if (typeof functions.onMouseDown === "function" && functions.onMouseDown(e, core) === false)
            return;
          var tableCell = util.getParentElement(e.target, util.isCell);
          if (tableCell) {
            var tablePlugin = core.plugins.table;
            if (tablePlugin && tableCell !== tablePlugin._fixedCell && !tablePlugin._shift) {
              core.callPlugin("table", function() {
                tablePlugin.onTableCellMultiSelect.call(core, tableCell, false);
              }, null);
            }
          }
          if (core._isBalloon) {
            event._hideToolbar();
          }
          if (/FIGURE/i.test(e.target.nodeName))
            e.preventDefault();
        },
        onClick_wysiwyg: function onClick_wysiwyg(e) {
          var targetElement = e.target;
          if (util.isNonEditable(context.element.wysiwyg))
            return;
          if (typeof functions.onClick === "function" && functions.onClick(e, core) === false)
            return;
          var fileComponentInfo = core.getFileComponent(targetElement);
          if (fileComponentInfo) {
            e.preventDefault();
            core.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);
            return;
          }
          var figcaption = util.getParentElement(targetElement, "FIGCAPTION");
          if (util.isNonEditable(figcaption)) {
            e.preventDefault();
            figcaption.setAttribute("contenteditable", true);
            figcaption.focus();
            if (core._isInline && !core._inlineToolbarAttr.isShow) {
              event._showToolbarInline();
              var hideToolbar = function hideToolbar2() {
                event._hideToolbar();
                figcaption.removeEventListener("blur", hideToolbar2);
              };
              figcaption.addEventListener("blur", hideToolbar);
            }
          }
          _w.setTimeout(core._editorRange.bind(core));
          core._editorRange();
          var selectionNode = core.getSelectionNode();
          var formatEl = util.getFormatElement(selectionNode, null);
          var rangeEl = util.getRangeFormatElement(selectionNode, null);
          if ((!formatEl || formatEl === rangeEl) && !util.isNonEditable(targetElement) && !util.isList(rangeEl)) {
            var range = core.getRange();
            if (util.getFormatElement(range.startContainer) === util.getFormatElement(range.endContainer)) {
              if (util.isList(rangeEl)) {
                e.preventDefault();
                var oLi = util.createElement("LI");
                var prevLi = selectionNode.nextElementSibling;
                oLi.appendChild(selectionNode);
                rangeEl.insertBefore(oLi, prevLi);
                core.focus();
              } else if (!util.isWysiwygDiv(selectionNode) && !util.isComponent(selectionNode) && (!util.isTable(selectionNode) || util.isCell(selectionNode))) {
                e.preventDefault();
                core._setDefaultFormat(util.isRangeFormatElement(rangeEl) ? "DIV" : options.defaultTag);
                core.focus();
              } else {
                event._applyTagEffects();
              }
            }
          } else {
            event._applyTagEffects();
          }
          if (core._isBalloon)
            _w.setTimeout(event._toggleToolbarBalloon);
        },
        _balloonDelay: null,
        _showToolbarBalloonDelay: function _showToolbarBalloonDelay() {
          if (event._balloonDelay) {
            _w.clearTimeout(event._balloonDelay);
          }
          event._balloonDelay = _w.setTimeout(function() {
            _w.clearTimeout(this._balloonDelay);
            this._balloonDelay = null;
            this._showToolbarBalloon();
          }.bind(event), 350);
        },
        _toggleToolbarBalloon: function _toggleToolbarBalloon() {
          core._editorRange();
          var range = core.getRange();
          if (core._bindControllersOff || !core._isBalloonAlways && range.collapsed)
            event._hideToolbar();
          else
            event._showToolbarBalloon(range);
        },
        _showToolbarBalloon: function _showToolbarBalloon(rangeObj) {
          if (!core._isBalloon)
            return;
          var range = rangeObj || core.getRange();
          var toolbar = context.element.toolbar;
          var topArea = context.element.topArea;
          var selection = core.getSelection();
          var isDirTop;
          if (core._isBalloonAlways && range.collapsed) {
            isDirTop = true;
          } else if (selection.focusNode === selection.anchorNode) {
            isDirTop = selection.focusOffset < selection.anchorOffset;
          } else {
            var childNodes = util.getListChildNodes(range.commonAncestorContainer, null);
            isDirTop = util.getArrayIndex(childNodes, selection.focusNode) < util.getArrayIndex(childNodes, selection.anchorNode);
          }
          var rects = range.getClientRects();
          rects = rects[isDirTop ? 0 : rects.length - 1];
          var globalScroll = core.getGlobalScrollOffset();
          var scrollLeft = globalScroll.left;
          var scrollTop = globalScroll.top;
          var editorWidth = topArea.offsetWidth;
          var offsets = event._getEditorOffsets(null);
          var stickyTop = offsets.top;
          var editorLeft = offsets.left;
          toolbar.style.top = "-10000px";
          toolbar.style.visibility = "hidden";
          toolbar.style.display = "block";
          if (!rects) {
            var node = core.getSelectionNode();
            if (util.isFormatElement(node)) {
              var zeroWidth = util.createTextNode(util.zeroWidthSpace);
              core.insertNode(zeroWidth, null, false);
              core.setRange(zeroWidth, 1, zeroWidth, 1);
              core._editorRange();
              rects = core.getRange().getClientRects();
              rects = rects[isDirTop ? 0 : rects.length - 1];
            }
            if (!rects) {
              var nodeOffset = util.getOffset(node, context.element.wysiwygFrame);
              rects = {
                left: nodeOffset.left,
                top: nodeOffset.top,
                right: nodeOffset.left,
                bottom: nodeOffset.top + node.offsetHeight,
                noText: true
              };
              scrollLeft = 0;
              scrollTop = 0;
            }
            isDirTop = true;
          }
          var arrowMargin = _w.Math.round(context.element.arrow.offsetWidth / 2);
          var toolbarWidth = toolbar.offsetWidth;
          var toolbarHeight = toolbar.offsetHeight;
          var iframeRects = /iframe/i.test(context.element.wysiwygFrame.nodeName) ? context.element.wysiwygFrame.getClientRects()[0] : null;
          if (iframeRects) {
            rects = {
              left: rects.left + iframeRects.left,
              top: rects.top + iframeRects.top,
              right: rects.right + iframeRects.right - iframeRects.width,
              bottom: rects.bottom + iframeRects.bottom - iframeRects.height
            };
          }
          event._setToolbarOffset(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin);
          if (toolbarWidth !== toolbar.offsetWidth || toolbarHeight !== toolbar.offsetHeight) {
            event._setToolbarOffset(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin);
          }
          if (options.toolbarContainer) {
            var editorParent = topArea.parentElement;
            var container = options.toolbarContainer;
            var left = container.offsetLeft;
            var top = container.offsetTop;
            while (!container.parentElement.contains(editorParent) || !/^(BODY|HTML)$/i.test(container.parentElement.nodeName)) {
              container = container.offsetParent;
              left += container.offsetLeft;
              top += container.offsetTop;
            }
            toolbar.style.left = toolbar.offsetLeft - left + topArea.offsetLeft + "px";
            toolbar.style.top = toolbar.offsetTop - top + topArea.offsetTop + "px";
          }
          toolbar.style.visibility = "";
        },
        _setToolbarOffset: function _setToolbarOffset(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin) {
          var padding = 1;
          var toolbarWidth = toolbar.offsetWidth;
          var toolbarHeight = rects.noText && !isDirTop ? 0 : toolbar.offsetHeight;
          var absoluteLeft = (isDirTop ? rects.left : rects.right) - editorLeft - toolbarWidth / 2 + scrollLeft;
          var overRight = absoluteLeft + toolbarWidth - editorWidth;
          var t = (isDirTop ? rects.top - toolbarHeight - arrowMargin : rects.bottom + arrowMargin) - (rects.noText ? 0 : stickyTop) + scrollTop;
          var l = absoluteLeft < 0 ? padding : overRight < 0 ? absoluteLeft : absoluteLeft - overRight - padding - 1;
          var resetTop = false;
          var space = t + (isDirTop ? event._getEditorOffsets(null).top : toolbar.offsetHeight - context.element.wysiwyg.offsetHeight);
          if (!isDirTop && space > 0 && event._getPageBottomSpace() < space) {
            isDirTop = true;
            resetTop = true;
          } else if (isDirTop && _d.documentElement.offsetTop > space) {
            isDirTop = false;
            resetTop = true;
          }
          if (resetTop)
            t = (isDirTop ? rects.top - toolbarHeight - arrowMargin : rects.bottom + arrowMargin) - (rects.noText ? 0 : stickyTop) + scrollTop;
          toolbar.style.left = _w.Math.floor(l) + "px";
          toolbar.style.top = _w.Math.floor(t) + "px";
          if (isDirTop) {
            util.removeClass(context.element.arrow, "ke-arrow-up");
            util.addClass(context.element.arrow, "ke-arrow-down");
            context.element.arrow.style.top = toolbarHeight + "px";
          } else {
            util.removeClass(context.element.arrow, "ke-arrow-down");
            util.addClass(context.element.arrow, "ke-arrow-up");
            context.element.arrow.style.top = -arrowMargin + "px";
          }
          var arrow_left = _w.Math.floor(toolbarWidth / 2 + (absoluteLeft - l));
          context.element.arrow.style.left = (arrow_left + arrowMargin > toolbar.offsetWidth ? toolbar.offsetWidth - arrowMargin : arrow_left < arrowMargin ? arrowMargin : arrow_left) + "px";
        },
        _showToolbarInline: function _showToolbarInline() {
          if (!core._isInline)
            return;
          var toolbar = context.element.toolbar;
          if (options.toolbarContainer)
            toolbar.style.position = "relative";
          else
            toolbar.style.position = "absolute";
          toolbar.style.visibility = "hidden";
          toolbar.style.display = "block";
          core._inlineToolbarAttr.width = toolbar.style.width = options.toolbarWidth;
          core._inlineToolbarAttr.top = toolbar.style.top = (options.toolbarContainer ? 0 : -1 - toolbar.offsetHeight) + "px";
          if (typeof functions.showInline === "function")
            functions.showInline(toolbar, context, core);
          event.onScroll_window();
          core._inlineToolbarAttr.isShow = true;
          toolbar.style.visibility = "";
        },
        _hideToolbar: function _hideToolbar() {
          if (!core._notHideToolbar && !core._variable.isFullScreen) {
            context.element.toolbar.style.display = "none";
            core._inlineToolbarAttr.isShow = false;
          }
        },
        onInput_wysiwyg: function onInput_wysiwyg(e) {
          core._editorRange();
          if (typeof functions.onInput === "function" && functions.onInput(e, core) === false)
            return;
          var data = (e.data === null ? "" : e.data === void 0 ? " " : e.data) || "";
          if (!core._charCount(data)) {
            e.preventDefault();
            e.stopPropagation();
          }
          core.history.push(true);
        },
        _isUneditableNode: function _isUneditableNode(range, isFront) {
          var container = isFront ? range.startContainer : range.endContainer;
          var offset = isFront ? range.startOffset : range.endOffset;
          var siblingKey = isFront ? "previousSibling" : "nextSibling";
          var isElement = container.nodeType === 1;
          var siblingNode;
          if (isElement) {
            siblingNode = event._isUneditableNode_getSibling(container.childNodes[offset], siblingKey, container);
            return siblingNode && siblingNode.nodeType === 1 && siblingNode.getAttribute("contenteditable") === "false";
          } else {
            siblingNode = event._isUneditableNode_getSibling(container, siblingKey, container);
            return core.isEdgePoint(container, offset, isFront ? "front" : "end") && siblingNode && siblingNode.nodeType === 1 && siblingNode.getAttribute("contenteditable") === "false";
          }
        },
        _isUneditableNode_getSibling: function _isUneditableNode_getSibling(selectNode, siblingKey, container) {
          if (!selectNode)
            return null;
          var siblingNode = selectNode[siblingKey];
          if (!siblingNode) {
            siblingNode = util.getFormatElement(container);
            siblingNode = siblingNode ? siblingNode[siblingKey] : null;
            if (siblingNode && !util.isComponent(siblingNode))
              siblingNode = siblingKey === "previousSibling" ? siblingNode.firstElementChild : siblingNode.lastElementChild;
            else
              return null;
          }
          return siblingNode;
        },
        _onShortcutKey: false,
        onKeyDown_wysiwyg: function onKeyDown_wysiwyg(e) {
          var keyCode = e.keyCode;
          var shift = e.shiftKey;
          var ctrl = e.ctrlKey || e.metaKey || keyCode === 91 || keyCode === 92 || keyCode === 224;
          var alt = e.altKey;
          event._IEisComposing = keyCode === 229;
          core.submenuOff();
          if (core._isBalloon) {
            event._hideToolbar();
          }
          if (typeof functions.onKeyDown === "function" && functions.onKeyDown(e, core) === false)
            return;
          if (ctrl && event._shortcutCommand(keyCode, shift)) {
            event._onShortcutKey = true;
            e.preventDefault();
            e.stopPropagation();
            return false;
          } else if (event._onShortcutKey) {
            event._onShortcutKey = false;
          }
          var selectionNode = core.getSelectionNode();
          var range = core.getRange();
          var selectRange = !range.collapsed || range.startContainer !== range.endContainer;
          var fileComponentName = core._fileManager.pluginRegExp.test(core.currentControllerName) ? core.currentControllerName : "";
          var formatEl = util.getFormatElement(selectionNode, null) || selectionNode;
          var rangeEl = util.getRangeFormatElement(formatEl, null);
          switch (keyCode) {
            case 8:
              if (!selectRange) {
                if (fileComponentName) {
                  e.preventDefault();
                  e.stopPropagation();
                  core.plugins[fileComponentName].destroy.call(core);
                  break;
                }
              }
              if (selectRange && event._hardDelete()) {
                e.preventDefault();
                e.stopPropagation();
                break;
              }
              if (!util.isFormatElement(formatEl) && !context.element.wysiwyg.firstElementChild && !util.isComponent(selectionNode)) {
                e.preventDefault();
                e.stopPropagation();
                core._setDefaultFormat(options.defaultTag);
                return false;
              }
              if (!selectRange && !formatEl.previousElementSibling && range.startOffset === 0 && !selectionNode.previousSibling && !util.isListCell(formatEl) && util.isFormatElement(formatEl) && (!util.isFreeFormatElement(formatEl) || util.isClosureFreeFormatElement(formatEl))) {
                if (util.isClosureRangeFormatElement(formatEl.parentNode)) {
                  e.preventDefault();
                  e.stopPropagation();
                  return false;
                }
                if (util.isWysiwygDiv(formatEl.parentNode) && formatEl.childNodes.length <= 1 && (!formatEl.firstChild || util.onlyZeroWidthSpace(formatEl.textContent))) {
                  e.preventDefault();
                  e.stopPropagation();
                  if (formatEl.nodeName.toUpperCase() === options.defaultTag.toUpperCase()) {
                    formatEl.innerHTML = "<br>";
                    var attrs = formatEl.attributes;
                    while (attrs[0]) {
                      formatEl.removeAttribute(attrs[0].name);
                    }
                  } else {
                    var defaultFormat = util.createElement(options.defaultTag);
                    defaultFormat.innerHTML = "<br>";
                    formatEl.parentElement.replaceChild(defaultFormat, formatEl);
                  }
                  core.nativeFocus();
                  return false;
                }
              }
              if (formatEl && range.startContainer === range.endContainer && selectionNode.nodeType === 3 && !util.isFormatElement(selectionNode.parentNode)) {
                if (range.collapsed ? selectionNode.textContent.length === 1 : range.endOffset - range.startOffset === selectionNode.textContent.length) {
                  e.preventDefault();
                  var offset = null;
                  var prev = selectionNode.parentNode.previousSibling;
                  var next = selectionNode.parentNode.nextSibling;
                  if (!prev) {
                    if (!next) {
                      prev = util.createElement("BR");
                      formatEl.appendChild(prev);
                    } else {
                      prev = next;
                      offset = 0;
                    }
                  }
                  selectionNode.textContent = "";
                  util.removeItemAllParents(selectionNode, null, formatEl);
                  offset = typeof offset === "number" ? offset : prev.nodeType === 3 ? prev.textContent.length : 1;
                  core.setRange(prev, offset, prev, offset);
                  break;
                }
              }
              if (event._isUneditableNode(range, true)) {
                e.preventDefault();
                e.stopPropagation();
                break;
              }
              var commonCon = range.commonAncestorContainer;
              formatEl = util.getFormatElement(range.startContainer, null);
              rangeEl = util.getRangeFormatElement(formatEl, null);
              if (rangeEl && formatEl && !util.isCell(rangeEl) && !/^FIGCAPTION$/i.test(rangeEl.nodeName)) {
                if (util.isListCell(formatEl) && util.isList(rangeEl) && (util.isListCell(rangeEl.parentNode) || formatEl.previousElementSibling) && (selectionNode === formatEl || selectionNode.nodeType === 3 && (!selectionNode.previousSibling || util.isList(selectionNode.previousSibling))) && (util.getFormatElement(range.startContainer, null) !== util.getFormatElement(range.endContainer, null) ? rangeEl.contains(range.startContainer) : range.startOffset === 0 && range.collapsed)) {
                  if (range.startContainer !== range.endContainer) {
                    e.preventDefault();
                    core.removeNode();
                    if (range.startContainer.nodeType === 3) {
                      core.setRange(range.startContainer, range.startContainer.textContent.length, range.startContainer, range.startContainer.textContent.length);
                    }
                    core.history.push(true);
                  } else {
                    var _prev = formatEl.previousElementSibling || rangeEl.parentNode;
                    if (util.isListCell(_prev)) {
                      e.preventDefault();
                      var prevLast = _prev;
                      if (!_prev.contains(formatEl) && util.isListCell(prevLast) && util.isList(prevLast.lastElementChild)) {
                        prevLast = prevLast.lastElementChild.lastElementChild;
                        while (util.isListCell(prevLast) && util.isList(prevLast.lastElementChild)) {
                          prevLast = prevLast.lastElementChild && prevLast.lastElementChild.lastElementChild;
                        }
                        _prev = prevLast;
                      }
                      var con = _prev === rangeEl.parentNode ? rangeEl.previousSibling : _prev.lastChild;
                      if (!con) {
                        con = util.createTextNode(util.zeroWidthSpace);
                        rangeEl.parentNode.insertBefore(con, rangeEl.parentNode.firstChild);
                      }
                      var _offset = con.nodeType === 3 ? con.textContent.length : 1;
                      var children = formatEl.childNodes;
                      var after = con;
                      var child = children[0];
                      while (child = children[0]) {
                        _prev.insertBefore(child, after.nextSibling);
                        after = child;
                      }
                      util.removeItem(formatEl);
                      if (rangeEl.children.length === 0)
                        util.removeItem(rangeEl);
                      core.setRange(con, _offset, con, _offset);
                      core.history.push(true);
                    }
                  }
                  break;
                }
                if (!selectRange && range.startOffset === 0) {
                  var detach = true;
                  var comm = commonCon;
                  while (comm && comm !== rangeEl && !util.isWysiwygDiv(comm)) {
                    if (comm.previousSibling) {
                      if (comm.previousSibling.nodeType === 1 || !util.onlyZeroWidthSpace(comm.previousSibling.textContent.trim())) {
                        detach = false;
                        break;
                      }
                    }
                    comm = comm.parentNode;
                  }
                  if (detach && rangeEl.parentNode) {
                    e.preventDefault();
                    core.detachRangeFormatElement(rangeEl, util.isListCell(formatEl) ? [formatEl] : null, null, false, false);
                    core.history.push(true);
                    break;
                  }
                }
              }
              if (!selectRange && formatEl && (range.startOffset === 0 || (selectionNode === formatEl ? !!formatEl.childNodes[range.startOffset] : false))) {
                var sel = selectionNode === formatEl ? formatEl.childNodes[range.startOffset] : selectionNode;
                var _prev2 = formatEl.previousSibling;
                var ignoreZWS = (commonCon.nodeType === 3 || util.isBreak(commonCon)) && !commonCon.previousSibling && range.startOffset === 0;
                if (!sel.previousSibling && (util.isComponent(commonCon.previousSibling) || ignoreZWS && util.isComponent(_prev2))) {
                  var fileComponentInfo = core.getFileComponent(_prev2);
                  if (fileComponentInfo) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (formatEl.textContent.length === 0)
                      util.removeItem(formatEl);
                    if (core.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName) === false)
                      core.blur();
                  } else if (util.isComponent(_prev2)) {
                    e.preventDefault();
                    e.stopPropagation();
                    util.removeItem(_prev2);
                  }
                  break;
                }
                if (util.isNonEditable(sel.previousSibling)) {
                  e.preventDefault();
                  e.stopPropagation();
                  util.removeItem(sel.previousSibling);
                  break;
                }
              }
              break;
            case 46:
              if (fileComponentName) {
                e.preventDefault();
                e.stopPropagation();
                core.plugins[fileComponentName].destroy.call(core);
                break;
              }
              if (selectRange && event._hardDelete()) {
                e.preventDefault();
                e.stopPropagation();
                break;
              }
              if (event._isUneditableNode(range, false)) {
                e.preventDefault();
                e.stopPropagation();
                break;
              }
              if ((util.isFormatElement(selectionNode) || selectionNode.nextSibling === null || util.onlyZeroWidthSpace(selectionNode.nextSibling) && selectionNode.nextSibling.nextSibling === null) && range.startOffset === selectionNode.textContent.length) {
                var nextEl = formatEl.nextElementSibling;
                if (!nextEl)
                  break;
                if (util.isComponent(nextEl)) {
                  e.preventDefault();
                  if (util.onlyZeroWidthSpace(formatEl)) {
                    util.removeItem(formatEl);
                    if (util.isTable(nextEl)) {
                      var cell = util.getChildElement(nextEl, util.isCell, false);
                      cell = cell.firstElementChild || cell;
                      core.setRange(cell, 0, cell, 0);
                      break;
                    }
                  }
                  var _fileComponentInfo = core.getFileComponent(nextEl);
                  if (_fileComponentInfo) {
                    e.stopPropagation();
                    if (core.selectComponent(_fileComponentInfo.target, _fileComponentInfo.pluginName) === false)
                      core.blur();
                  } else if (util.isComponent(nextEl)) {
                    e.stopPropagation();
                    util.removeItem(nextEl);
                  }
                  break;
                }
              }
              if (!selectRange && (core.isEdgePoint(range.endContainer, range.endOffset) || (selectionNode === formatEl ? !!formatEl.childNodes[range.startOffset] : false))) {
                var _sel = selectionNode === formatEl ? formatEl.childNodes[range.startOffset] : selectionNode;
                if (util.isNonEditable(_sel.nextSibling)) {
                  e.preventDefault();
                  e.stopPropagation();
                  util.removeItem(_sel.nextSibling);
                  break;
                }
              }
              formatEl = util.getFormatElement(range.startContainer, null);
              rangeEl = util.getRangeFormatElement(formatEl, null);
              if (util.isListCell(formatEl) && util.isList(rangeEl) && (selectionNode === formatEl || selectionNode.nodeType === 3 && (!selectionNode.nextSibling || util.isList(selectionNode.nextSibling)) && (util.getFormatElement(range.startContainer, null) !== util.getFormatElement(range.endContainer, null) ? rangeEl.contains(range.endContainer) : range.endOffset === selectionNode.textContent.length && range.collapsed))) {
                if (range.startContainer !== range.endContainer)
                  core.removeNode();
                var _next = util.getArrayItem(formatEl.children, util.isList, false);
                _next = _next || formatEl.nextElementSibling || rangeEl.parentNode.nextElementSibling;
                if (_next && (util.isList(_next) || util.getArrayItem(_next.children, util.isList, false))) {
                  e.preventDefault();
                  var _con, _children;
                  if (util.isList(_next)) {
                    var _child2 = _next.firstElementChild;
                    _children = _child2.childNodes;
                    _con = _children[0];
                    while (_children[0]) {
                      formatEl.insertBefore(_children[0], _next);
                    }
                    util.removeItem(_child2);
                  } else {
                    _con = _next.firstChild;
                    _children = _next.childNodes;
                    while (_children[0]) {
                      formatEl.appendChild(_children[0]);
                    }
                    util.removeItem(_next);
                  }
                  core.setRange(_con, 0, _con, 0);
                  core.history.push(true);
                }
                break;
              }
              break;
            case 9:
              if (fileComponentName || options.tabDisable)
                break;
              e.preventDefault();
              if (ctrl || alt || util.isWysiwygDiv(selectionNode))
                break;
              var isEdge = !range.collapsed || core.isEdgePoint(range.startContainer, range.startOffset);
              var selectedFormats = core.getSelectedElements(null);
              selectionNode = core.getSelectionNode();
              var cells = [];
              var lines = [];
              var fc = util.isListCell(selectedFormats[0]), lc = util.isListCell(selectedFormats[selectedFormats.length - 1]);
              var r = {
                sc: range.startContainer,
                so: range.startOffset,
                ec: range.endContainer,
                eo: range.endOffset
              };
              for (var i = 0, len = selectedFormats.length, f; i < len; i++) {
                f = selectedFormats[i];
                if (util.isListCell(f)) {
                  if (!f.previousElementSibling && !shift) {
                    continue;
                  } else {
                    cells.push(f);
                  }
                } else {
                  lines.push(f);
                }
              }
              if (cells.length > 0 && isEdge && core.plugins.list) {
                r = core.plugins.list.editInsideList.call(core, shift, cells);
              } else {
                var tableCell = util.getParentElement(selectionNode, util.isCell);
                if (tableCell && isEdge) {
                  var table = util.getParentElement(tableCell, "table");
                  var _cells = util.getListChildren(table, util.isCell);
                  var idx = shift ? util.prevIdx(_cells, tableCell) : util.nextIdx(_cells, tableCell);
                  if (idx === _cells.length && !shift)
                    idx = 0;
                  if (idx === -1 && shift)
                    idx = _cells.length - 1;
                  var moveCell = _cells[idx];
                  if (!moveCell)
                    break;
                  moveCell = moveCell.firstElementChild || moveCell;
                  core.setRange(moveCell, 0, moveCell, 0);
                  break;
                }
                lines = lines.concat(cells);
                fc = lc = null;
              }
              if (lines.length > 0) {
                if (!shift) {
                  var tabText = util.createTextNode(new _w.Array(core._variable.tabSize + 1).join("\xA0"));
                  if (lines.length === 1) {
                    var textRange = core.insertNode(tabText, null, true);
                    if (!textRange)
                      return false;
                    if (!fc) {
                      r.sc = tabText;
                      r.so = textRange.endOffset;
                    }
                    if (!lc) {
                      r.ec = tabText;
                      r.eo = textRange.endOffset;
                    }
                  } else {
                    var _len13 = lines.length - 1;
                    for (var _i25 = 0, _child3; _i25 <= _len13; _i25++) {
                      _child3 = lines[_i25].firstChild;
                      if (!_child3)
                        continue;
                      if (util.isBreak(_child3)) {
                        lines[_i25].insertBefore(tabText.cloneNode(false), _child3);
                      } else {
                        _child3.textContent = tabText.textContent + _child3.textContent;
                      }
                    }
                    var firstChild = util.getChildElement(lines[0], "text", false);
                    var endChild = util.getChildElement(lines[_len13], "text", true);
                    if (!fc && firstChild) {
                      r.sc = firstChild;
                      r.so = 0;
                    }
                    if (!lc && endChild) {
                      r.ec = endChild;
                      r.eo = endChild.textContent.length;
                    }
                  }
                } else {
                  var _len14 = lines.length - 1;
                  for (var _i26 = 0, line; _i26 <= _len14; _i26++) {
                    line = lines[_i26].childNodes;
                    for (var c = 0, cLen = line.length, _child4; c < cLen; c++) {
                      _child4 = line[c];
                      if (!_child4)
                        break;
                      if (util.onlyZeroWidthSpace(_child4))
                        continue;
                      if (/^\s{1,4}$/.test(_child4.textContent)) {
                        util.removeItem(_child4);
                      } else if (/^\s{1,4}/.test(_child4.textContent)) {
                        _child4.textContent = _child4.textContent.replace(/^\s{1,4}/, "");
                      }
                      break;
                    }
                  }
                  var _firstChild = util.getChildElement(lines[0], "text", false);
                  var _endChild = util.getChildElement(lines[_len14], "text", true);
                  if (!fc && _firstChild) {
                    r.sc = _firstChild;
                    r.so = 0;
                  }
                  if (!lc && _endChild) {
                    r.ec = _endChild;
                    r.eo = _endChild.textContent.length;
                  }
                }
              }
              core.setRange(r.sc, r.so, r.ec, r.eo);
              core.history.push(false);
              break;
            case 13:
              var freeFormatEl = util.getFreeFormatElement(selectionNode, null);
              if (core._charTypeHTML) {
                var enterHTML = "";
                if (!shift && freeFormatEl || shift) {
                  enterHTML = "<br>";
                } else {
                  enterHTML = "<" + formatEl.nodeName + "><br></" + formatEl.nodeName + ">";
                }
                if (!core.checkCharCount(enterHTML, "byte-html")) {
                  e.preventDefault();
                  return false;
                }
              }
              if (!shift) {
                var formatInners = core._isEdgeFormat(range.endContainer, range.endOffset, "end");
                if (formatInners && /^H[1-6]$/i.test(formatEl.nodeName) || /^HR$/i.test(formatEl.nodeName)) {
                  e.preventDefault();
                  var temp = null;
                  var newFormat = core.appendFormatTag(formatEl, options.defaultTag);
                  if (formatInners && formatInners.length > 0) {
                    temp = formatInners.pop();
                    var innerNode = temp;
                    while (formatInners.length > 0) {
                      temp = temp.appendChild(formatInners.pop());
                    }
                    newFormat.appendChild(innerNode);
                  }
                  temp = !temp ? newFormat.firstChild : temp.appendChild(newFormat.firstChild);
                  core.setRange(temp, 0, temp, 0);
                  break;
                }
                if (freeFormatEl) {
                  e.preventDefault();
                  var selectionFormat = selectionNode === freeFormatEl;
                  var wSelection = core.getSelection();
                  var _children2 = selectionNode.childNodes, _offset2 = wSelection.focusOffset, _prev3 = selectionNode.previousElementSibling, _next2 = selectionNode.nextSibling;
                  if (!util.isClosureFreeFormatElement(freeFormatEl) && !!_children2 && (selectionFormat && range.collapsed && _children2.length - 1 <= _offset2 + 1 && util.isBreak(_children2[_offset2]) && (!_children2[_offset2 + 1] || (!_children2[_offset2 + 2] || util.onlyZeroWidthSpace(_children2[_offset2 + 2].textContent)) && _children2[_offset2 + 1].nodeType === 3 && util.onlyZeroWidthSpace(_children2[_offset2 + 1].textContent)) && _offset2 > 0 && util.isBreak(_children2[_offset2 - 1]) || !selectionFormat && util.onlyZeroWidthSpace(selectionNode.textContent) && util.isBreak(_prev3) && (util.isBreak(_prev3.previousSibling) || !util.onlyZeroWidthSpace(_prev3.previousSibling.textContent)) && (!_next2 || !util.isBreak(_next2) && util.onlyZeroWidthSpace(_next2.textContent)))) {
                    if (selectionFormat)
                      util.removeItem(_children2[_offset2 - 1]);
                    else
                      util.removeItem(selectionNode);
                    var newEl = core.appendFormatTag(freeFormatEl, util.isFormatElement(freeFormatEl.nextElementSibling) ? freeFormatEl.nextElementSibling : null);
                    util.copyFormatAttributes(newEl, freeFormatEl);
                    core.setRange(newEl, 1, newEl, 1);
                    break;
                  }
                  if (selectionFormat) {
                    functions.insertHTML(range.collapsed && util.isBreak(range.startContainer.childNodes[range.startOffset - 1]) ? "<br>" : "<br><br>", true, false);
                    var focusNode = wSelection.focusNode;
                    var wOffset = wSelection.focusOffset;
                    if (freeFormatEl === focusNode) {
                      focusNode = focusNode.childNodes[wOffset - _offset2 > 1 ? wOffset - 1 : wOffset];
                    }
                    core.setRange(focusNode, 1, focusNode, 1);
                  } else {
                    var focusNext = wSelection.focusNode.nextSibling;
                    var br = util.createElement("BR");
                    core.insertNode(br, null, false);
                    var brPrev = br.previousSibling, brNext = br.nextSibling;
                    if (!util.isBreak(focusNext) && !util.isBreak(brPrev) && (!brNext || util.onlyZeroWidthSpace(brNext))) {
                      br.parentNode.insertBefore(br.cloneNode(false), br);
                      core.setRange(br, 1, br, 1);
                    } else {
                      core.setRange(brNext, 0, brNext, 0);
                    }
                  }
                  event._onShortcutKey = true;
                  break;
                }
              }
              if (selectRange)
                break;
              if (rangeEl && formatEl && !util.isCell(rangeEl) && !/^FIGCAPTION$/i.test(rangeEl.nodeName)) {
                var _range = core.getRange();
                if (core.isEdgePoint(_range.endContainer, _range.endOffset) && util.isList(selectionNode.nextSibling)) {
                  e.preventDefault();
                  var _newEl = util.createElement("LI");
                  var _br2 = util.createElement("BR");
                  _newEl.appendChild(_br2);
                  formatEl.parentNode.insertBefore(_newEl, formatEl.nextElementSibling);
                  _newEl.appendChild(selectionNode.nextSibling);
                  core.setRange(_br2, 1, _br2, 1);
                  break;
                }
                if ((_range.commonAncestorContainer.nodeType === 3 ? !_range.commonAncestorContainer.nextElementSibling : true) && util.onlyZeroWidthSpace(formatEl.innerText.trim())) {
                  e.preventDefault();
                  var _newEl2 = null;
                  if (util.isListCell(rangeEl.parentNode)) {
                    rangeEl = formatEl.parentNode.parentNode.parentNode;
                    _newEl2 = util.splitElement(formatEl, null, util.getElementDepth(formatEl) - 2);
                    if (!_newEl2) {
                      var newListCell = util.createElement("LI");
                      newListCell.innerHTML = "<br>";
                      rangeEl.insertBefore(newListCell, _newEl2);
                      _newEl2 = newListCell;
                    }
                  } else {
                    var _newFormat = util.isCell(rangeEl.parentNode) ? "DIV" : util.isList(rangeEl.parentNode) ? "LI" : util.isFormatElement(rangeEl.nextElementSibling) ? rangeEl.nextElementSibling.nodeName : util.isFormatElement(rangeEl.previousElementSibling) ? rangeEl.previousElementSibling.nodeName : options.defaultTag;
                    _newEl2 = util.createElement(_newFormat);
                    var edge = core.detachRangeFormatElement(rangeEl, [formatEl], null, true, true);
                    edge.cc.insertBefore(_newEl2, edge.ec);
                  }
                  _newEl2.innerHTML = "<br>";
                  util.copyFormatAttributes(_newEl2, formatEl);
                  util.removeItemAllParents(formatEl, null, null);
                  core.setRange(_newEl2, 1, _newEl2, 1);
                  break;
                }
              }
              if (rangeEl && util.getParentElement(rangeEl, "FIGCAPTION") && util.getParentElement(rangeEl, util.isList)) {
                e.preventDefault();
                formatEl = core.appendFormatTag(formatEl, null);
                core.setRange(formatEl, 0, formatEl, 0);
              }
              if (fileComponentName) {
                e.preventDefault();
                e.stopPropagation();
                var compContext = context[fileComponentName];
                var container = compContext._container;
                var sibling = container.previousElementSibling || container.nextElementSibling;
                var _newEl3 = null;
                if (util.isListCell(container.parentNode)) {
                  _newEl3 = util.createElement("BR");
                } else {
                  _newEl3 = util.createElement(util.isFormatElement(sibling) ? sibling.nodeName : options.defaultTag);
                  _newEl3.innerHTML = "<br>";
                }
                container.parentNode.insertBefore(_newEl3, container);
                core.callPlugin(fileComponentName, function() {
                  if (core.selectComponent(compContext._element, fileComponentName) === false)
                    core.blur();
                }, null);
              }
              break;
            case 27:
              if (fileComponentName) {
                e.preventDefault();
                e.stopPropagation();
                core.controllersOff();
                return false;
              }
              break;
          }
          if (shift && keyCode === 16) {
            e.preventDefault();
            e.stopPropagation();
            var tablePlugin = core.plugins.table;
            if (tablePlugin && !tablePlugin._shift && !tablePlugin._ref) {
              var _cell = util.getParentElement(formatEl, util.isCell);
              if (_cell) {
                tablePlugin.onTableCellMultiSelect.call(core, _cell, true);
                return;
              }
            }
          } else if (shift && (util.isOSX_IOS ? alt : ctrl) && keyCode === 32) {
            e.preventDefault();
            e.stopPropagation();
            var nbsp = core.insertNode(util.createTextNode("\xA0"));
            if (nbsp && nbsp.container) {
              core.setRange(nbsp.container, nbsp.endOffset, nbsp.container, nbsp.endOffset);
              return;
            }
          }
          var textKey = !ctrl && !alt && !selectRange && !event._nonTextKeyCode.test(keyCode);
          if (textKey && range.collapsed && range.startContainer === range.endContainer && util.isBreak(range.commonAncestorContainer)) {
            var zeroWidth = util.createTextNode(util.zeroWidthSpace);
            core.insertNode(zeroWidth, null, false);
            core.setRange(zeroWidth, 1, zeroWidth, 1);
          }
        },
        onKeyUp_wysiwyg: function onKeyUp_wysiwyg(e) {
          if (event._onShortcutKey)
            return;
          core._editorRange();
          var range = core.getRange();
          var keyCode = e.keyCode;
          var ctrl = e.ctrlKey || e.metaKey || keyCode === 91 || keyCode === 92 || keyCode === 224;
          var alt = e.altKey;
          var selectionNode = core.getSelectionNode();
          if (core._isBalloon && (core._isBalloonAlways && keyCode !== 27 || !range.collapsed)) {
            if (core._isBalloonAlways) {
              if (keyCode !== 27)
                event._showToolbarBalloonDelay();
            } else {
              event._showToolbarBalloon();
              return;
            }
          }
          if (typeof functions.onKeyUp === "function" && functions.onKeyUp(e, core) === false)
            return;
          if (keyCode === 8 && util.isWysiwygDiv(selectionNode) && selectionNode.textContent === "" && selectionNode.children.length === 0) {
            e.preventDefault();
            e.stopPropagation();
            selectionNode.innerHTML = "";
            var oFormatTag = util.createElement(util.isFormatElement(core._variable.currentNodes[0]) ? core._variable.currentNodes[0] : options.defaultTag);
            oFormatTag.innerHTML = "<br>";
            selectionNode.appendChild(oFormatTag);
            core.setRange(oFormatTag, 0, oFormatTag, 0);
            event._applyTagEffects();
            core.history.push(false);
            return;
          }
          var formatEl = util.getFormatElement(selectionNode, null);
          var rangeEl = util.getRangeFormatElement(selectionNode, null);
          if ((!formatEl && range.collapsed || formatEl === rangeEl) && !util.isComponent(selectionNode) && !util.isList(selectionNode)) {
            core._setDefaultFormat(util.isRangeFormatElement(rangeEl) ? "DIV" : options.defaultTag);
            selectionNode = core.getSelectionNode();
          }
          if (event._directionKeyCode.test(keyCode)) {
            event._applyTagEffects();
          }
          var textKey = !ctrl && !alt && !event._nonTextKeyCode.test(keyCode);
          if (textKey && selectionNode.nodeType === 3 && util.zeroWidthRegExp.test(selectionNode.textContent) && !(e.isComposing !== void 0 ? e.isComposing : event._IEisComposing)) {
            var so = range.startOffset, eo = range.endOffset;
            var frontZeroWidthCnt = (selectionNode.textContent.substring(0, eo).match(event._frontZeroWidthReg) || "").length;
            so = range.startOffset - frontZeroWidthCnt;
            eo = range.endOffset - frontZeroWidthCnt;
            selectionNode.textContent = selectionNode.textContent.replace(util.zeroWidthRegExp, "");
            core.setRange(selectionNode, so < 0 ? 0 : so, selectionNode, eo < 0 ? 0 : eo);
          }
          core._charCount("");
          core.history.push(true);
        },
        onScroll_wysiwyg: function onScroll_wysiwyg(e) {
          core.controllersOff();
          if (core._isBalloon)
            event._hideToolbar();
          if (typeof functions.onScroll === "function")
            functions.onScroll(e, core);
        },
        onFocus_wysiwyg: function onFocus_wysiwyg(e) {
          if (core._antiBlur)
            return;
          core.hasFocus = true;
          event._applyTagEffects();
          if (core._isInline)
            event._showToolbarInline();
          if (typeof functions.onFocus === "function")
            functions.onFocus(e, core);
        },
        onBlur_wysiwyg: function onBlur_wysiwyg(e) {
          if (core._antiBlur || core._variable.isCodeView)
            return;
          core.hasFocus = false;
          core.controllersOff();
          if (core._isInline || core._isBalloon)
            event._hideToolbar();
          if (typeof functions.onBlur === "function")
            functions.onBlur(e, core);
          var commandMap = core.commandMap;
          var activePlugins = core.activePlugins;
          for (var key in commandMap) {
            if (!util.hasOwn(commandMap, key))
              continue;
            if (activePlugins.indexOf(key) > -1) {
              plugins[key].active.call(core, null);
            } else if (commandMap.OUTDENT && /^OUTDENT$/i.test(key)) {
              commandMap.OUTDENT.setAttribute("disabled", true);
            } else if (commandMap.INDENT && /^INDENT$/i.test(key)) {
              commandMap.INDENT.removeAttribute("disabled");
            } else {
              util.removeClass(commandMap[key], "active");
            }
          }
          core._variable.currentNodes = [];
          core._variable.currentNodesMap = [];
          if (options.showPathLabel)
            context.element.navigation.textContent = "";
        },
        onMouseDown_resizingBar: function onMouseDown_resizingBar(e) {
          e.stopPropagation();
          core.submenuOff();
          core.controllersOff();
          var prevHeight = util.getNumber(context.element.wysiwygFrame.style.height, 0);
          core._variable.resizeClientY = e.clientY;
          context.element.resizeBackground.style.display = "block";
          function closureFunc() {
            context.element.resizeBackground.style.display = "none";
            _d.removeEventListener("mousemove", event._resize_editor);
            _d.removeEventListener("mouseup", closureFunc);
            if (typeof functions.onResizeEditor === "function")
              functions.onResizeEditor(util.getNumber(context.element.wysiwygFrame.style.height, 0), prevHeight, core);
          }
          _d.addEventListener("mousemove", event._resize_editor);
          _d.addEventListener("mouseup", closureFunc);
        },
        _resize_editor: function _resize_editor(e) {
          var resizeInterval = context.element.editorArea.offsetHeight + (e.clientY - core._variable.resizeClientY);
          context.element.wysiwygFrame.style.height = context.element.code.style.height = (resizeInterval < core._variable.minResizingSize ? core._variable.minResizingSize : resizeInterval) + "px";
          core._variable.resizeClientY = e.clientY;
        },
        onResize_window: function onResize_window() {
          core.controllersOff();
          var responsiveSize = event._responsiveButtonSize;
          if (responsiveSize) {
            var w = 0;
            if ((core._isBalloon || core._isInline) && options.toolbarWidth === "auto") {
              w = context.element.topArea.offsetWidth;
            } else {
              w = context.element.toolbar.offsetWidth;
            }
            var responsiveWidth = "default";
            for (var i = 1, len = responsiveSize.length; i < len; i++) {
              if (w < responsiveSize[i]) {
                responsiveWidth = responsiveSize[i] + "";
                break;
              }
            }
            if (event._responsiveCurrentSize !== responsiveWidth) {
              event._responsiveCurrentSize = responsiveWidth;
              functions.setToolbarButtons(event._responsiveButtons[responsiveWidth]);
            }
          }
          if (context.element.toolbar.offsetWidth === 0)
            return;
          if (context.fileBrowser && context.fileBrowser.area.style.display === "block") {
            context.fileBrowser.body.style.maxHeight = _w.innerHeight - context.fileBrowser.header.offsetHeight - 50 + "px";
          }
          if (core.submenuActiveButton && core.submenu) {
            core._setMenuPosition(core.submenuActiveButton, core.submenu);
          }
          if (core._variable.isFullScreen) {
            core._variable.innerHeight_fullScreen += _w.innerHeight - context.element.toolbar.offsetHeight - core._variable.innerHeight_fullScreen;
            context.element.editorArea.style.height = core._variable.innerHeight_fullScreen + "px";
            return;
          }
          if (core._variable.isCodeView && core._isInline) {
            event._showToolbarInline();
            return;
          }
          core._iframeAutoHeight();
          if (core._sticky) {
            context.element.toolbar.style.width = context.element.topArea.offsetWidth - 2 + "px";
            event.onScroll_window();
          }
        },
        onScroll_window: function onScroll_window() {
          if (core._variable.isFullScreen || context.element.toolbar.offsetWidth === 0 || options.stickyToolbar < 0)
            return;
          var element = context.element;
          var editorHeight = element.editorArea.offsetHeight;
          var y = (this.scrollY || _d.documentElement.scrollTop) + options.stickyToolbar;
          var editorTop = event._getEditorOffsets(options.toolbarContainer).top - (core._isInline ? element.toolbar.offsetHeight : 0);
          var inlineOffset = core._isInline && y - editorTop > 0 ? y - editorTop - context.element.toolbar.offsetHeight : 0;
          if (y < editorTop) {
            event._offStickyToolbar();
          } else if (y + core._variable.minResizingSize >= editorHeight + editorTop) {
            if (!core._sticky)
              event._onStickyToolbar(inlineOffset);
            element.toolbar.style.top = inlineOffset + editorHeight + editorTop + options.stickyToolbar - y - core._variable.minResizingSize + "px";
          } else if (y >= editorTop) {
            event._onStickyToolbar(inlineOffset);
          }
        },
        _getEditorOffsets: function _getEditorOffsets(container) {
          var offsetEl = container || context.element.topArea;
          var t = 0, l = 0, s = 0;
          while (offsetEl) {
            t += offsetEl.offsetTop;
            l += offsetEl.offsetLeft;
            s += offsetEl.scrollTop;
            offsetEl = offsetEl.offsetParent;
          }
          return {
            top: t,
            left: l,
            scroll: s
          };
        },
        _getPageBottomSpace: function _getPageBottomSpace() {
          return _d.documentElement.scrollHeight - (event._getEditorOffsets(null).top + context.element.topArea.offsetHeight);
        },
        _onStickyToolbar: function _onStickyToolbar(inlineOffset) {
          var element = context.element;
          if (!core._isInline && !options.toolbarContainer) {
            element.stickyDummy.style.height = element.toolbar.offsetHeight + "px";
            element.stickyDummy.style.display = "block";
          }
          element.toolbar.style.top = options.stickyToolbar + inlineOffset + "px";
          element.toolbar.style.width = core._isInline ? core._inlineToolbarAttr.width : element.toolbar.offsetWidth + "px";
          util.addClass(element.toolbar, "ke-toolbar-sticky");
          core._sticky = true;
        },
        _offStickyToolbar: function _offStickyToolbar() {
          var element = context.element;
          element.stickyDummy.style.display = "none";
          element.toolbar.style.top = core._isInline ? core._inlineToolbarAttr.top : "";
          element.toolbar.style.width = core._isInline ? core._inlineToolbarAttr.width : "";
          element.editorArea.style.marginTop = "";
          util.removeClass(element.toolbar, "ke-toolbar-sticky");
          core._sticky = false;
        },
        _codeViewAutoHeight: function _codeViewAutoHeight() {
          context.element.code.style.height = context.element.code.scrollHeight + "px";
        },
        _hardDelete: function _hardDelete() {
          var range = core.getRange();
          var sc = range.startContainer;
          var ec = range.endContainer;
          var sCell = util.getRangeFormatElement(sc);
          var eCell = util.getRangeFormatElement(ec);
          var sIsCell = util.isCell(sCell);
          var eIsCell = util.isCell(eCell);
          if ((sIsCell && !sCell.previousElementSibling && !sCell.parentElement.previousElementSibling || eIsCell && !eCell.nextElementSibling && !eCell.parentElement.nextElementSibling) && sCell !== eCell) {
            if (!sIsCell) {
              util.removeItem(util.getParentElement(eCell, util.isComponent));
            } else if (!eIsCell) {
              util.removeItem(util.getParentElement(sCell, util.isComponent));
            } else {
              util.removeItem(util.getParentElement(sCell, util.isComponent));
              core.nativeFocus();
              return true;
            }
          }
          var sComp = sc.nodeType === 1 ? util.getParentElement(sc, ".ke-component") : null;
          var eComp = ec.nodeType === 1 ? util.getParentElement(ec, ".ke-component") : null;
          if (sComp)
            util.removeItem(sComp);
          if (eComp)
            util.removeItem(eComp);
          return false;
        },
        onPaste_wysiwyg: function onPaste_wysiwyg(e) {
          var clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;
          if (!clipboardData)
            return true;
          return event._dataTransferAction("paste", e, clipboardData);
        },
        _setClipboardComponent: function _setClipboardComponent(e, info, clipboardData) {
          e.preventDefault();
          e.stopPropagation();
          clipboardData.setData("text/html", info.component.outerHTML);
        },
        onCopy_wysiwyg: function onCopy_wysiwyg(e) {
          var clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;
          if (typeof functions.onCopy === "function" && !functions.onCopy(e, clipboardData, core)) {
            e.preventDefault();
            e.stopPropagation();
            return false;
          }
          var info = core.currentFileComponentInfo;
          if (info && !util.isIE) {
            event._setClipboardComponent(e, info, clipboardData);
            util.addClass(info.component, "ke-component-copy");
            _w.setTimeout(function() {
              util.removeClass(info.component, "ke-component-copy");
            }, 150);
          }
        },
        onCut_wysiwyg: function onCut_wysiwyg(e) {
          var clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;
          if (typeof functions.onCut === "function" && !functions.onCut(e, clipboardData, core)) {
            e.preventDefault();
            e.stopPropagation();
            return false;
          }
          var info = core.currentFileComponentInfo;
          if (info && !util.isIE) {
            event._setClipboardComponent(e, info, clipboardData);
            util.removeItem(info.component);
            core.controllersOff();
          }
          _w.setTimeout(function() {
            core.history.push(false);
          });
        },
        onDrop_wysiwyg: function onDrop_wysiwyg(e) {
          var dataTransfer = e.dataTransfer;
          if (!dataTransfer)
            return true;
          if (util.isIE) {
            e.preventDefault();
            e.stopPropagation();
            return false;
          }
          core.removeNode();
          event._setDropLocationSelection(e);
          return event._dataTransferAction("drop", e, dataTransfer);
        },
        _setDropLocationSelection: function _setDropLocationSelection(e) {
          if (e.rangeParent) {
            core.setRange(e.rangeParent, e.rangeOffset, e.rangeParent, e.rangeOffset);
          } else if (core._wd.caretRangeFromPoint) {
            var r = core._wd.caretRangeFromPoint(e.clientX, e.clientY);
            core.setRange(r.startContainer, r.startOffset, r.endContainer, r.endOffset);
          } else {
            var _r2 = core.getRange();
            core.setRange(_r2.startContainer, _r2.startOffset, _r2.endContainer, _r2.endOffset);
          }
        },
        _dataTransferAction: function _dataTransferAction(type, e, data) {
          var plainText, cleanData;
          if (util.isIE) {
            plainText = data.getData("Text");
            var range = core.getRange();
            var tempDiv = util.createElement("DIV");
            var tempRange = {
              sc: range.startContainer,
              so: range.startOffset,
              ec: range.endContainer,
              eo: range.endOffset
            };
            tempDiv.setAttribute("contenteditable", true);
            tempDiv.style.cssText = "position:absolute; top:0; left:0; width:1px; height:1px; overflow:hidden;";
            context.element.relative.appendChild(tempDiv);
            tempDiv.focus();
            _w.setTimeout(function() {
              cleanData = tempDiv.innerHTML;
              util.removeItem(tempDiv);
              core.setRange(tempRange.sc, tempRange.so, tempRange.ec, tempRange.eo);
              event._setClipboardData(type, e, plainText, cleanData, data);
            });
            return true;
          } else {
            plainText = data.getData("text/plain");
            cleanData = data.getData("text/html");
            if (event._setClipboardData(type, e, plainText, cleanData, data) === false) {
              e.preventDefault();
              e.stopPropagation();
              return false;
            }
          }
        },
        _setClipboardData: function _setClipboardData(type, e, plainText, cleanData, data) {
          var MSData = /class=["']*Mso(Normal|List)/i.test(cleanData) || /content=["']*Word.Document/i.test(cleanData) || /content=["']*OneNote.File/i.test(cleanData) || /content=["']*Excel.Sheet/i.test(cleanData);
          var onlyText = !cleanData;
          if (!onlyText) {
            if (MSData) {
              cleanData = cleanData.replace(/\n/g, " ");
              plainText = plainText.replace(/\n/g, " ");
            } else {
              cleanData = (plainText === cleanData ? plainText : cleanData).replace(/\n/g, "<br>");
            }
            cleanData = core.cleanHTML(cleanData, core.pasteTagsWhitelistRegExp);
          } else {
            cleanData = util._HTMLConvertor(plainText).replace(/\n/g, "<br>");
          }
          var maxCharCount = core._charCount(core._charTypeHTML ? cleanData : plainText);
          if (type === "paste" && typeof functions.onPaste === "function") {
            var value = functions.onPaste(e, cleanData, maxCharCount, core);
            if (!value)
              return false;
            if (typeof value === "string")
              cleanData = value;
          }
          if (type === "drop" && typeof functions.onDrop === "function") {
            var _value = functions.onDrop(e, cleanData, maxCharCount, core);
            if (!_value)
              return false;
            if (typeof _value === "string")
              cleanData = _value;
          }
          var files = data.files;
          if (files.length > 0 && !MSData) {
            if (/^image/.test(files[0].type) && core.plugins.image) {
              functions.insertImage(files);
            }
            return false;
          }
          if (!maxCharCount) {
            return false;
          }
          if (cleanData) {
            functions.insertHTML(cleanData, true, false);
            return false;
          }
        },
        onMouseMove_wysiwyg: function onMouseMove_wysiwyg(e) {
          if (core.isDisabled)
            return;
          var component = util.getParentElement(e.target, util.isComponent);
          var lineBreakerStyle = core.lineBreaker.style;
          if (component && !core.currentControllerName) {
            var ctxEl = context.element;
            var scrollTop = 0;
            var el = ctxEl.wysiwyg;
            do {
              scrollTop += el.scrollTop;
              el = el.parentElement;
            } while (el && !/^(BODY|HTML)$/i.test(el.nodeName));
            var wScroll = ctxEl.wysiwyg.scrollTop;
            var offsets = event._getEditorOffsets(null);
            var componentTop = util.getOffset(component, ctxEl.wysiwygFrame).top + wScroll;
            var y = e.pageY + scrollTop + (options.iframe && !options.toolbarContainer ? ctxEl.toolbar.offsetHeight : 0);
            var c = componentTop + (options.iframe ? scrollTop : offsets.top);
            var isList = util.isListCell(component.parentNode);
            var dir = "", top = "";
            if ((isList ? !component.previousSibling : !util.isFormatElement(component.previousElementSibling)) && y < c + 20) {
              top = componentTop;
              dir = "t";
            } else if ((isList ? !component.nextSibling : !util.isFormatElement(component.nextElementSibling)) && y > c + component.offsetHeight - 20) {
              top = componentTop + component.offsetHeight;
              dir = "b";
            } else {
              lineBreakerStyle.display = "none";
              return;
            }
            core._variable._lineBreakComp = component;
            core._variable._lineBreakDir = dir;
            lineBreakerStyle.top = top - wScroll + "px";
            core.lineBreakerButton.style.left = util.getOffset(component).left + component.offsetWidth / 2 - 15 + "px";
            lineBreakerStyle.display = "block";
          } else if (lineBreakerStyle.display !== "none") {
            lineBreakerStyle.display = "none";
          }
        },
        _onMouseDown_lineBreak: function _onMouseDown_lineBreak(e) {
          e.preventDefault();
        },
        _onLineBreak: function _onLineBreak(e) {
          e.preventDefault();
          var component = core._variable._lineBreakComp;
          var dir = !this ? core._variable._lineBreakDir : this;
          var isList = util.isListCell(component.parentNode);
          var format = util.createElement(isList ? "BR" : util.isCell(component.parentNode) ? "DIV" : options.defaultTag);
          if (!isList)
            format.innerHTML = "<br>";
          if (core._charTypeHTML && !core.checkCharCount(format.outerHTML, "byte-html"))
            return;
          component.parentNode.insertBefore(format, dir === "t" ? component : component.nextSibling);
          core.lineBreaker.style.display = "none";
          core._variable._lineBreakComp = null;
          var focusEl = isList ? format : format.firstChild;
          core.setRange(focusEl, 1, focusEl, 1);
          core.history.push(false);
        },
        _addEvent: function _addEvent() {
          var eventWysiwyg = options.iframe ? core._ww : context.element.wysiwyg;
          context.element.toolbar.addEventListener("mousedown", event._buttonsEventHandler, false);
          context.element.menuTray.addEventListener("mousedown", event._buttonsEventHandler, false);
          context.element.toolbar.addEventListener("click", event.onClick_toolbar, false);
          eventWysiwyg.addEventListener("mousedown", event.onMouseDown_wysiwyg, false);
          eventWysiwyg.addEventListener("click", event.onClick_wysiwyg, false);
          eventWysiwyg.addEventListener(util.isIE ? "textinput" : "input", event.onInput_wysiwyg, false);
          eventWysiwyg.addEventListener("keydown", event.onKeyDown_wysiwyg, false);
          eventWysiwyg.addEventListener("keyup", event.onKeyUp_wysiwyg, false);
          eventWysiwyg.addEventListener("paste", event.onPaste_wysiwyg, false);
          eventWysiwyg.addEventListener("copy", event.onCopy_wysiwyg, false);
          eventWysiwyg.addEventListener("cut", event.onCut_wysiwyg, false);
          eventWysiwyg.addEventListener("drop", event.onDrop_wysiwyg, false);
          eventWysiwyg.addEventListener("scroll", event.onScroll_wysiwyg, false);
          eventWysiwyg.addEventListener("focus", event.onFocus_wysiwyg, false);
          eventWysiwyg.addEventListener("blur", event.onBlur_wysiwyg, false);
          event.lineBreakerBind = {
            a: event._onLineBreak.bind(""),
            t: event._onLineBreak.bind("t"),
            b: event._onLineBreak.bind("b")
          };
          eventWysiwyg.addEventListener("mousemove", event.onMouseMove_wysiwyg, false);
          core.lineBreakerButton.addEventListener("mousedown", event._onMouseDown_lineBreak, false);
          core.lineBreakerButton.addEventListener("click", event.lineBreakerBind.a, false);
          context.element.lineBreaker_t.addEventListener("mousedown", event.lineBreakerBind.t, false);
          context.element.lineBreaker_b.addEventListener("mousedown", event.lineBreakerBind.b, false);
          if (core.plugins.table) {
            eventWysiwyg.addEventListener("touchstart", event.onMouseDown_wysiwyg, {
              passive: true,
              useCapture: false
            });
          }
          if (options.height === "auto" && !options.codeMirrorEditor) {
            context.element.code.addEventListener("keydown", event._codeViewAutoHeight, false);
            context.element.code.addEventListener("keyup", event._codeViewAutoHeight, false);
            context.element.code.addEventListener("paste", event._codeViewAutoHeight, false);
          }
          if (context.element.resizingBar) {
            if (/\d+/.test(options.height)) {
              context.element.resizingBar.addEventListener("mousedown", event.onMouseDown_resizingBar, false);
            } else {
              util.addClass(context.element.resizingBar, "ke-resizing-none");
            }
          }
          event._setResponsiveToolbar();
          _w.removeEventListener("resize", event.onResize_window);
          _w.removeEventListener("scroll", event.onScroll_window);
          _w.addEventListener("resize", event.onResize_window, false);
          if (options.stickyToolbar > -1) {
            _w.addEventListener("scroll", event.onScroll_window, false);
          }
        },
        _removeEvent: function _removeEvent() {
          var eventWysiwyg = options.iframe ? core._ww : context.element.wysiwyg;
          context.element.toolbar.removeEventListener("mousedown", event._buttonsEventHandler);
          context.element.menuTray.removeEventListener("mousedown", event._buttonsEventHandler);
          context.element.toolbar.removeEventListener("click", event.onClick_toolbar);
          eventWysiwyg.removeEventListener("mousedown", event.onMouseDown_wysiwyg);
          eventWysiwyg.removeEventListener("click", event.onClick_wysiwyg);
          eventWysiwyg.removeEventListener(util.isIE ? "textinput" : "input", event.onInput_wysiwyg);
          eventWysiwyg.removeEventListener("keydown", event.onKeyDown_wysiwyg);
          eventWysiwyg.removeEventListener("keyup", event.onKeyUp_wysiwyg);
          eventWysiwyg.removeEventListener("paste", event.onPaste_wysiwyg);
          eventWysiwyg.removeEventListener("copy", event.onCopy_wysiwyg);
          eventWysiwyg.removeEventListener("cut", event.onCut_wysiwyg);
          eventWysiwyg.removeEventListener("drop", event.onDrop_wysiwyg);
          eventWysiwyg.removeEventListener("scroll", event.onScroll_wysiwyg);
          eventWysiwyg.removeEventListener("mousemove", event.onMouseMove_wysiwyg);
          core.lineBreakerButton.removeEventListener("mousedown", event._onMouseDown_lineBreak);
          core.lineBreakerButton.removeEventListener("click", event.lineBreakerBind.a);
          context.element.lineBreaker_t.removeEventListener("mousedown", event.lineBreakerBind.t);
          context.element.lineBreaker_b.removeEventListener("mousedown", event.lineBreakerBind.b);
          event.lineBreakerBind = null;
          eventWysiwyg.removeEventListener("touchstart", event.onMouseDown_wysiwyg, {
            passive: true,
            useCapture: false
          });
          eventWysiwyg.removeEventListener("focus", event.onFocus_wysiwyg);
          eventWysiwyg.removeEventListener("blur", event.onBlur_wysiwyg);
          context.element.code.removeEventListener("keydown", event._codeViewAutoHeight);
          context.element.code.removeEventListener("keyup", event._codeViewAutoHeight);
          context.element.code.removeEventListener("paste", event._codeViewAutoHeight);
          if (context.element.resizingBar) {
            context.element.resizingBar.removeEventListener("mousedown", event.onMouseDown_resizingBar);
          }
          _w.removeEventListener("resize", event.onResize_window);
          _w.removeEventListener("scroll", event.onScroll_window);
        },
        _setResponsiveToolbar: function _setResponsiveToolbar() {
          if (_responsiveButtons.length === 0) {
            _responsiveButtons = null;
            return;
          }
          event._responsiveCurrentSize = "default";
          var sizeArray = event._responsiveButtonSize = [];
          var buttonsObj = event._responsiveButtons = {
            default: _responsiveButtons[0]
          };
          for (var i = 1, len = _responsiveButtons.length, size, buttonGroup; i < len; i++) {
            buttonGroup = _responsiveButtons[i];
            size = buttonGroup[0] * 1;
            sizeArray.push(size);
            buttonsObj[size] = buttonGroup[1];
          }
          sizeArray.sort(function(a, b) {
            return a - b;
          }).unshift("default");
        }
      };
      var functions = {
        core,
        util,
        onload: null,
        onScroll: null,
        onMouseDown: null,
        onClick: null,
        onInput: null,
        onKeyDown: null,
        onKeyUp: null,
        onCopy: null,
        onCut: null,
        onFocus: null,
        onBlur: null,
        onChange: null,
        onDrop: null,
        onPaste: null,
        showInline: null,
        showController: null,
        toggleCodeView: null,
        toggleFullScreen: null,
        imageUploadHandler: null,
        videoUploadHandler: null,
        audioUploadHandler: null,
        onImageUploadBefore: null,
        onVideoUploadBefore: null,
        onAudioUploadBefore: null,
        onImageUpload: null,
        onVideoUpload: null,
        onAudioUpload: null,
        onImageUploadError: null,
        onVideoUploadError: null,
        onAudioUploadError: null,
        onResizeEditor: null,
        setToolbarButtons: function setToolbarButtons(toolbarItem) {
          core.submenuOff();
          core.containerOff();
          var newToolbar = _constructor.default._createToolBar(_d, toolbarItem, core.plugins, options);
          _responsiveButtons = newToolbar.responsiveButtons;
          core._moreLayerActiveButton = null;
          event._setResponsiveToolbar();
          context.element.toolbar.replaceChild(newToolbar.buttonTray, context.element.buttonTray);
          var newContext = (0, _context.default)(context.element.originElement, core._getConstructed(context.element), options);
          context.element = newContext.element;
          context.tool = newContext.tool;
          if (options.iframe)
            context.element.wysiwyg = core._wd.body;
          core._cachingButtons();
          core.history._resetCachingButton();
          core.activePlugins = [];
          var oldCallButtons = pluginCallButtons;
          pluginCallButtons = newToolbar.pluginCallButtons;
          var plugin, button, oldButton;
          for (var key in pluginCallButtons) {
            if (!util.hasOwn(pluginCallButtons, key))
              continue;
            plugin = plugins[key];
            button = pluginCallButtons[key];
            if (plugin.active && button) {
              oldButton = oldCallButtons[key];
              core.callPlugin(key, null, oldButton || button);
              if (oldButton) {
                button.parentElement.replaceChild(oldButton, button);
                pluginCallButtons[key] = oldButton;
              }
            }
          }
          if (core.hasFocus)
            event._applyTagEffects();
          if (core._variable.isCodeView)
            util.addClass(core._styleCommandMap.codeView, "active");
          if (core._variable.isFullScreen)
            util.addClass(core._styleCommandMap.fullScreen, "active");
          if (util.hasClass(context.element.wysiwyg, "ke-show-block"))
            util.addClass(core._styleCommandMap.showBlocks, "active");
        },
        setOptions: function setOptions(_options) {
          event._removeEvent();
          core._resetComponents();
          util.removeClass(core._styleCommandMap.showBlocks, "active");
          util.removeClass(core._styleCommandMap.codeView, "active");
          core._variable.isCodeView = false;
          core._iframeAuto = null;
          core.plugins = _options.plugins || core.plugins;
          var mergeOptions = [options, _options].reduce(function(init, option) {
            for (var key in option) {
              if (!util.hasOwn(option, key))
                continue;
              if (key === "plugins" && option[key] && init[key]) {
                (function() {
                  var i = init[key], o = option[key];
                  i = i.length ? i : _w.Object.keys(i).map(function(name) {
                    return i[name];
                  });
                  o = o.length ? o : _w.Object.keys(o).map(function(name) {
                    return o[name];
                  });
                  init[key] = o.filter(function(val) {
                    return i.indexOf(val) === -1;
                  }).concat(i);
                })();
              } else {
                init[key] = option[key];
              }
            }
            return init;
          }, {});
          var el = context.element;
          var _initHTML = el.wysiwyg.innerHTML;
          var cons = _constructor.default._setOptions(mergeOptions, context, options);
          if (cons.callButtons) {
            pluginCallButtons = cons.callButtons;
            core.initPlugins = {};
          }
          if (cons.plugins) {
            core.plugins = plugins = cons.plugins;
          }
          if (el.menuTray.children.length === 0)
            this.menuTray = {};
          _responsiveButtons = cons.toolbar.responsiveButtons;
          core.options = options = mergeOptions;
          core.lang = lang = options.lang;
          if (options.iframe) {
            el.wysiwygFrame.addEventListener("load", function() {
              util._setIframeDocument(this, options);
              core._setOptionsInit(el, _initHTML);
            });
          }
          el.editorArea.appendChild(el.wysiwygFrame);
          if (!options.iframe) {
            core._setOptionsInit(el, _initHTML);
          }
        },
        setDefaultStyle: function setDefaultStyle(style) {
          var newStyles = options._editorStyles = util._setDefaultOptionStyle(options, style);
          var el = context.element;
          el.topArea.style.cssText = newStyles.top;
          el.code.style.cssText = options._editorStyles.frame;
          el.code.style.display = "none";
          if (options.height === "auto") {
            el.code.style.overflow = "hidden";
          } else {
            el.code.style.overflow = "";
          }
          if (!options.iframe) {
            el.wysiwygFrame.style.cssText = newStyles.frame + newStyles.editor;
          } else {
            el.wysiwygFrame.style.cssText = newStyles.frame;
            el.wysiwyg.style.cssText = newStyles.editor;
          }
        },
        noticeOpen: function noticeOpen(message) {
          core.notice.open.call(core, message);
        },
        noticeClose: function noticeClose() {
          core.notice.close.call(core);
        },
        save: function save() {
          context.element.originElement.value = core.getContents(false);
        },
        getContext: function getContext() {
          return context;
        },
        getContents: function getContents(onlyContents) {
          return core.getContents(onlyContents);
        },
        getText: function getText() {
          return context.element.wysiwyg.textContent;
        },
        getCharCount: function getCharCount(charCounterType) {
          charCounterType = typeof charCounterType === "string" ? charCounterType : options.charCounterType;
          return core.getCharLength(core._charTypeHTML ? context.element.wysiwyg.innerHTML : context.element.wysiwyg.textContent, charCounterType);
        },
        getImagesInfo: function getImagesInfo() {
          return context.image ? context.image._infoList : [];
        },
        getFilesInfo: function getFilesInfo(pluginName) {
          return context[pluginName] ? context[pluginName]._infoList : [];
        },
        insertImage: function insertImage(files) {
          if (!core.plugins.image || !files)
            return;
          if (!core.initPlugins.image)
            core.callPlugin("image", core.plugins.image.submitAction.bind(core, files), null);
          else
            core.plugins.image.submitAction.call(core, files);
          core.focus();
        },
        insertHTML: function insertHTML(html, notCleaningData, checkCharCount, rangeSelection) {
          if (typeof html === "string") {
            if (!notCleaningData)
              html = core.cleanHTML(html, null);
            try {
              var dom = _d.createRange().createContextualFragment(html);
              var domTree = dom.childNodes;
              if (checkCharCount) {
                var type = core._charTypeHTML ? "outerHTML" : "textContent";
                var checkHTML = "";
                for (var i = 0, len = domTree.length; i < len; i++) {
                  checkHTML += domTree[i][type];
                }
                if (!core.checkCharCount(checkHTML, null))
                  return;
              }
              var c, a, t, prev, firstCon;
              while (c = domTree[0]) {
                if (prev && prev.nodeType === 3 && a && a.nodeType === 1 && util.isBreak(c)) {
                  prev = c;
                  util.removeItem(c);
                  continue;
                }
                t = core.insertNode(c, a, false);
                a = t.container || t;
                if (!firstCon)
                  firstCon = t;
                prev = c;
              }
              if (prev.nodeType === 3 && a.nodeType === 1)
                a = prev;
              var offset = a.nodeType === 3 ? t.endOffset || a.textContent.length : a.childNodes.length;
              if (rangeSelection)
                core.setRange(firstCon.container || firstCon, firstCon.startOffset || 0, a, offset);
              else
                core.setRange(a, offset, a, offset);
            } catch (error) {
              console.warn("[KothingEditor.insertHTML.fail] " + error);
              core.execCommand("insertHTML", false, html);
            }
          } else {
            if (util.isComponent(html)) {
              core.insertComponent(html, false, checkCharCount, false);
            } else {
              var afterNode = null;
              if (util.isFormatElement(html) || util.isMedia(html)) {
                afterNode = util.getFormatElement(core.getSelectionNode(), null);
              }
              core.insertNode(html, afterNode, checkCharCount);
            }
          }
          core.effectNode = null;
          core.focus();
          core.history.push(false);
        },
        setContents: function setContents(contents) {
          core.setContents(contents);
        },
        appendContents: function appendContents(contents) {
          var convertValue = core.convertContentsForEditor(contents);
          if (!core._variable.isCodeView) {
            var temp = util.createElement("DIV");
            temp.innerHTML = convertValue;
            var wysiwyg = context.element.wysiwyg;
            var children = temp.children;
            for (var i = 0, len = children.length; i < len; i++) {
              wysiwyg.appendChild(children[i]);
            }
          } else {
            core._setCodeView(core._getCodeView() + "\n" + core.convertHTMLForCodeView(convertValue));
          }
          core.history.push(false);
        },
        disabled: function disabled() {
          context.tool.cover.style.display = "block";
          context.element.wysiwyg.setAttribute("contenteditable", false);
          core.isDisabled = true;
          if (options.codeMirrorEditor) {
            options.codeMirrorEditor.setOption("readOnly", true);
          } else {
            context.element.code.setAttribute("disabled", "disabled");
          }
        },
        enabled: function enabled() {
          context.tool.cover.style.display = "none";
          context.element.wysiwyg.setAttribute("contenteditable", true);
          core.isDisabled = false;
          if (options.codeMirrorEditor) {
            options.codeMirrorEditor.setOption("readOnly", false);
          } else {
            context.element.code.removeAttribute("disabled");
          }
        },
        show: function show() {
          var topAreaStyle = context.element.topArea.style;
          if (topAreaStyle.display === "none")
            topAreaStyle.display = options.display;
        },
        hide: function hide() {
          context.element.topArea.style.display = "none";
        },
        destroy: function destroy() {
          core.submenuOff();
          core.containerOff();
          core.controllersOff();
          if (core.notice)
            core.notice.close.call(core);
          if (core.modalForm)
            core.plugins.dialog.close.call(core);
          core.history._destroy();
          event._removeEvent();
          util.removeItem(context.element.toolbar);
          util.removeItem(context.element.topArea);
          for (var k in core.functions) {
            if (util.hasOwn(core, k))
              delete core.functions[k];
          }
          for (var _k in core) {
            if (util.hasOwn(core, _k))
              delete core[_k];
          }
          for (var _k2 in event) {
            if (util.hasOwn(event, _k2))
              delete event[_k2];
          }
          for (var _k3 in context) {
            if (util.hasOwn(context, _k3))
              delete context[_k3];
          }
          for (var _k4 in pluginCallButtons) {
            if (util.hasOwn(pluginCallButtons, _k4))
              delete pluginCallButtons[_k4];
          }
          for (var _k5 in this) {
            if (util.hasOwn(this, _k5))
              delete this[_k5];
          }
        },
        toolbar: {
          disabled: function disabled() {
            context.tool.cover.style.display = "block";
          },
          enabled: function enabled() {
            context.tool.cover.style.display = "none";
          },
          show: function show() {
            if (core._isInline) {
              event._showToolbarInline();
            } else {
              context.element.toolbar.style.display = "";
              context.element.stickyDummy.style.display = "";
            }
          },
          hide: function hide() {
            if (core._isInline) {
              event._hideToolbar();
            } else {
              context.element.toolbar.style.display = "none";
              context.element.stickyDummy.style.display = "none";
            }
          }
        }
      };
      core.functions = functions;
      core.options = options;
      var contextEl = context.element;
      var originEl = contextEl.originElement;
      var topEl = contextEl.topArea;
      originEl.style.display = "none";
      topEl.style.display = "block";
      if (options.iframe) {
        contextEl.wysiwygFrame.addEventListener("load", function() {
          util._setIframeDocument(this, options);
          core._editorInit(false, options.value);
          options.value = null;
        });
      }
      if (_typeof(originEl.nextElementSibling) === "object") {
        originEl.parentNode.insertBefore(topEl, originEl.nextElementSibling);
      } else {
        originEl.parentNode.appendChild(topEl);
      }
      contextEl.editorArea.appendChild(contextEl.wysiwygFrame);
      contextEl = originEl = topEl = null;
      if (!options.iframe) {
        core._editorInit(false, options.value);
        options.value = null;
      }
      return functions;
    }
  }
});

// node_modules/kothing-editor/lib/editor.js
var require_editor = __commonJS({
  "node_modules/kothing-editor/lib/editor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _core = _interopRequireDefault(require_core());
    var _util = _interopRequireDefault(require_util());
    var _constructor = _interopRequireDefault(require_constructor());
    var _context = _interopRequireDefault(require_context());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _default = {
      init: function init(init_options) {
        return {
          create: function(idOrElement, options) {
            return this.create(idOrElement, options, init_options);
          }.bind(this)
        };
      },
      create: function create(idOrElement, options, _init_options) {
        _util.default._propertiesInit();
        if (_typeof(options) !== "object") {
          options = {};
        }
        if (_init_options) {
          options = [_init_options, options].reduce(function(init, option) {
            for (var key in option) {
              if (!_util.default.hasOwn(option, key)) {
                continue;
              }
              if (key === "plugins" && option[key] && init[key]) {
                (function() {
                  var i = init[key], o = option[key];
                  i = i.length ? i : Object.keys(i).map(function(name) {
                    return i[name];
                  });
                  o = o.length ? o : Object.keys(o).map(function(name) {
                    return o[name];
                  });
                  init[key] = o.filter(function(val) {
                    return i.indexOf(val) === -1;
                  }).concat(i);
                })();
              } else {
                init[key] = option[key];
              }
            }
            return init;
          }, {});
        }
        var element = typeof idOrElement === "string" ? document.getElementById(idOrElement) : idOrElement;
        if (!element) {
          if (typeof idOrElement === "string") {
            throw Error('[KothingEditor.create.fail] The element for that id was not found (ID:"'.concat(idOrElement, '")'));
          }
          throw Error("[KothingEditor.create.fail] KothingEditor requires textarea's element or id value");
        }
        var cons = _constructor.default.init(element, options);
        if (cons.constructed.top.id && document.getElementById(cons.constructed.top.id)) {
          throw Error('[KothingEditor.create.fail] The ID of the KothingEditor you are trying to create already exists (ID:"'.concat(cons.constructed.top.id, '")'));
        }
        return (0, _core.default)((0, _context.default)(element, cons.constructed, cons.options), cons.pluginCallButtons, cons.plugins, cons.options.lang, options, cons._responsiveButtons);
      }
    };
    exports.default = _default;
  }
});

// dep:kothing-editor
var kothing_editor_default = require_editor();
export {
  kothing_editor_default as default
};
//# sourceMappingURL=kothing-editor.js.map
