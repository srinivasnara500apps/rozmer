import {
  require_util
} from "./chunk-WJSINZ6E.js";
import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/kothing-editor/lib/plugins/command/blockquote.js
var require_blockquote = __commonJS({
  "node_modules/kothing-editor/lib/plugins/command/blockquote.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "blockquote",
      display: "command",
      add: function add(core, targetElement) {
        var context = core.context;
        context.blockquote = {
          targetButton: targetElement,
          tag: core.util.createElement("BLOCKQUOTE")
        };
      },
      active: function active(element) {
        if (!element) {
          this.util.removeClass(this.context.blockquote.targetButton, "active");
        } else if (/blockquote/i.test(element.nodeName)) {
          this.util.addClass(this.context.blockquote.targetButton, "active");
          return true;
        }
        return false;
      },
      action: function action() {
        var currentBlockquote = this.util.getParentElement(this.getSelectionNode(), "blockquote");
        if (currentBlockquote) {
          this.detachRangeFormatElement(currentBlockquote, null, null, false, false);
        } else {
          this.applyRangeFormatElement(this.context.blockquote.tag.cloneNode(false));
        }
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/align.js
var require_align = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/align.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "align",
      display: "submenu",
      add: function add(core, targetElement) {
        var icons = core.icons;
        var context = core.context;
        context.align = {
          targetButton: targetElement,
          _alignList: null,
          currentAlign: "",
          defaultDir: core.options.rtl ? "right" : "left",
          icons: {
            justify: icons.align_justify,
            left: icons.align_left,
            right: icons.align_right,
            center: icons.align_center
          }
        };
        var listDiv = this.setSubmenu(core);
        var listUl = listDiv.querySelector("ul");
        listUl.addEventListener("click", this.pickup.bind(core));
        context.align._alignList = listUl.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null, listUl = null;
      },
      setSubmenu: function setSubmenu(core) {
        var lang = core.lang;
        var icons = core.icons;
        var listDiv = core.util.createElement("DIV");
        var leftDir = core.context.align.defaultDir === "left";
        var leftMenu = '<li><button type="button" class="ke-btn-list ke-btn-align" data-command="justifyleft" data-value="left" title="' + lang.toolbar.alignLeft + '"><span class="ke-list-icon">' + icons.align_left + "</span>" + lang.toolbar.alignLeft + "</button></li>";
        var rightMenu = '<li><button type="button" class="ke-btn-list ke-btn-align" data-command="justifyright" data-value="right" title="' + lang.toolbar.alignRight + '"><span class="ke-list-icon">' + icons.align_right + "</span>" + lang.toolbar.alignRight + "</button></li>";
        listDiv.className = "ke-submenu ke-list-layer ke-list-align";
        listDiv.innerHTML = '<div class="ke-list-inner"><ul class="ke-list-basic">' + (leftDir ? leftMenu : rightMenu) + '<li><button type="button" class="ke-btn-list ke-btn-align" data-command="justifycenter" data-value="center" title="' + lang.toolbar.alignCenter + '"><span class="ke-list-icon">' + icons.align_center + "</span>" + lang.toolbar.alignCenter + "</button></li>" + (leftDir ? rightMenu : leftMenu) + '<li><button type="button" class="ke-btn-list ke-btn-align" data-command="justifyfull" data-value="justify" title="' + lang.toolbar.alignJustify + '"><span class="ke-list-icon">' + icons.align_justify + "</span>" + lang.toolbar.alignJustify + "</button></li></ul></div>";
        return listDiv;
      },
      active: function active(element) {
        var alignContext = this.context.align;
        var targetButton = alignContext.targetButton;
        var target = targetButton.firstElementChild;
        if (!element) {
          this.util.changeElement(target, alignContext.icons[alignContext.defaultDir]);
          targetButton.removeAttribute("data-focus");
        } else if (this.util.isFormatElement(element)) {
          var textAlign = element.style.textAlign;
          if (textAlign) {
            this.util.changeElement(target, alignContext.icons[textAlign] || alignContext.icons[alignContext.defaultDir]);
            targetButton.setAttribute("data-focus", textAlign);
            return true;
          }
        }
        return false;
      },
      on: function on() {
        var alignContext = this.context.align;
        var alignList = alignContext._alignList;
        var currentAlign = alignContext.targetButton.getAttribute("data-focus") || alignContext.defaultDir;
        if (currentAlign !== alignContext.currentAlign) {
          for (var i = 0, len = alignList.length; i < len; i++) {
            if (currentAlign === alignList[i].getAttribute("data-value")) {
              this.util.addClass(alignList[i], "active");
            } else {
              this.util.removeClass(alignList[i], "active");
            }
          }
          alignContext.currentAlign = currentAlign;
        }
      },
      pickup: function pickup(e) {
        e.preventDefault();
        e.stopPropagation();
        var target = e.target;
        var value = null;
        while (!value && !/UL/i.test(target.tagName)) {
          value = target.getAttribute("data-value");
          target = target.parentNode;
        }
        if (!value) {
          return;
        }
        var defaultDir = this.context.align.defaultDir;
        var selectedFormsts = this.getSelectedElements();
        for (var i = 0, len = selectedFormsts.length; i < len; i++) {
          this.util.setStyle(selectedFormsts[i], "textAlign", value === defaultDir ? "" : value);
        }
        this.effectNode = null;
        this.submenuOff();
        this.focus();
        this.history.push(false);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/font.js
var require_font = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/font.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "font",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        var icons = core.icons;
        context.font = {
          targetText: targetElement.querySelector(".txt"),
          targetTooltip: targetElement.parentNode.querySelector(".ke-tooltip-text"),
          _fontList: null,
          currentFont: "",
          icon: icons.font
        };
        var listDiv = this.setSubmenu(core);
        listDiv.querySelector(".ke-list-inner").addEventListener("click", this.pickup.bind(core));
        context.font._fontList = listDiv.querySelectorAll("ul li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null;
      },
      setSubmenu: function setSubmenu(core) {
        var option = core.options;
        var lang = core.lang;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer ke-list-font-family";
        var font, text, i, len;
        var fontList = !option.font ? ["Arial", "Comic Sans MS", "Courier New", "Impact", "Georgia", "tahoma", "Trebuchet MS", "Verdana"] : option.font;
        var list = '<div class="ke-list-inner"><ul class="ke-list-basic"><li><button type="button" class="default_value ke-btn-list" title="' + lang.toolbar.default + '">(' + lang.toolbar.default + ")</button></li>";
        for (i = 0, len = fontList.length; i < len; i++) {
          font = fontList[i];
          text = font.split(",")[0];
          list += '<li><button type="button" class="ke-btn-list" data-value="' + font + '" data-txt="' + text + '" title="' + text + '" style="font-family:' + font + ';">' + text + "</button></li>";
        }
        list += "</ul></div>";
        listDiv.innerHTML = list;
        return listDiv;
      },
      active: function active(element) {
        var target = this.context.font.targetText.firstElementChild;
        var tooltip = this.context.font.targetTooltip;
        var icon = this.context.font.icon;
        if (!element) {
          var fontElement = this.hasFocus ? this.wwComputedStyle.fontFamily ? "<span>".concat(JSON.parse(this.wwComputedStyle.fontFamily), "</span>") : "" : icon;
          this.util.changeElement(target, fontElement);
          var font = this.hasFocus ? this.wwComputedStyle.fontFamily ? JSON.parse(this.wwComputedStyle.fontFamily) : "" : this.lang.toolbar.font;
          this.util.changeTxt(tooltip, this.hasFocus ? this.lang.toolbar.font + " (" + font + ")" : font);
        } else if (element.style && element.style.fontFamily.length > 0) {
          var selectFont = element.style.fontFamily.replace(/["']/g, "");
          this.util.changeElement(target, "<span>".concat(selectFont, "</span>"));
          this.util.changeTxt(tooltip, this.lang.toolbar.font + " (" + selectFont + ")");
          return true;
        }
        return false;
      },
      on: function on() {
        var fontContext = this.context.font;
        var fontList = fontContext._fontList;
        var currentFont = fontContext.targetText.textContent;
        if (currentFont !== fontContext.currentFont) {
          for (var i = 0, len = fontList.length; i < len; i++) {
            if (currentFont === fontList[i].getAttribute("data-value")) {
              this.util.addClass(fontList[i], "active");
            } else {
              this.util.removeClass(fontList[i], "active");
            }
          }
          fontContext.currentFont = currentFont;
        }
      },
      pickup: function pickup(e) {
        if (!/^BUTTON$/i.test(e.target.tagName)) {
          return false;
        }
        e.preventDefault();
        e.stopPropagation();
        var value = e.target.getAttribute("data-value");
        if (value) {
          var newNode = this.util.createElement("SPAN");
          newNode.style.fontFamily = value;
          this.nodeChange(newNode, ["font-family"], null, null);
        } else {
          this.nodeChange(null, ["font-family"], ["span"], true);
        }
        this.submenuOff();
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/fontSize.js
var require_fontSize = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/fontSize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "fontSize",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        var icons = core.icons;
        context.fontSize = {
          targetText: targetElement.querySelector(".txt"),
          _sizeList: null,
          currentSize: "",
          icon: icons.font_size
        };
        var listDiv = this.setSubmenu(core);
        var listUl = listDiv.querySelector("ul");
        listUl.addEventListener("click", this.pickup.bind(core));
        context.fontSize._sizeList = listUl.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null, listUl = null;
      },
      setSubmenu: function setSubmenu(core) {
        var option = core.options;
        var lang = core.lang;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer ke-list-font-size";
        var sizeList = !option.fontSize ? [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72] : option.fontSize;
        var list = '<div class="ke-list-inner"><ul class="ke-list-basic"><li><button type="button" class="default_value ke-btn-list" title="' + lang.toolbar.default + '">(' + lang.toolbar.default + ")</button></li>";
        for (var i = 0, unit = option.fontSizeUnit, len = sizeList.length, size; i < len; i++) {
          size = sizeList[i];
          list += '<li><button type="button" class="ke-btn-list" data-value="' + size + unit + '" title="' + size + unit + '" style="font-size:' + size + unit + ';">' + size + "</button></li>";
        }
        list += "</ul></div>";
        listDiv.innerHTML = list;
        return listDiv;
      },
      active: function active(element) {
        var target = this.context.fontSize.targetText.firstElementChild;
        var icon = this.context.fontSize.icon;
        if (!element) {
          var sizeIcon = this.hasFocus ? this.wwComputedStyle.fontSize ? "<span>".concat(this.wwComputedStyle.fontSize, "</span>") : "" : icon;
          this.util.changeElement(target, sizeIcon);
        } else if (element.style && element.style.fontSize.length > 0) {
          this.util.changeElement(target, "<span>".concat(element.style.fontSize, "</span>"));
          return true;
        }
        return false;
      },
      on: function on() {
        var fontSizeContext = this.context.fontSize;
        var sizeList = fontSizeContext._sizeList;
        var currentSize = fontSizeContext.targetText.textContent;
        if (currentSize !== fontSizeContext.currentSize) {
          for (var i = 0, len = sizeList.length; i < len; i++) {
            if (currentSize === sizeList[i].getAttribute("data-value")) {
              this.util.addClass(sizeList[i], "active");
            } else {
              this.util.removeClass(sizeList[i], "active");
            }
          }
          fontSizeContext.currentSize = currentSize;
        }
      },
      pickup: function pickup(e) {
        if (!/^BUTTON$/i.test(e.target.tagName)) {
          return false;
        }
        e.preventDefault();
        e.stopPropagation();
        var value = e.target.getAttribute("data-value");
        if (value) {
          var newNode = this.util.createElement("SPAN");
          newNode.style.fontSize = value;
          this.nodeChange(newNode, ["font-size"], null, null);
        } else {
          this.nodeChange(null, ["font-size"], ["span"], true);
        }
        this.submenuOff();
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/modules/colorPicker.js
var require_colorPicker = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/colorPicker.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _default = {
      name: "colorPicker",
      add: function add(core) {
        var context = core.context;
        context.colorPicker = {
          colorListHTML: "",
          _colorInput: "",
          _defaultColor: "#000",
          _styleProperty: "color",
          _currentColor: "",
          _colorList: []
        };
        context.colorPicker.colorListHTML = this.createColorList(core, this._makeColorList);
      },
      createColorList: function createColorList(core, makeColor) {
        var option = core.options;
        var lang = core.lang;
        var colorList = !option.colorList || option.colorList.length === 0 ? ["#ff0000", "#ff5e00", "#ffe400", "#abf200", "#00d8ff", "#0055ff", "#6600ff", "#ff00dd", "#000000", "#ffd8d8", "#fae0d4", "#faf4c0", "#e4f7ba", "#d4f4fa", "#d9e5ff", "#e8d9ff", "#ffd9fa", "#f1f1f1", "#ffa7a7", "#ffc19e", "#faed7d", "#cef279", "#b2ebf4", "#b2ccff", "#d1b2ff", "#ffb2f5", "#bdbdbd", "#f15f5f", "#f29661", "#e5d85c", "#bce55c", "#5cd1e5", "#6699ff", "#a366ff", "#f261df", "#8c8c8c", "#980000", "#993800", "#998a00", "#6b9900", "#008299", "#003399", "#3d0099", "#990085", "#353535", "#670000", "#662500", "#665c00", "#476600", "#005766", "#002266", "#290066", "#660058", "#222222"] : option.colorList;
        var colorArr = [];
        var list = '<div class="ke-list-inner">';
        for (var i = 0, len = colorList.length, color; i < len; i++) {
          color = colorList[i];
          if (!color) {
            continue;
          }
          if (typeof color === "string") {
            colorArr.push(color);
            if (i < len - 1) {
              continue;
            }
          }
          if (colorArr.length > 0) {
            list += '<div class="ke-selector-color">' + makeColor(colorArr) + "</div>";
            colorArr = [];
          }
          if (_typeof(color) === "object") {
            list += '<div class="ke-selector-color">' + makeColor(color) + "</div>";
          }
        }
        list += '<form class="ke-submenu-form-group"><input type="text" maxlength="9" class="_ke_color_picker_input ke-color-input"/><button type="submit" class="ke-btn-primary _ke_color_picker_submit" title="' + lang.dialogBox.submitButton + '">' + core.icons.checked + '</button><button type="button" class="ke-btn _ke_color_picker_remove" title="' + lang.toolbar.removeFormat + '">' + core.icons.erase + "</button></form></div>";
        return list;
      },
      _makeColorList: function _makeColorList(colorList) {
        var list = "";
        list += '<ul class="ke-color-pallet">';
        for (var i = 0, len = colorList.length, color; i < len; i++) {
          color = colorList[i];
          if (typeof color === "string") {
            list += '<li><button type="button" data-value="' + color + '" title="' + color + '" style="background-color:' + color + ';"></button></li>';
          }
        }
        list += "</ul>";
        return list;
      },
      init: function init(node, color) {
        var colorPicker = this.plugins.colorPicker;
        var fillColor = color ? color : colorPicker.getColorInNode.call(this, node) || this.context.colorPicker._defaultColor;
        fillColor = colorPicker.isHexColor(fillColor) ? fillColor : colorPicker.rgb2hex(fillColor) || fillColor;
        var colorList = this.context.colorPicker._colorList;
        if (colorList) {
          for (var i = 0, len = colorList.length; i < len; i++) {
            if (fillColor.toLowerCase() === colorList[i].getAttribute("data-value").toLowerCase()) {
              this.util.addClass(colorList[i], "active");
            } else {
              this.util.removeClass(colorList[i], "active");
            }
          }
        }
        colorPicker.setInputText.call(this, colorPicker.colorName2hex.call(this, fillColor));
      },
      setCurrentColor: function setCurrentColor(hexColorStr) {
        this.context.colorPicker._currentColor = hexColorStr;
        this.context.colorPicker._colorInput.style.borderColor = hexColorStr;
      },
      setInputText: function setInputText(hexColorStr) {
        hexColorStr = /^#/.test(hexColorStr) ? hexColorStr : "#" + hexColorStr;
        this.context.colorPicker._colorInput.value = hexColorStr;
        this.plugins.colorPicker.setCurrentColor.call(this, hexColorStr);
      },
      getColorInNode: function getColorInNode(node) {
        var findColor = "";
        var styleProperty = this.context.colorPicker._styleProperty;
        while (node && !this.util.isWysiwygDiv(node) && findColor.length === 0) {
          if (node.nodeType === 1 && node.style[styleProperty]) {
            findColor = node.style[styleProperty];
          }
          node = node.parentNode;
        }
        return findColor;
      },
      isHexColor: function isHexColor(str) {
        return /^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(str);
      },
      rgb2hex: function rgb2hex(rgb) {
        var rgbMatch = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
        return rgbMatch && rgbMatch.length === 4 ? "#" + ("0" + parseInt(rgbMatch[1], 10).toString(16)).slice(-2) + ("0" + parseInt(rgbMatch[2], 10).toString(16)).slice(-2) + ("0" + parseInt(rgbMatch[3], 10).toString(16)).slice(-2) : "";
      },
      colorName2hex: function colorName2hex(colorName) {
        if (/^#/.test(colorName)) {
          return colorName;
        }
        var temp = this.util.createElement("div");
        temp.style.display = "none";
        temp.style.color = colorName;
        var colors = this._w.getComputedStyle(this._d.body.appendChild(temp)).color.match(/\d+/g).map(function(a) {
          return parseInt(a, 10);
        });
        this.util.removeItem(temp);
        return colors.length >= 3 ? "#" + ((1 << 24) + (colors[0] << 16) + (colors[1] << 8) + colors[2]).toString(16).substr(1) : false;
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/fontColor.js
var require_fontColor = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/fontColor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _colorPicker = _interopRequireDefault(require_colorPicker());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      name: "fontColor",
      display: "submenu",
      add: function add(core, targetElement) {
        core.addModule([_colorPicker.default]);
        var context = core.context;
        context.fontColor = {
          previewEl: null,
          colorInput: null,
          colorList: null
        };
        var listDiv = this.setSubmenu(core);
        context.fontColor.colorInput = listDiv.querySelector("._ke_color_picker_input");
        context.fontColor.colorInput.addEventListener("keyup", this.onChangeInput.bind(core));
        listDiv.querySelector("._ke_color_picker_submit").addEventListener("click", this.submit.bind(core));
        listDiv.querySelector("._ke_color_picker_remove").addEventListener("click", this.remove.bind(core));
        listDiv.addEventListener("click", this.pickup.bind(core));
        context.fontColor.colorList = listDiv.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null;
      },
      setSubmenu: function setSubmenu(core) {
        var colorArea = core.context.colorPicker.colorListHTML;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer";
        listDiv.innerHTML = colorArea;
        return listDiv;
      },
      on: function on() {
        var contextPicker = this.context.colorPicker;
        var contextFontColor = this.context.fontColor;
        contextPicker._colorInput = contextFontColor.colorInput;
        var color = this.wwComputedStyle.color;
        contextPicker._defaultColor = color ? this.plugins.colorPicker.isHexColor(color) ? color : this.plugins.colorPicker.rgb2hex(color) : "#333333";
        contextPicker._styleProperty = "color";
        contextPicker._colorList = contextFontColor.colorList;
        this.plugins.colorPicker.init.call(this, this.getSelectionNode(), null);
      },
      onChangeInput: function onChangeInput(e) {
        this.plugins.colorPicker.setCurrentColor.call(this, e.target.value);
      },
      submit: function submit() {
        this.plugins.fontColor.applyColor.call(this, this.context.colorPicker._currentColor);
      },
      pickup: function pickup(e) {
        e.preventDefault();
        e.stopPropagation();
        this.plugins.fontColor.applyColor.call(this, e.target.getAttribute("data-value"));
      },
      remove: function remove() {
        this.nodeChange(null, ["color"], ["span"], true);
        this.submenuOff();
      },
      applyColor: function applyColor(color) {
        if (!color) {
          return;
        }
        var newNode = this.util.createElement("SPAN");
        newNode.style.color = color;
        this.nodeChange(newNode, ["color"], null, null);
        this.submenuOff();
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/hiliteColor.js
var require_hiliteColor = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/hiliteColor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _colorPicker = _interopRequireDefault(require_colorPicker());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      name: "hiliteColor",
      display: "submenu",
      add: function add(core, targetElement) {
        core.addModule([_colorPicker.default]);
        var context = core.context;
        context.hiliteColor = {
          previewEl: null,
          colorInput: null,
          colorList: null
        };
        var listDiv = this.setSubmenu(core);
        context.hiliteColor.colorInput = listDiv.querySelector("._ke_color_picker_input");
        context.hiliteColor.colorInput.addEventListener("keyup", this.onChangeInput.bind(core));
        listDiv.querySelector("._ke_color_picker_submit").addEventListener("click", this.submit.bind(core));
        listDiv.querySelector("._ke_color_picker_remove").addEventListener("click", this.remove.bind(core));
        listDiv.addEventListener("click", this.pickup.bind(core));
        context.hiliteColor.colorList = listDiv.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null;
      },
      setSubmenu: function setSubmenu(core) {
        var colorArea = core.context.colorPicker.colorListHTML;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer";
        listDiv.innerHTML = colorArea;
        return listDiv;
      },
      on: function on() {
        var contextPicker = this.context.colorPicker;
        var contextHiliteColor = this.context.hiliteColor;
        contextPicker._colorInput = contextHiliteColor.colorInput;
        var color = this.wwComputedStyle.backgroundColor;
        contextPicker._defaultColor = color ? this.plugins.colorPicker.isHexColor(color) ? color : this.plugins.colorPicker.rgb2hex(color) : "#ffffff";
        contextPicker._styleProperty = "backgroundColor";
        contextPicker._colorList = contextHiliteColor.colorList;
        this.plugins.colorPicker.init.call(this, this.getSelectionNode(), null);
      },
      onChangeInput: function onChangeInput(e) {
        this.plugins.colorPicker.setCurrentColor.call(this, e.target.value);
      },
      submit: function submit() {
        this.plugins.hiliteColor.applyColor.call(this, this.context.colorPicker._currentColor);
      },
      pickup: function pickup(e) {
        e.preventDefault();
        e.stopPropagation();
        this.plugins.hiliteColor.applyColor.call(this, e.target.getAttribute("data-value"));
      },
      remove: function remove() {
        this.nodeChange(null, ["background-color"], ["span"], true);
        this.submenuOff();
      },
      applyColor: function applyColor(color) {
        if (!color) {
          return;
        }
        var newNode = this.util.createElement("SPAN");
        newNode.style.backgroundColor = color;
        this.nodeChange(newNode, ["background-color"], null, null);
        this.submenuOff();
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/horizontalRule.js
var require_horizontalRule = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/horizontalRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "horizontalRule",
      display: "submenu",
      add: function add(core, targetElement) {
        core.context.horizontalRule = {
          currentHR: null
        };
        var listDiv = this.setSubmenu(core);
        listDiv.querySelector("ul").addEventListener("click", this.horizontalRulePick.bind(core));
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null;
      },
      setSubmenu: function setSubmenu(core) {
        var lang = core.lang;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer ke-list-line";
        listDiv.innerHTML = '<div class="ke-list-inner"><ul class="ke-list-basic"><li><button type="button" class="ke-btn-list btn_line" data-command="horizontalRule" data-value="solid" title="' + lang.toolbar.hr_solid + '"><hr style="border-width: 1px 0 0; border-style: solid none none; border-color: black; border-image: initial; height: 1px;" /></button></li><li><button type="button" class="ke-btn-list btn_line" data-command="horizontalRule" data-value="dotted" title="' + lang.toolbar.hr_dotted + '"><hr style="border-width: 1px 0 0; border-style: dotted none none; border-color: black; border-image: initial; height: 1px;" /></button></li><li><button type="button" class="ke-btn-list btn_line" data-command="horizontalRule" data-value="dashed" title="' + lang.toolbar.hr_dashed + '"><hr style="border-width: 1px 0 0; border-style: dashed none none; border-color: black; border-image: initial; height: 1px;" /></button></li></ul></div>';
        return listDiv;
      },
      active: function active(element) {
        if (!element) {
          if (this.util.hasClass(this.context.horizontalRule.currentHR, "on")) {
            this.controllersOff();
          }
        } else if (/HR/i.test(element.nodeName)) {
          this.context.horizontalRule.currentHR = element;
          if (!this.util.hasClass(element, "on")) {
            this.util.addClass(element, "on");
            this.controllersOn("hr", this.util.removeClass.bind(this.util, element, "on"));
          }
          return true;
        }
        return false;
      },
      appendHr: function appendHr(className) {
        var oHr = this.util.createElement("HR");
        oHr.className = className;
        this.focus();
        return this.insertComponent(oHr, false, true, false);
      },
      horizontalRulePick: function horizontalRulePick(e) {
        e.preventDefault();
        e.stopPropagation();
        var target = e.target;
        var value = null;
        while (!value && !/UL/i.test(target.tagName)) {
          value = target.getAttribute("data-value");
          target = target.parentNode;
        }
        if (!value) {
          return;
        }
        var oNode = this.plugins.horizontalRule.appendHr.call(this, "__ke__" + value);
        if (oNode) {
          this.setRange(oNode, 0, oNode, 0);
          this.submenuOff();
        }
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/list.js
var require_list = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/list.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "list",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        context.list = {
          targetButton: targetElement,
          _list: null,
          currentList: "",
          icons: {
            bullets: core.icons.list_bullets,
            number: core.icons.list_number
          }
        };
        var listDiv = this.setSubmenu(core);
        var listUl = listDiv.querySelector("ul");
        listUl.addEventListener("click", this.pickup.bind(core));
        context.list._list = listUl.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null, listUl = null;
      },
      setSubmenu: function setSubmenu(core) {
        var lang = core.lang;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer";
        listDiv.innerHTML = '<div class="ke-list-inner"><ul class="ke-list-basic"><li><button type="button" class="ke-btn-list ke-tooltip" data-command="OL" title="' + lang.toolbar.orderList + '">' + core.icons.list_number + '</button></li><li><button type="button" class="ke-btn-list ke-tooltip" data-command="UL" title="' + lang.toolbar.unorderList + '">' + core.icons.list_bullets + "</button></li></ul></div>";
        return listDiv;
      },
      active: function active(element) {
        var button = this.context.list.targetButton;
        var icon = button.firstElementChild;
        var util = this.util;
        if (!element) {
          button.removeAttribute("data-focus");
          util.changeElement(icon, this.context.list.icons.number);
          util.removeClass(button, "active");
        } else if (util.isList(element)) {
          var nodeName = element.nodeName;
          button.setAttribute("data-focus", nodeName);
          util.addClass(button, "active");
          if (/UL/i.test(nodeName)) {
            util.changeElement(icon, this.context.list.icons.bullets);
          } else {
            util.changeElement(icon, this.context.list.icons.number);
          }
          return true;
        }
        return false;
      },
      on: function on() {
        var listContext = this.context.list;
        var list = listContext._list;
        var currentList = listContext.targetButton.getAttribute("data-focus") || "";
        if (currentList !== listContext.currentList) {
          for (var i = 0, len = list.length; i < len; i++) {
            if (currentList === list[i].getAttribute("data-command")) {
              this.util.addClass(list[i], "active");
            } else {
              this.util.removeClass(list[i], "active");
            }
          }
          listContext.currentList = currentList;
        }
      },
      editList: function editList(command, selectedCells, detach) {
        var range = this.getRange();
        var selectedFormats = !selectedCells ? this.getSelectedElementsAndComponents(false) : selectedCells;
        if (selectedFormats.length === 0) {
          if (selectedCells) {
            return;
          }
          range = this.getRange_addLine(range, null);
          selectedFormats = this.getSelectedElementsAndComponents(false);
          if (selectedFormats.length === 0) {
            return;
          }
        }
        var util = this.util;
        util.sortByDepth(selectedFormats, true);
        var firstSel = selectedFormats[0];
        var lastSel = selectedFormats[selectedFormats.length - 1];
        var topEl = (util.isListCell(firstSel) || util.isComponent(firstSel)) && !firstSel.previousElementSibling ? firstSel.parentNode.previousElementSibling : firstSel.previousElementSibling;
        var bottomEl = (util.isListCell(lastSel) || util.isComponent(lastSel)) && !lastSel.nextElementSibling ? lastSel.parentNode.nextElementSibling : lastSel.nextElementSibling;
        var originRange = {
          sc: range.startContainer,
          so: range.startOffset,
          ec: range.endContainer,
          eo: range.endOffset
        };
        var isRemove = true;
        var _loop = function _loop2(i2, len2) {
          if (!util.isList(util.getRangeFormatElement(selectedFormats[i2], function(current) {
            return this.getRangeFormatElement(current) && current !== selectedFormats[i2];
          }.bind(util)))) {
            isRemove = false;
            return "break";
          }
        };
        for (var i = 0, len = selectedFormats.length; i < len; i++) {
          var _ret = _loop(i, len);
          if (_ret === "break")
            break;
        }
        if (isRemove && (!topEl || firstSel.tagName !== topEl.tagName || command !== topEl.tagName.toUpperCase()) && (!bottomEl || lastSel.tagName !== bottomEl.tagName || command !== bottomEl.tagName.toUpperCase())) {
          if (detach) {
            for (var _i = 0, _len = selectedFormats.length; _i < _len; _i++) {
              for (var j = _i - 1; j >= 0; j--) {
                if (selectedFormats[j].contains(selectedFormats[_i])) {
                  selectedFormats.splice(_i, 1);
                  _i--;
                  _len--;
                  break;
                }
              }
            }
          }
          var currentFormat = util.getRangeFormatElement(firstSel);
          var cancel = currentFormat && currentFormat.tagName === command;
          var rangeArr, tempList;
          var passComponent = function(current) {
            return !this.isComponent(current);
          }.bind(util);
          if (!cancel) {
            tempList = util.createElement(command);
          }
          for (var _i2 = 0, _len2 = selectedFormats.length, r, o; _i2 < _len2; _i2++) {
            o = util.getRangeFormatElement(selectedFormats[_i2], passComponent);
            if (!o || !util.isList(o)) {
              continue;
            }
            if (!r) {
              r = o;
              rangeArr = {
                r,
                f: [util.getParentElement(selectedFormats[_i2], "LI")]
              };
            } else {
              if (r !== o) {
                if (detach && util.isListCell(o.parentNode)) {
                  this.plugins.list._detachNested.call(this, rangeArr.f);
                } else {
                  this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, tempList, false, true);
                }
                o = selectedFormats[_i2].parentNode;
                if (!cancel) {
                  tempList = util.createElement(command);
                }
                r = o;
                rangeArr = {
                  r,
                  f: [util.getParentElement(selectedFormats[_i2], "LI")]
                };
              } else {
                rangeArr.f.push(util.getParentElement(selectedFormats[_i2], "LI"));
              }
            }
            if (_i2 === _len2 - 1) {
              if (detach && util.isListCell(o.parentNode)) {
                this.plugins.list._detachNested.call(this, rangeArr.f);
              } else {
                this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, tempList, false, true);
              }
            }
          }
        } else {
          var topElParent = topEl ? topEl.parentNode : topEl;
          var bottomElParent = bottomEl ? bottomEl.parentNode : bottomEl;
          topEl = topElParent && !util.isWysiwygDiv(topElParent) && topElParent.nodeName === command ? topElParent : topEl;
          bottomEl = bottomElParent && !util.isWysiwygDiv(bottomElParent) && bottomElParent.nodeName === command ? bottomElParent : bottomEl;
          var mergeTop = topEl && topEl.tagName === command;
          var mergeBottom = bottomEl && bottomEl.tagName === command;
          var list = mergeTop ? topEl : util.createElement(command);
          var firstList = null;
          var topNumber = null;
          var _passComponent = function(current) {
            return !this.isComponent(current) && !this.isList(current);
          }.bind(util);
          for (var _i3 = 0, _len3 = selectedFormats.length, newCell, fTag, isCell, next, originParent, nextParent, parentTag, siblingTag, rangeTag; _i3 < _len3; _i3++) {
            fTag = selectedFormats[_i3];
            if (fTag.childNodes.length === 0 && !util._isIgnoreNodeChange(fTag)) {
              util.removeItem(fTag);
              continue;
            }
            next = selectedFormats[_i3 + 1];
            originParent = fTag.parentNode;
            nextParent = next ? next.parentNode : null;
            isCell = util.isListCell(fTag);
            rangeTag = util.isRangeFormatElement(originParent) ? originParent : null;
            parentTag = isCell && !util.isWysiwygDiv(originParent) ? originParent.parentNode : originParent;
            siblingTag = isCell && !util.isWysiwygDiv(originParent) ? !next || util.isListCell(parentTag) ? originParent : originParent.nextSibling : fTag.nextSibling;
            newCell = util.createElement("LI");
            util.copyFormatAttributes(newCell, fTag);
            if (util.isComponent(fTag)) {
              var isHR = /^HR$/i.test(fTag.nodeName);
              if (!isHR) {
                newCell.innerHTML = "<br>";
              }
              newCell.innerHTML += fTag.outerHTML;
              if (isHR) {
                newCell.innerHTML += "<br>";
              }
            } else {
              var fChildren = fTag.childNodes;
              while (fChildren[0]) {
                newCell.appendChild(fChildren[0]);
              }
            }
            list.appendChild(newCell);
            if (!next || parentTag !== nextParent || util.isRangeFormatElement(siblingTag)) {
              if (!firstList) {
                firstList = list;
              }
              if ((!mergeTop || !next || parentTag !== nextParent) && !(next && util.isList(nextParent) && nextParent === originParent)) {
                if (list.parentNode !== parentTag) {
                  parentTag.insertBefore(list, siblingTag);
                }
              }
            }
            util.removeItem(fTag);
            if (mergeTop && topNumber === null) {
              topNumber = list.children.length - 1;
            }
            if (next && (util.getRangeFormatElement(nextParent, _passComponent) !== util.getRangeFormatElement(originParent, _passComponent) || util.isList(nextParent) && util.isList(originParent) && util.getElementDepth(nextParent) !== util.getElementDepth(originParent))) {
              list = util.createElement(command);
            }
            if (rangeTag && rangeTag.children.length === 0) {
              util.removeItem(rangeTag);
            }
          }
          if (topNumber) {
            firstList = firstList.children[topNumber];
          }
          if (mergeBottom) {
            list.innerHTML += bottomEl.innerHTML;
            util.removeItem(bottomEl);
          }
        }
        this.effectNode = null;
        return originRange;
      },
      _detachNested: function _detachNested(cells) {
        var first = cells[0];
        var last = cells[cells.length - 1];
        var next = last.nextElementSibling;
        var originList = first.parentNode;
        var sibling = originList.parentNode.nextElementSibling;
        var parentNode = originList.parentNode.parentNode;
        for (var c = 0, cLen = cells.length; c < cLen; c++) {
          parentNode.insertBefore(cells[c], sibling);
        }
        if (next && originList.children.length > 0) {
          var newList = originList.cloneNode(false);
          var children = originList.childNodes;
          var index = this.util.getPositionIndex(next);
          while (children[index]) {
            newList.appendChild(children[index]);
          }
          last.appendChild(newList);
        }
        if (originList.children.length === 0) {
          this.util.removeItem(originList);
        }
        this.util.mergeSameTags(parentNode);
        var edge = this.util.getEdgeChildNodes(first, last);
        return {
          cc: first.parentNode,
          sc: edge.sc,
          ec: edge.ec
        };
      },
      editInsideList: function editInsideList(remove, selectedCells) {
        selectedCells = !selectedCells ? this.getSelectedElements().filter(function(el) {
          return this.isListCell(el);
        }.bind(this.util)) : selectedCells;
        var cellsLen = selectedCells.length;
        if (cellsLen === 0 || !remove && !this.util.isListCell(selectedCells[0].previousElementSibling) && !this.util.isListCell(selectedCells[cellsLen - 1].nextElementSibling)) {
          return {
            sc: selectedCells[0],
            so: 0,
            ec: selectedCells[cellsLen - 1],
            eo: 1
          };
        }
        var originList = selectedCells[0].parentNode;
        var lastCell = selectedCells[cellsLen - 1];
        var range = null;
        if (remove) {
          if (originList !== lastCell.parentNode && this.util.isList(lastCell.parentNode.parentNode) && lastCell.nextElementSibling) {
            lastCell = lastCell.nextElementSibling;
            while (lastCell) {
              selectedCells.push(lastCell);
              lastCell = lastCell.nextElementSibling;
            }
          }
          range = this.plugins.list.editList.call(this, originList.nodeName.toUpperCase(), selectedCells, true);
        } else {
          var innerList = this.util.createElement(originList.nodeName);
          var prev = selectedCells[0].previousElementSibling;
          var next = lastCell.nextElementSibling;
          var nodePath = {
            s: null,
            e: null,
            sl: originList,
            el: originList
          };
          for (var i = 0, len = cellsLen, c; i < len; i++) {
            c = selectedCells[i];
            if (c.parentNode !== originList) {
              this.plugins.list._insiedList.call(this, originList, innerList, prev, next, nodePath);
              originList = c.parentNode;
              innerList = this.util.createElement(originList.nodeName);
            }
            prev = c.previousElementSibling;
            next = c.nextElementSibling;
            innerList.appendChild(c);
          }
          this.plugins.list._insiedList.call(this, originList, innerList, prev, next, nodePath);
          var sc = this.util.getNodeFromPath(nodePath.s, nodePath.sl);
          var ec = this.util.getNodeFromPath(nodePath.e, nodePath.el);
          range = {
            sc,
            so: 0,
            ec,
            eo: ec.textContent.length
          };
        }
        return range;
      },
      _insiedList: function _insiedList(originList, innerList, prev, next, nodePath) {
        var insertPrev = false;
        if (prev && innerList.tagName === prev.tagName) {
          var children = innerList.children;
          while (children[0]) {
            prev.appendChild(children[0]);
          }
          innerList = prev;
          insertPrev = true;
        }
        if (next && innerList.tagName === next.tagName) {
          var _children = next.children;
          while (_children[0]) {
            innerList.appendChild(_children[0]);
          }
          var temp = next.nextElementSibling;
          next.parentNode.removeChild(next);
          next = temp;
        }
        if (!insertPrev) {
          if (this.util.isListCell(prev)) {
            originList = prev;
            next = null;
          }
          originList.insertBefore(innerList, next);
          if (!nodePath.s) {
            nodePath.s = this.util.getNodePath(innerList.firstElementChild.firstChild, originList, null);
            nodePath.sl = originList;
          }
          var slPath = originList.contains(nodePath.sl) ? this.util.getNodePath(nodePath.sl, originList) : null;
          nodePath.e = this.util.getNodePath(innerList.lastElementChild.firstChild, originList, null);
          nodePath.el = originList;
          this.util.mergeSameTags(originList, [nodePath.s, nodePath.e, slPath], false);
          this.util.mergeNestedTags(originList);
          if (slPath) {
            nodePath.sl = this.util.getNodeFromPath(slPath, originList);
          }
        }
        return innerList;
      },
      pickup: function pickup(e) {
        e.preventDefault();
        e.stopPropagation();
        var target = e.target;
        var command = "";
        while (!command && !/^UL$/i.test(target.tagName)) {
          command = target.getAttribute("data-command");
          target = target.parentNode;
        }
        if (!command) {
          return;
        }
        var range = this.plugins.list.editList.call(this, command, null, false);
        if (range) {
          this.setRange(range.sc, range.so, range.ec, range.eo);
        }
        this.submenuOff();
        this.history.push(false);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/table.js
var require_table = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/table.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "table",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        var contextTable = context.table = {
          _element: null,
          _tdElement: null,
          _trElement: null,
          _trElements: null,
          _tableXY: [],
          _maxWidth: true,
          _fixedColumn: false,
          _rtl: core.options.rtl,
          cellControllerTop: core.options.tableCellControllerPosition === "top",
          resizeText: null,
          headerButton: null,
          mergeButton: null,
          splitButton: null,
          splitMenu: null,
          maxText: core.lang.controller.maxSize,
          minText: core.lang.controller.minSize,
          _physical_cellCnt: 0,
          _logical_cellCnt: 0,
          _rowCnt: 0,
          _rowIndex: 0,
          _physical_cellIndex: 0,
          _logical_cellIndex: 0,
          _current_colSpan: 0,
          _current_rowSpan: 0,
          icons: {
            expansion: core.icons.expansion,
            reduction: core.icons.reduction
          }
        };
        var listDiv = this.setSubmenu(core);
        var tablePicker = listDiv.querySelector(".ke-controller-table-picker");
        contextTable.tableHighlight = listDiv.querySelector(".ke-table-size-highlighted");
        contextTable.tableUnHighlight = listDiv.querySelector(".ke-table-size-unhighlighted");
        contextTable.tableDisplay = listDiv.querySelector(".ke-table-size-display");
        if (core.options.rtl) {
          contextTable.tableHighlight.style.left = 10 * 18 - 13 + "px";
        }
        var tableController = this.setController_table(core);
        contextTable.tableController = tableController;
        contextTable.resizeButton = tableController.querySelector("._ke_table_resize");
        contextTable.resizeText = tableController.querySelector("._ke_table_resize > span > span");
        contextTable.columnFixedButton = tableController.querySelector("._ke_table_fixed_column");
        contextTable.headerButton = tableController.querySelector("._ke_table_header");
        var resizeDiv = this.setController_tableEditor(core, contextTable.cellControllerTop);
        contextTable.resizeDiv = resizeDiv;
        contextTable.splitMenu = resizeDiv.querySelector(".ke-btn-group-sub");
        contextTable.mergeButton = resizeDiv.querySelector("._ke_table_merge_button");
        contextTable.splitButton = resizeDiv.querySelector("._ke_table_split_button");
        contextTable.insertRowAboveButton = resizeDiv.querySelector("._ke_table_insert_row_a");
        contextTable.insertRowBelowButton = resizeDiv.querySelector("._ke_table_insert_row_b");
        tablePicker.addEventListener("mousemove", this.onMouseMove_tablePicker.bind(core, contextTable));
        tablePicker.addEventListener("click", this.appendTable.bind(core));
        resizeDiv.addEventListener("click", this.onClick_tableController.bind(core));
        tableController.addEventListener("click", this.onClick_tableController.bind(core));
        core.initMenuTarget(this.name, targetElement, listDiv);
        context.element.relative.appendChild(resizeDiv);
        context.element.relative.appendChild(tableController);
        listDiv = null, tablePicker = null, resizeDiv = null, tableController = null, contextTable = null;
      },
      setSubmenu: function setSubmenu(core) {
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-selector-table";
        listDiv.innerHTML = '<div class="ke-table-size"><div class="ke-table-size-picker ke-controller-table-picker"></div><div class="ke-table-size-highlighted"></div><div class="ke-table-size-unhighlighted"></div></div><div class="ke-table-size-display">1 x 1</div>';
        return listDiv;
      },
      setController_table: function setController_table(core) {
        var lang = core.lang;
        var icons = core.icons;
        var tableResize = core.util.createElement("DIV");
        tableResize.className = "ke-controller ke-controller-table";
        tableResize.innerHTML = '<div><div class="ke-btn-group"><button type="button" data-command="resize" class="ke-btn ke-tooltip _ke_table_resize">' + icons.expansion + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.maxSize + '</span></span></button><button type="button" data-command="layout" class="ke-btn ke-tooltip _ke_table_fixed_column">' + icons.fixed_column_width + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.fixedColumnWidth + '</span></span></button><button type="button" data-command="header" class="ke-btn ke-tooltip _ke_table_header">' + icons.table_header + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.tableHeader + '</span></span></button><button type="button" data-command="remove" class="ke-btn ke-tooltip">' + icons.delete + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.remove + "</span></span></button></div></div>";
        return tableResize;
      },
      setController_tableEditor: function setController_tableEditor(core, cellControllerTop) {
        var lang = core.lang;
        var icons = core.icons;
        var tableResize = core.util.createElement("DIV");
        tableResize.className = "ke-controller ke-controller-table-cell";
        tableResize.innerHTML = (cellControllerTop ? "" : '<div class="ke-arrow ke-arrow-up"></div>') + '<div class="ke-btn-group"><button type="button" data-command="insert" data-value="row" data-option="up" class="ke-btn ke-tooltip _ke_table_insert_row_a">' + icons.insert_row_above + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.insertRowAbove + '</span></span></button><button type="button" data-command="insert" data-value="row" data-option="down" class="ke-btn ke-tooltip _ke_table_insert_row_b">' + icons.insert_row_below + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.insertRowBelow + '</span></span></button><button type="button" data-command="delete" data-value="row" class="ke-btn ke-tooltip">' + icons.delete_row + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.deleteRow + '</span></span></button><button type="button" data-command="merge" class="_ke_table_merge_button ke-btn ke-tooltip" disabled>' + icons.merge_cell + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.mergeCells + '</span></span></button></div><div class="ke-btn-group" style="padding-top: 0;"><button type="button" data-command="insert" data-value="cell" data-option="left" class="ke-btn ke-tooltip">' + icons.insert_column_left + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.insertColumnBefore + '</span></span></button><button type="button" data-command="insert" data-value="cell" data-option="right" class="ke-btn ke-tooltip">' + icons.insert_column_right + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.insertColumnAfter + '</span></span></button><button type="button" data-command="delete" data-value="cell" class="ke-btn ke-tooltip">' + icons.delete_column + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.deleteColumn + '</span></span></button><button type="button" data-command="onsplit" class="_ke_table_split_button ke-btn ke-tooltip">' + icons.split_cell + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.splitCells + '</span></span></button><div class="ke-btn-group-sub kothing-editor-common ke-list-layer ke-table-split"><div class="ke-list-inner"><ul class="ke-list-basic"><li class="ke-btn-list" data-command="split" data-value="vertical" style="line-height:32px;" title="' + lang.controller.VerticalSplit + '">' + lang.controller.VerticalSplit + '</li><li class="ke-btn-list" data-command="split" data-value="horizontal" style="line-height:32px;" title="' + lang.controller.HorizontalSplit + '">' + lang.controller.HorizontalSplit + "</li></ul></div></div></div>";
        return tableResize;
      },
      appendTable: function appendTable() {
        var oTable = this.util.createElement("TABLE");
        var createCells = this.plugins.table.createCells;
        var x = this.context.table._tableXY[0];
        var y = this.context.table._tableXY[1];
        var tableHTML = "<tbody>";
        while (y > 0) {
          tableHTML += "<tr>" + createCells.call(this, "td", x) + "</tr>";
          --y;
        }
        tableHTML += "</tbody>";
        oTable.innerHTML = tableHTML;
        var changed = this.insertComponent(oTable, false, true, false);
        if (changed) {
          var firstTd = oTable.querySelector("td div");
          this.setRange(firstTd, 0, firstTd, 0);
          this.plugins.table.reset_table_picker.call(this);
        }
      },
      createCells: function createCells(nodeName, cnt, returnElement) {
        nodeName = nodeName.toLowerCase();
        if (!returnElement) {
          var cellsHTML = "";
          while (cnt > 0) {
            cellsHTML += "<" + nodeName + "><div><br></div></" + nodeName + ">";
            cnt--;
          }
          return cellsHTML;
        } else {
          var cell = this.util.createElement(nodeName);
          cell.innerHTML = "<div><br></div>";
          return cell;
        }
      },
      onMouseMove_tablePicker: function onMouseMove_tablePicker(contextTable, e) {
        e.stopPropagation();
        var x = this._w.Math.ceil(e.offsetX / 18);
        var y = this._w.Math.ceil(e.offsetY / 18);
        x = x < 1 ? 1 : x;
        y = y < 1 ? 1 : y;
        if (contextTable._rtl) {
          contextTable.tableHighlight.style.left = x * 18 - 13 + "px";
          x = 11 - x;
        }
        contextTable.tableHighlight.style.width = x + "em";
        contextTable.tableHighlight.style.height = y + "em";
        this.util.changeTxt(contextTable.tableDisplay, x + " x " + y);
        contextTable._tableXY = [x, y];
      },
      reset_table_picker: function reset_table_picker() {
        if (!this.context.table.tableHighlight) {
          return;
        }
        var highlight = this.context.table.tableHighlight.style;
        var unHighlight = this.context.table.tableUnHighlight.style;
        highlight.width = "1em";
        highlight.height = "1em";
        unHighlight.width = "10em";
        unHighlight.height = "10em";
        this.util.changeTxt(this.context.table.tableDisplay, "1 x 1");
        this.submenuOff();
      },
      init: function init() {
        var contextTable = this.context.table;
        var tablePlugin = this.plugins.table;
        tablePlugin._removeEvents.call(this);
        if (tablePlugin._selectedTable) {
          var selectedCells = tablePlugin._selectedTable.querySelectorAll(".ke-table-selected-cell");
          for (var i = 0, len = selectedCells.length; i < len; i++) {
            this.util.removeClass(selectedCells[i], "ke-table-selected-cell");
          }
        }
        tablePlugin._toggleEditor.call(this, true);
        contextTable._element = null;
        contextTable._tdElement = null;
        contextTable._trElement = null;
        contextTable._trElements = null;
        contextTable._tableXY = [];
        contextTable._maxWidth = true;
        contextTable._fixedColumn = false;
        contextTable._physical_cellCnt = 0;
        contextTable._logical_cellCnt = 0;
        contextTable._rowCnt = 0;
        contextTable._rowIndex = 0;
        contextTable._physical_cellIndex = 0;
        contextTable._logical_cellIndex = 0;
        contextTable._current_colSpan = 0;
        contextTable._current_rowSpan = 0;
        tablePlugin._shift = false;
        tablePlugin._selectedCells = null;
        tablePlugin._selectedTable = null;
        tablePlugin._ref = null;
        tablePlugin._fixedCell = null;
        tablePlugin._selectedCell = null;
        tablePlugin._fixedCellName = null;
      },
      call_controller_tableEdit: function call_controller_tableEdit(tdElement) {
        var tablePlugin = this.plugins.table;
        var contextTable = this.context.table;
        if (!this.getSelection().isCollapsed && !tablePlugin._selectedCell) {
          this.controllersOff();
          this.util.removeClass(tdElement, "ke-table-selected-cell");
          return;
        }
        var tableElement = contextTable._element || this.plugins.table._selectedTable || this.util.getParentElement(tdElement, "TABLE");
        contextTable._maxWidth = this.util.hasClass(tableElement, "ke-table-size-100") || tableElement.style.width === "100%" || !tableElement.style.width && !this.util.hasClass(tableElement, "ke-table-size-auto");
        contextTable._fixedColumn = this.util.hasClass(tableElement, "ke-table-layout-fixed") || tableElement.style.tableLayout === "fixed";
        tablePlugin.setTableStyle.call(this, contextTable._maxWidth ? "width|column" : "width");
        tablePlugin.setPositionControllerTop.call(this, tableElement);
        tablePlugin.setPositionControllerDiv.call(this, tdElement, tablePlugin._shift);
        if (!tablePlugin._shift) {
          this.controllersOn(contextTable.resizeDiv, contextTable.tableController, tablePlugin.init.bind(this), tdElement, "table");
        }
      },
      setPositionControllerTop: function setPositionControllerTop(tableElement) {
        this.setControllerPosition(this.context.table.tableController, tableElement, "top", {
          left: 0,
          top: 0
        });
      },
      setPositionControllerDiv: function setPositionControllerDiv(tdElement, reset) {
        var contextTable = this.context.table;
        var resizeDiv = contextTable.resizeDiv;
        this.plugins.table.setCellInfo.call(this, tdElement, reset);
        if (contextTable.cellControllerTop) {
          this.setControllerPosition(resizeDiv, contextTable._element, "top", {
            left: contextTable.tableController.offsetWidth,
            top: 0
          });
        } else {
          this.setControllerPosition(resizeDiv, tdElement, "bottom", {
            left: 0,
            top: 0
          });
        }
      },
      setCellInfo: function setCellInfo(tdElement, reset) {
        var contextTable = this.context.table;
        var table = contextTable._element = this.plugins.table._selectedTable || this.util.getParentElement(tdElement, "TABLE");
        if (/THEAD/i.test(table.firstElementChild.nodeName)) {
          this.util.addClass(contextTable.headerButton, "active");
        } else {
          this.util.removeClass(contextTable.headerButton, "active");
        }
        if (reset || contextTable._physical_cellCnt === 0) {
          if (contextTable._tdElement !== tdElement) {
            contextTable._tdElement = tdElement;
            contextTable._trElement = tdElement.parentNode;
          }
          var rows = contextTable._trElements = table.rows;
          var cellIndex = tdElement.cellIndex;
          var cellCnt = 0;
          for (var i = 0, cells = rows[0].cells, len = rows[0].cells.length; i < len; i++) {
            cellCnt += cells[i].colSpan;
          }
          var rowIndex = contextTable._rowIndex = contextTable._trElement.rowIndex;
          contextTable._rowCnt = rows.length;
          contextTable._physical_cellCnt = contextTable._trElement.cells.length;
          contextTable._logical_cellCnt = cellCnt;
          contextTable._physical_cellIndex = cellIndex;
          contextTable._current_colSpan = contextTable._tdElement.colSpan - 1;
          contextTable._current_rowSpan - contextTable._trElement.cells[cellIndex].rowSpan - 1;
          var rowSpanArr = [];
          var spanIndex = [];
          for (var _i = 0, _cells, colSpan; _i <= rowIndex; _i++) {
            _cells = rows[_i].cells;
            colSpan = 0;
            for (var c = 0, cLen = _cells.length, cell, cs, rs, logcalIndex; c < cLen; c++) {
              cell = _cells[c];
              cs = cell.colSpan - 1;
              rs = cell.rowSpan - 1;
              logcalIndex = c + colSpan;
              if (spanIndex.length > 0) {
                for (var r = 0, arr; r < spanIndex.length; r++) {
                  arr = spanIndex[r];
                  if (arr.row > _i) {
                    continue;
                  }
                  if (logcalIndex >= arr.index) {
                    colSpan += arr.cs;
                    logcalIndex += arr.cs;
                    arr.rs -= 1;
                    arr.row = _i + 1;
                    if (arr.rs < 1) {
                      spanIndex.splice(r, 1);
                      r--;
                    }
                  } else if (c === cLen - 1) {
                    arr.rs -= 1;
                    arr.row = _i + 1;
                    if (arr.rs < 1) {
                      spanIndex.splice(r, 1);
                      r--;
                    }
                  }
                }
              }
              if (_i === rowIndex && c === cellIndex) {
                contextTable._logical_cellIndex = logcalIndex;
                break;
              }
              if (rs > 0) {
                rowSpanArr.push({
                  index: logcalIndex,
                  cs: cs + 1,
                  rs,
                  row: -1
                });
              }
              colSpan += cs;
            }
            spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {
              return a.index - b.index;
            });
            rowSpanArr = [];
          }
          rowSpanArr = null;
          spanIndex = null;
        }
      },
      editTable: function editTable(type, option) {
        var tablePlugin = this.plugins.table;
        var contextTable = this.context.table;
        var table = contextTable._element;
        var isRow = type === "row";
        if (isRow) {
          var tableAttr = contextTable._trElement.parentNode;
          if (/^THEAD$/i.test(tableAttr.nodeName)) {
            if (option === "up") {
              return;
            } else if (!tableAttr.nextElementSibling || !/^TBODY$/i.test(tableAttr.nextElementSibling.nodeName)) {
              table.innerHTML += "<tbody><tr>" + tablePlugin.createCells.call(this, "td", contextTable._logical_cellCnt, false) + "</tr></tbody>";
              return;
            }
          }
        }
        if (tablePlugin._ref) {
          var positionCell = contextTable._tdElement;
          var selectedCells = tablePlugin._selectedCells;
          if (isRow) {
            if (!option) {
              var row = selectedCells[0].parentNode;
              var removeCells = [selectedCells[0]];
              for (var i = 1, len = selectedCells.length, cell; i < len; i++) {
                cell = selectedCells[i];
                if (row !== cell.parentNode) {
                  removeCells.push(cell);
                  row = cell.parentNode;
                }
              }
              for (var _i2 = 0, _len = removeCells.length; _i2 < _len; _i2++) {
                tablePlugin.setCellInfo.call(this, removeCells[_i2], true);
                tablePlugin.editRow.call(this, option);
              }
            } else {
              tablePlugin.setCellInfo.call(this, option === "up" ? selectedCells[0] : selectedCells[selectedCells.length - 1], true);
              tablePlugin.editRow.call(this, option, positionCell);
            }
          } else {
            var firstRow = selectedCells[0].parentNode;
            if (!option) {
              var _removeCells = [selectedCells[0]];
              for (var _i3 = 1, _len2 = selectedCells.length, _cell; _i3 < _len2; _i3++) {
                _cell = selectedCells[_i3];
                if (firstRow === _cell.parentNode) {
                  _removeCells.push(_cell);
                } else {
                  break;
                }
              }
              for (var _i4 = 0, _len3 = _removeCells.length; _i4 < _len3; _i4++) {
                tablePlugin.setCellInfo.call(this, _removeCells[_i4], true);
                tablePlugin.editCell.call(this, option);
              }
            } else {
              var rightCell = null;
              for (var _i5 = 0, _len4 = selectedCells.length - 1; _i5 < _len4; _i5++) {
                if (firstRow !== selectedCells[_i5 + 1].parentNode) {
                  rightCell = selectedCells[_i5];
                  break;
                }
              }
              tablePlugin.setCellInfo.call(this, option === "left" ? selectedCells[0] : rightCell || selectedCells[0], true);
              tablePlugin.editCell.call(this, option, positionCell);
            }
          }
          if (!option) {
            tablePlugin.init.call(this);
          }
        } else {
          tablePlugin[isRow ? "editRow" : "editCell"].call(this, option);
        }
        if (!option) {
          var children = table.children;
          for (var _i6 = 0; _i6 < children.length; _i6++) {
            if (children[_i6].children.length === 0) {
              this.util.removeItem(children[_i6]);
              _i6--;
            }
          }
          if (table.children.length === 0) {
            this.util.removeItem(table);
          }
        }
      },
      editRow: function editRow(option, positionResetElement) {
        var contextTable = this.context.table;
        var remove = !option;
        var up = option === "up";
        var originRowIndex = contextTable._rowIndex;
        var rowIndex = remove || up ? originRowIndex : originRowIndex + contextTable._current_rowSpan + 1;
        var sign = remove ? -1 : 1;
        var rows = contextTable._trElements;
        var cellCnt = contextTable._logical_cellCnt;
        for (var i = 0, len = originRowIndex + (remove ? -1 : 0), cell; i <= len; i++) {
          cell = rows[i].cells;
          if (cell.length === 0) {
            return;
          }
          for (var c = 0, cLen = cell.length, rs, cs; c < cLen; c++) {
            rs = cell[c].rowSpan;
            cs = cell[c].colSpan;
            if (rs < 2 && cs < 2) {
              continue;
            }
            if (rs + i > rowIndex && rowIndex > i) {
              cell[c].rowSpan = rs + sign;
              cellCnt -= cs;
            }
          }
        }
        if (remove) {
          var next = rows[originRowIndex + 1];
          if (next) {
            var spanCells = [];
            var cells = rows[originRowIndex].cells;
            var colSpan = 0;
            for (var _i7 = 0, _len5 = cells.length, _cell2, logcalIndex; _i7 < _len5; _i7++) {
              _cell2 = cells[_i7];
              logcalIndex = _i7 + colSpan;
              colSpan += _cell2.colSpan - 1;
              if (_cell2.rowSpan > 1) {
                _cell2.rowSpan -= 1;
                spanCells.push({
                  cell: _cell2.cloneNode(false),
                  index: logcalIndex
                });
              }
            }
            if (spanCells.length > 0) {
              var spanCell = spanCells.shift();
              cells = next.cells;
              colSpan = 0;
              for (var _i8 = 0, _len6 = cells.length, _cell3, _logcalIndex; _i8 < _len6; _i8++) {
                _cell3 = cells[_i8];
                _logcalIndex = _i8 + colSpan;
                colSpan += _cell3.colSpan - 1;
                if (_logcalIndex >= spanCell.index) {
                  _i8--, colSpan--;
                  colSpan += spanCell.cell.colSpan - 1;
                  next.insertBefore(spanCell.cell, _cell3);
                  spanCell = spanCells.shift();
                  if (!spanCell) {
                    break;
                  }
                }
              }
              if (spanCell) {
                next.appendChild(spanCell.cell);
                for (var _i9 = 0, _len7 = spanCells.length; _i9 < _len7; _i9++) {
                  next.appendChild(spanCells[_i9].cell);
                }
              }
            }
          }
          contextTable._element.deleteRow(rowIndex);
        } else {
          var newRow = contextTable._element.insertRow(rowIndex);
          newRow.innerHTML = this.plugins.table.createCells.call(this, "td", cellCnt, false);
        }
        if (!remove) {
          this.plugins.table.setPositionControllerDiv.call(this, positionResetElement || contextTable._tdElement, true);
        } else {
          this.controllersOff();
        }
      },
      editCell: function editCell(option, positionResetElement) {
        var contextTable = this.context.table;
        var util = this.util;
        var remove = !option;
        var left = option === "left";
        var colSpan = contextTable._current_colSpan;
        var cellIndex = remove || left ? contextTable._logical_cellIndex : contextTable._logical_cellIndex + colSpan + 1;
        var rows = contextTable._trElements;
        var rowSpanArr = [];
        var spanIndex = [];
        var passCell = 0;
        var removeCell = [];
        var removeSpanArr = [];
        for (var i = 0, len = contextTable._rowCnt, row, insertIndex, cells, newCell, applySpan, cellColSpan; i < len; i++) {
          row = rows[i];
          insertIndex = cellIndex;
          applySpan = false;
          cells = row.cells;
          cellColSpan = 0;
          for (var c = 0, cell, cLen = cells.length, rs, cs, removeIndex; c < cLen; c++) {
            cell = cells[c];
            if (!cell) {
              break;
            }
            rs = cell.rowSpan - 1;
            cs = cell.colSpan - 1;
            if (!remove) {
              if (c >= insertIndex) {
                break;
              }
              if (cs > 0) {
                if (passCell < 1 && cs + c >= insertIndex) {
                  cell.colSpan += 1;
                  insertIndex = null;
                  passCell = rs + 1;
                  break;
                }
                insertIndex -= cs;
              }
              if (!applySpan) {
                for (var r = 0, arr; r < spanIndex.length; r++) {
                  arr = spanIndex[r];
                  insertIndex -= arr.cs;
                  arr.rs -= 1;
                  if (arr.rs < 1) {
                    spanIndex.splice(r, 1);
                    r--;
                  }
                }
                applySpan = true;
              }
            } else {
              removeIndex = c + cellColSpan;
              if (spanIndex.length > 0) {
                var lastCell = !cells[c + 1];
                for (var _r = 0, _arr; _r < spanIndex.length; _r++) {
                  _arr = spanIndex[_r];
                  if (_arr.row > i) {
                    continue;
                  }
                  if (removeIndex >= _arr.index) {
                    cellColSpan += _arr.cs;
                    removeIndex = c + cellColSpan;
                    _arr.rs -= 1;
                    _arr.row = i + 1;
                    if (_arr.rs < 1) {
                      spanIndex.splice(_r, 1);
                      _r--;
                    }
                  } else if (lastCell) {
                    _arr.rs -= 1;
                    _arr.row = i + 1;
                    if (_arr.rs < 1) {
                      spanIndex.splice(_r, 1);
                      _r--;
                    }
                  }
                }
              }
              if (rs > 0) {
                rowSpanArr.push({
                  rs,
                  cs: cs + 1,
                  index: removeIndex,
                  row: -1
                });
              }
              if (removeIndex >= insertIndex && removeIndex + cs <= insertIndex + colSpan) {
                removeCell.push(cell);
              } else if (removeIndex <= insertIndex + colSpan && removeIndex + cs >= insertIndex) {
                cell.colSpan -= util.getOverlapRangeAtIndex(cellIndex, cellIndex + colSpan, removeIndex, removeIndex + cs);
              } else if (rs > 0 && (removeIndex < insertIndex || removeIndex + cs > insertIndex + colSpan)) {
                removeSpanArr.push({
                  cell,
                  i,
                  rs: i + rs
                });
              }
              cellColSpan += cs;
            }
          }
          spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {
            return a.index - b.index;
          });
          rowSpanArr = [];
          if (!remove) {
            if (passCell > 0) {
              passCell -= 1;
              continue;
            }
            if (insertIndex !== null && cells.length > 0) {
              newCell = this.plugins.table.createCells.call(this, cells[0].nodeName, 0, true);
              newCell = row.insertBefore(newCell, cells[insertIndex]);
            }
          }
        }
        if (remove) {
          var removeFirst, removeEnd;
          for (var _r2 = 0, rLen = removeCell.length, _row; _r2 < rLen; _r2++) {
            _row = removeCell[_r2].parentNode;
            util.removeItem(removeCell[_r2]);
            if (_row.cells.length === 0) {
              if (!removeFirst) {
                removeFirst = util.getArrayIndex(rows, _row);
              }
              removeEnd = util.getArrayIndex(rows, _row);
              util.removeItem(_row);
            }
          }
          for (var _c = 0, _cLen = removeSpanArr.length, rowSpanCell; _c < _cLen; _c++) {
            rowSpanCell = removeSpanArr[_c];
            rowSpanCell.cell.rowSpan = util.getOverlapRangeAtIndex(removeFirst, removeEnd, rowSpanCell.i, rowSpanCell.rs);
          }
          this.controllersOff();
        } else {
          this.plugins.table.setPositionControllerDiv.call(this, positionResetElement || contextTable._tdElement, true);
        }
      },
      _closeSplitMenu: null,
      openSplitMenu: function openSplitMenu() {
        this.util.addClass(this.context.table.splitButton, "on");
        this.context.table.splitMenu.style.display = "inline-table";
        this.plugins.table._closeSplitMenu = function() {
          this.util.removeClass(this.context.table.splitButton, "on");
          this.context.table.splitMenu.style.display = "none";
          this.removeDocEvent("click", this.plugins.table._closeSplitMenu);
          this.plugins.table._closeSplitMenu = null;
        }.bind(this);
        this.addDocEvent("click", this.plugins.table._closeSplitMenu);
      },
      splitCells: function splitCells(direction) {
        var util = this.util;
        var vertical = direction === "vertical";
        var contextTable = this.context.table;
        var currentCell = contextTable._tdElement;
        var rows = contextTable._trElements;
        var currentRow = contextTable._trElement;
        var index = contextTable._logical_cellIndex;
        var rowIndex = contextTable._rowIndex;
        var newCell = this.plugins.table.createCells.call(this, currentCell.nodeName, 0, true);
        if (vertical) {
          var currentColSpan = currentCell.colSpan;
          newCell.rowSpan = currentCell.rowSpan;
          if (currentColSpan > 1) {
            newCell.colSpan = this._w.Math.floor(currentColSpan / 2);
            currentCell.colSpan = currentColSpan - newCell.colSpan;
            currentRow.insertBefore(newCell, currentCell.nextElementSibling);
          } else {
            var rowSpanArr = [];
            var spanIndex = [];
            for (var i = 0, len = contextTable._rowCnt, cells, colSpan; i < len; i++) {
              cells = rows[i].cells;
              colSpan = 0;
              for (var c = 0, cLen = cells.length, cell, cs, rs, logcalIndex; c < cLen; c++) {
                cell = cells[c];
                cs = cell.colSpan - 1;
                rs = cell.rowSpan - 1;
                logcalIndex = c + colSpan;
                if (spanIndex.length > 0) {
                  for (var r = 0, arr; r < spanIndex.length; r++) {
                    arr = spanIndex[r];
                    if (arr.row > i) {
                      continue;
                    }
                    if (logcalIndex >= arr.index) {
                      colSpan += arr.cs;
                      logcalIndex += arr.cs;
                      arr.rs -= 1;
                      arr.row = i + 1;
                      if (arr.rs < 1) {
                        spanIndex.splice(r, 1);
                        r--;
                      }
                    } else if (c === cLen - 1) {
                      arr.rs -= 1;
                      arr.row = i + 1;
                      if (arr.rs < 1) {
                        spanIndex.splice(r, 1);
                        r--;
                      }
                    }
                  }
                }
                if (logcalIndex <= index && rs > 0) {
                  rowSpanArr.push({
                    index: logcalIndex,
                    cs: cs + 1,
                    rs,
                    row: -1
                  });
                }
                if (cell !== currentCell && logcalIndex <= index && logcalIndex + cs >= index + currentColSpan - 1) {
                  cell.colSpan += 1;
                  break;
                }
                if (logcalIndex > index) {
                  break;
                }
                colSpan += cs;
              }
              spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {
                return a.index - b.index;
              });
              rowSpanArr = [];
            }
            currentRow.insertBefore(newCell, currentCell.nextElementSibling);
          }
        } else {
          var currentRowSpan = currentCell.rowSpan;
          newCell.colSpan = currentCell.colSpan;
          if (currentRowSpan > 1) {
            newCell.rowSpan = this._w.Math.floor(currentRowSpan / 2);
            var newRowSpan = currentRowSpan - newCell.rowSpan;
            var _rowSpanArr = [];
            var nextRowIndex = util.getArrayIndex(rows, currentRow) + newRowSpan;
            for (var _i10 = 0, _cells2, _colSpan; _i10 < nextRowIndex; _i10++) {
              _cells2 = rows[_i10].cells;
              _colSpan = 0;
              for (var _c2 = 0, _cLen2 = _cells2.length, _cell4, _cs, _logcalIndex2; _c2 < _cLen2; _c2++) {
                _logcalIndex2 = _c2 + _colSpan;
                if (_logcalIndex2 >= index) {
                  break;
                }
                _cell4 = _cells2[_c2];
                _cs = _cell4.rowSpan - 1;
                if (_cs > 0 && _cs + _i10 >= nextRowIndex && _logcalIndex2 < index) {
                  _rowSpanArr.push({
                    index: _logcalIndex2,
                    cs: _cell4.colSpan
                  });
                }
                _colSpan += _cell4.colSpan - 1;
              }
            }
            var nextRow = rows[nextRowIndex];
            var nextCells = nextRow.cells;
            var _rs = _rowSpanArr.shift();
            for (var _c3 = 0, _cLen3 = nextCells.length, _colSpan2 = 0, _cell5, _cs2, _logcalIndex3, insertIndex; _c3 < _cLen3; _c3++) {
              _logcalIndex3 = _c3 + _colSpan2;
              _cell5 = nextCells[_c3];
              _cs2 = _cell5.colSpan - 1;
              insertIndex = _logcalIndex3 + _cs2 + 1;
              if (_rs && insertIndex >= _rs.index) {
                _colSpan2 += _rs.cs;
                insertIndex += _rs.cs;
                _rs = _rowSpanArr.shift();
              }
              if (insertIndex >= index || _c3 === _cLen3 - 1) {
                nextRow.insertBefore(newCell, _cell5.nextElementSibling);
                break;
              }
              _colSpan2 += _cs2;
            }
            currentCell.rowSpan = newRowSpan;
          } else {
            newCell.rowSpan = currentCell.rowSpan;
            var newRow = util.createElement("TR");
            newRow.appendChild(newCell);
            for (var _i11 = 0, _cells4; _i11 < rowIndex; _i11++) {
              _cells4 = rows[_i11].cells;
              if (_cells4.length === 0) {
                return;
              }
              for (var _c4 = 0, _cLen4 = _cells4.length; _c4 < _cLen4; _c4++) {
                if (_i11 + _cells4[_c4].rowSpan - 1 >= rowIndex) {
                  _cells4[_c4].rowSpan += 1;
                }
              }
            }
            var physicalIndex = contextTable._physical_cellIndex;
            var _cells3 = currentRow.cells;
            for (var _c5 = 0, _cLen5 = _cells3.length; _c5 < _cLen5; _c5++) {
              if (_c5 === physicalIndex) {
                continue;
              }
              _cells3[_c5].rowSpan += 1;
            }
            currentRow.parentNode.insertBefore(newRow, currentRow.nextElementSibling);
          }
        }
        this.focusEdge(currentCell);
        this.plugins.table.setPositionControllerDiv.call(this, currentCell, true);
      },
      mergeCells: function mergeCells() {
        var tablePlugin = this.plugins.table;
        var contextTable = this.context.table;
        var util = this.util;
        var ref = tablePlugin._ref;
        var selectedCells = tablePlugin._selectedCells;
        var mergeCell = selectedCells[0];
        var emptyRowFirst = null;
        var emptyRowLast = null;
        var cs = ref.ce - ref.cs + 1;
        var rs = ref.re - ref.rs + 1;
        var mergeHTML = "";
        var row = null;
        for (var i = 1, len = selectedCells.length, cell, ch; i < len; i++) {
          cell = selectedCells[i];
          if (row !== cell.parentNode) {
            row = cell.parentNode;
          }
          ch = cell.children;
          for (var c = 0, cLen = ch.length; c < cLen; c++) {
            if (util.isFormatElement(ch[c]) && util.onlyZeroWidthSpace(ch[c].textContent)) {
              util.removeItem(ch[c]);
            }
          }
          mergeHTML += cell.innerHTML;
          util.removeItem(cell);
          if (row.cells.length === 0) {
            if (!emptyRowFirst) {
              emptyRowFirst = row;
            } else {
              emptyRowLast = row;
            }
            rs -= 1;
          }
        }
        if (emptyRowFirst) {
          var rows = contextTable._trElements;
          var rowIndexFirst = util.getArrayIndex(rows, emptyRowFirst);
          var rowIndexLast = util.getArrayIndex(rows, emptyRowLast || emptyRowFirst);
          var removeRows = [];
          for (var _i12 = 0, cells; _i12 <= rowIndexLast; _i12++) {
            cells = rows[_i12].cells;
            if (cells.length === 0) {
              removeRows.push(rows[_i12]);
              continue;
            }
            for (var _c6 = 0, _cLen6 = cells.length, _cell6, _rs2; _c6 < _cLen6; _c6++) {
              _cell6 = cells[_c6];
              _rs2 = _cell6.rowSpan - 1;
              if (_rs2 > 0 && _i12 + _rs2 >= rowIndexFirst) {
                _cell6.rowSpan -= util.getOverlapRangeAtIndex(rowIndexFirst, rowIndexLast, _i12, _i12 + _rs2);
              }
            }
          }
          for (var _i13 = 0, _len8 = removeRows.length; _i13 < _len8; _i13++) {
            util.removeItem(removeRows[_i13]);
          }
        }
        mergeCell.innerHTML += mergeHTML;
        mergeCell.colSpan = cs;
        mergeCell.rowSpan = rs;
        this.controllersOff();
        tablePlugin.setActiveButton.call(this, true, false);
        tablePlugin.call_controller_tableEdit.call(this, mergeCell);
        util.addClass(mergeCell, "ke-table-selected-cell");
        this.focusEdge(mergeCell);
      },
      toggleHeader: function toggleHeader() {
        var util = this.util;
        var headerButton = this.context.table.headerButton;
        var active = util.hasClass(headerButton, "active");
        var table = this.context.table._element;
        if (!active) {
          var header = util.createElement("THEAD");
          header.innerHTML = "<tr>" + this.plugins.table.createCells.call(this, "th", this.context.table._logical_cellCnt, false) + "</tr>";
          table.insertBefore(header, table.firstElementChild);
        } else {
          util.removeItem(table.querySelector("thead"));
        }
        util.toggleClass(headerButton, "active");
        if (/TH/i.test(this.context.table._tdElement.nodeName)) {
          this.controllersOff();
        } else {
          this.plugins.table.setPositionControllerDiv.call(this, this.context.table._tdElement, false);
        }
      },
      setTableStyle: function setTableStyle(styles) {
        var contextTable = this.context.table;
        var tableElement = contextTable._element;
        var icon, span, sizeIcon, text;
        if (styles.indexOf("width") > -1) {
          icon = contextTable.resizeButton.firstElementChild;
          span = contextTable.resizeText;
          if (!contextTable._maxWidth) {
            sizeIcon = contextTable.icons.expansion;
            text = contextTable.maxText;
            contextTable.columnFixedButton.style.display = "none";
            this.util.removeClass(tableElement, "ke-table-size-100");
            this.util.addClass(tableElement, "ke-table-size-auto");
          } else {
            sizeIcon = contextTable.icons.reduction;
            text = contextTable.minText;
            contextTable.columnFixedButton.style.display = "block";
            this.util.removeClass(tableElement, "ke-table-size-auto");
            this.util.addClass(tableElement, "ke-table-size-100");
          }
          this.util.changeElement(icon, sizeIcon);
          this.util.changeTxt(span, text);
        }
        if (styles.indexOf("column") > -1) {
          if (!contextTable._fixedColumn) {
            this.util.removeClass(tableElement, "ke-table-layout-fixed");
            this.util.addClass(tableElement, "ke-table-layout-auto");
            this.util.removeClass(contextTable.columnFixedButton, "active");
          } else {
            this.util.removeClass(tableElement, "ke-table-layout-auto");
            this.util.addClass(tableElement, "ke-table-layout-fixed");
            this.util.addClass(contextTable.columnFixedButton, "active");
          }
        }
      },
      setActiveButton: function setActiveButton(fixedCell, selectedCell) {
        var contextTable = this.context.table;
        if (/^TH$/i.test(fixedCell.nodeName)) {
          contextTable.insertRowAboveButton.setAttribute("disabled", true);
          contextTable.insertRowBelowButton.setAttribute("disabled", true);
        } else {
          contextTable.insertRowAboveButton.removeAttribute("disabled");
          contextTable.insertRowBelowButton.removeAttribute("disabled");
        }
        if (!selectedCell || fixedCell === selectedCell) {
          contextTable.splitButton.removeAttribute("disabled");
          contextTable.mergeButton.setAttribute("disabled", true);
        } else {
          contextTable.splitButton.setAttribute("disabled", true);
          contextTable.mergeButton.removeAttribute("disabled");
        }
      },
      _bindOnSelect: null,
      _bindOffSelect: null,
      _bindOffShift: null,
      _selectedCells: null,
      _shift: false,
      _fixedCell: null,
      _fixedCellName: null,
      _selectedCell: null,
      _selectedTable: null,
      _ref: null,
      _toggleEditor: function _toggleEditor(enabled) {
        this.context.element.wysiwyg.setAttribute("contenteditable", enabled);
        if (enabled) {
          this.util.removeClass(this.context.element.wysiwyg, "ke-disabled");
        } else {
          this.util.addClass(this.context.element.wysiwyg, "ke-disabled");
        }
      },
      _offCellMultiSelect: function _offCellMultiSelect(e) {
        e.stopPropagation();
        var tablePlugin = this.plugins.table;
        if (!tablePlugin._shift) {
          tablePlugin._removeEvents.call(this);
          tablePlugin._toggleEditor.call(this, true);
        } else if (tablePlugin._initBind) {
          this._wd.removeEventListener("touchmove", tablePlugin._initBind);
          tablePlugin._initBind = null;
        }
        if (!tablePlugin._fixedCell || !tablePlugin._selectedTable) {
          return;
        }
        tablePlugin.setActiveButton.call(this, tablePlugin._fixedCell, tablePlugin._selectedCell);
        tablePlugin.call_controller_tableEdit.call(this, tablePlugin._selectedCell || tablePlugin._fixedCell);
        tablePlugin._selectedCells = tablePlugin._selectedTable.querySelectorAll(".ke-table-selected-cell");
        if (tablePlugin._selectedCell && tablePlugin._fixedCell) {
          this.focusEdge(tablePlugin._selectedCell);
        }
        if (!tablePlugin._shift) {
          tablePlugin._fixedCell = null;
          tablePlugin._selectedCell = null;
          tablePlugin._fixedCellName = null;
        }
      },
      _onCellMultiSelect: function _onCellMultiSelect(e) {
        this._antiBlur = true;
        var tablePlugin = this.plugins.table;
        var target = this.util.getParentElement(e.target, this.util.isCell);
        if (tablePlugin._shift) {
          if (target === tablePlugin._fixedCell) {
            tablePlugin._toggleEditor.call(this, true);
          } else {
            tablePlugin._toggleEditor.call(this, false);
          }
        } else if (!tablePlugin._ref) {
          if (target === tablePlugin._fixedCell) {
            return;
          } else {
            tablePlugin._toggleEditor.call(this, false);
          }
        }
        if (!target || target === tablePlugin._selectedCell || tablePlugin._fixedCellName !== target.nodeName || tablePlugin._selectedTable !== this.util.getParentElement(target, "TABLE")) {
          return;
        }
        tablePlugin._selectedCell = target;
        tablePlugin._setMultiCells.call(this, tablePlugin._fixedCell, target);
      },
      _setMultiCells: function _setMultiCells(startCell, endCell) {
        var tablePlugin = this.plugins.table;
        var rows = tablePlugin._selectedTable.rows;
        var util = this.util;
        var selectedCells = tablePlugin._selectedTable.querySelectorAll(".ke-table-selected-cell");
        for (var i = 0, len = selectedCells.length; i < len; i++) {
          util.removeClass(selectedCells[i], "ke-table-selected-cell");
        }
        if (startCell === endCell) {
          util.addClass(startCell, "ke-table-selected-cell");
          if (!tablePlugin._shift) {
            return;
          }
        }
        var findSelectedCell = true;
        var spanIndex = [];
        var rowSpanArr = [];
        var ref = tablePlugin._ref = {
          _i: 0,
          cs: null,
          ce: null,
          rs: null,
          re: null
        };
        for (var _i14 = 0, _len9 = rows.length, cells, colSpan; _i14 < _len9; _i14++) {
          cells = rows[_i14].cells;
          colSpan = 0;
          for (var c = 0, cLen = cells.length, cell, logcalIndex, cs, rs; c < cLen; c++) {
            cell = cells[c];
            cs = cell.colSpan - 1;
            rs = cell.rowSpan - 1;
            logcalIndex = c + colSpan;
            if (spanIndex.length > 0) {
              for (var r = 0, arr; r < spanIndex.length; r++) {
                arr = spanIndex[r];
                if (arr.row > _i14) {
                  continue;
                }
                if (logcalIndex >= arr.index) {
                  colSpan += arr.cs;
                  logcalIndex += arr.cs;
                  arr.rs -= 1;
                  arr.row = _i14 + 1;
                  if (arr.rs < 1) {
                    spanIndex.splice(r, 1);
                    r--;
                  }
                } else if (c === cLen - 1) {
                  arr.rs -= 1;
                  arr.row = _i14 + 1;
                  if (arr.rs < 1) {
                    spanIndex.splice(r, 1);
                    r--;
                  }
                }
              }
            }
            if (findSelectedCell) {
              if (cell === startCell || cell === endCell) {
                ref.cs = ref.cs !== null && ref.cs < logcalIndex ? ref.cs : logcalIndex;
                ref.ce = ref.ce !== null && ref.ce > logcalIndex + cs ? ref.ce : logcalIndex + cs;
                ref.rs = ref.rs !== null && ref.rs < _i14 ? ref.rs : _i14;
                ref.re = ref.re !== null && ref.re > _i14 + rs ? ref.re : _i14 + rs;
                ref._i += 1;
              }
              if (ref._i === 2) {
                findSelectedCell = false;
                spanIndex = [];
                rowSpanArr = [];
                _i14 = -1;
                break;
              }
            } else if (util.getOverlapRangeAtIndex(ref.cs, ref.ce, logcalIndex, logcalIndex + cs) && util.getOverlapRangeAtIndex(ref.rs, ref.re, _i14, _i14 + rs)) {
              var newCs = ref.cs < logcalIndex ? ref.cs : logcalIndex;
              var newCe = ref.ce > logcalIndex + cs ? ref.ce : logcalIndex + cs;
              var newRs = ref.rs < _i14 ? ref.rs : _i14;
              var newRe = ref.re > _i14 + rs ? ref.re : _i14 + rs;
              if (ref.cs !== newCs || ref.ce !== newCe || ref.rs !== newRs || ref.re !== newRe) {
                ref.cs = newCs;
                ref.ce = newCe;
                ref.rs = newRs;
                ref.re = newRe;
                _i14 = -1;
                spanIndex = [];
                rowSpanArr = [];
                break;
              }
              util.addClass(cell, "ke-table-selected-cell");
            }
            if (rs > 0) {
              rowSpanArr.push({
                index: logcalIndex,
                cs: cs + 1,
                rs,
                row: -1
              });
            }
            colSpan += cell.colSpan - 1;
          }
          spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {
            return a.index - b.index;
          });
          rowSpanArr = [];
        }
      },
      _removeEvents: function _removeEvents() {
        var tablePlugin = this.plugins.table;
        if (tablePlugin._initBind) {
          this._wd.removeEventListener("touchmove", tablePlugin._initBind);
          tablePlugin._initBind = null;
        }
        if (tablePlugin._bindOnSelect) {
          this._wd.removeEventListener("mousedown", tablePlugin._bindOnSelect);
          this._wd.removeEventListener("mousemove", tablePlugin._bindOnSelect);
          tablePlugin._bindOnSelect = null;
        }
        if (tablePlugin._bindOffSelect) {
          this._wd.removeEventListener("mouseup", tablePlugin._bindOffSelect);
          tablePlugin._bindOffSelect = null;
        }
        if (tablePlugin._bindOffShift) {
          this._wd.removeEventListener("keyup", tablePlugin._bindOffShift);
          tablePlugin._bindOffShift = null;
        }
      },
      _initBind: null,
      onTableCellMultiSelect: function onTableCellMultiSelect(tdElement, shift) {
        var tablePlugin = this.plugins.table;
        tablePlugin._removeEvents.call(this);
        this.controllersOff();
        tablePlugin._shift = shift;
        tablePlugin._fixedCell = tdElement;
        tablePlugin._fixedCellName = tdElement.nodeName;
        tablePlugin._selectedTable = this.util.getParentElement(tdElement, "TABLE");
        var selectedCells = tablePlugin._selectedTable.querySelectorAll(".ke-table-selected-cell");
        for (var i = 0, len = selectedCells.length; i < len; i++) {
          this.util.removeClass(selectedCells[i], "ke-table-selected-cell");
        }
        this.util.addClass(tdElement, "ke-table-selected-cell");
        tablePlugin._bindOnSelect = tablePlugin._onCellMultiSelect.bind(this);
        tablePlugin._bindOffSelect = tablePlugin._offCellMultiSelect.bind(this);
        if (!shift) {
          this._wd.addEventListener("mousemove", tablePlugin._bindOnSelect, false);
        } else {
          tablePlugin._bindOffShift = function() {
            this.controllersOn(this.context.table.resizeDiv, this.context.table.tableController, this.plugins.table.init.bind(this), tdElement, "table");
            if (!tablePlugin._ref) {
              this.controllersOff();
            }
          }.bind(this);
          this._wd.addEventListener("keyup", tablePlugin._bindOffShift, false);
          this._wd.addEventListener("mousedown", tablePlugin._bindOnSelect, false);
        }
        this._wd.addEventListener("mouseup", tablePlugin._bindOffSelect, false);
        tablePlugin._initBind = tablePlugin.init.bind(this);
        this._wd.addEventListener("touchmove", tablePlugin._initBind, false);
      },
      onClick_tableController: function onClick_tableController(e) {
        e.stopPropagation();
        var target = e.target.getAttribute("data-command") ? e.target : e.target.parentNode;
        if (target.getAttribute("disabled")) {
          return;
        }
        var command = target.getAttribute("data-command");
        var value = target.getAttribute("data-value");
        var option = target.getAttribute("data-option");
        var tablePlugin = this.plugins.table;
        if (typeof tablePlugin._closeSplitMenu === "function") {
          tablePlugin._closeSplitMenu();
          if (command === "onsplit") {
            return;
          }
        }
        if (!command) {
          return;
        }
        e.preventDefault();
        var contextTable = this.context.table;
        switch (command) {
          case "insert":
          case "delete":
            tablePlugin.editTable.call(this, value, option);
            break;
          case "header":
            tablePlugin.toggleHeader.call(this);
            break;
          case "onsplit":
            tablePlugin.openSplitMenu.call(this);
            break;
          case "split":
            tablePlugin.splitCells.call(this, value);
            break;
          case "merge":
            tablePlugin.mergeCells.call(this);
            break;
          case "resize":
            contextTable._maxWidth = !contextTable._maxWidth;
            tablePlugin.setTableStyle.call(this, "width");
            tablePlugin.setPositionControllerTop.call(this, contextTable._element);
            tablePlugin.setPositionControllerDiv.call(this, contextTable._tdElement, tablePlugin._shift);
            break;
          case "layout":
            contextTable._fixedColumn = !contextTable._fixedColumn;
            tablePlugin.setTableStyle.call(this, "column");
            tablePlugin.setPositionControllerTop.call(this, contextTable._element);
            tablePlugin.setPositionControllerDiv.call(this, contextTable._tdElement, tablePlugin._shift);
            break;
          case "remove":
            var emptyDiv = contextTable._element.parentNode;
            this.util.removeItem(contextTable._element);
            this.controllersOff();
            if (emptyDiv !== this.context.element.wysiwyg) {
              this.util.removeItemAllParents(emptyDiv, function(current) {
                return current.childNodes.length === 0;
              }, null);
            }
            this.focus();
        }
        this.history.push(false);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/formatBlock.js
var require_formatBlock = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/formatBlock.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "formatBlock",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        var icons = core.icons;
        context.formatBlock = {
          targetText: targetElement.querySelector(".txt"),
          targetTooltip: targetElement.parentNode.querySelector(".ke-tooltip-text"),
          _formatList: null,
          currentFormat: "",
          icon: icons.format_block
        };
        var listDiv = this.setSubmenu(core);
        listDiv.querySelector("ul").addEventListener("click", this.pickUp.bind(core));
        context.formatBlock._formatList = listDiv.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null;
      },
      setSubmenu: function setSubmenu(core) {
        var option = core.options;
        var lang_toolbar = core.lang.toolbar;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer ke-list-format";
        var defaultFormats = ["p", "div", "blockquote", "pre", "h1", "h2", "h3", "h4", "h5", "h6"];
        var formatList = !option.formats || option.formats.length === 0 ? defaultFormats : option.formats;
        var list = '<div class="ke-list-inner"><ul class="ke-list-basic">';
        for (var i = 0, len = formatList.length, format, tagName, command, name, h, attrs, className; i < len; i++) {
          format = formatList[i];
          if (typeof format === "string" && defaultFormats.indexOf(format) > -1) {
            tagName = format.toLowerCase();
            command = tagName === "blockquote" ? "range" : tagName === "pre" ? "free" : "replace";
            h = /^h/.test(tagName) ? tagName.match(/\d+/)[0] : "";
            name = lang_toolbar["tag_" + (h ? "h" : tagName)] + h;
            className = "";
            attrs = "";
          } else {
            tagName = format.tag.toLowerCase();
            command = format.command;
            name = format.name || tagName;
            className = format.class;
            attrs = className ? ' class="' + className + '"' : "";
          }
          list += '<li><button type="button" class="ke-btn-list" data-command="' + command + '" data-value="' + tagName + '" data-class="' + className + '" title="' + name + '"><' + tagName + attrs + ">" + name + "</" + tagName + "></button></li>";
        }
        list += "</ul></div>";
        listDiv.innerHTML = list;
        return listDiv;
      },
      active: function active(element) {
        var formatTitle = this.lang.toolbar.formats;
        var target = this.context.formatBlock.targetText.firstElementChild;
        var icon = this.context.formatBlock.icon;
        if (!element) {
          this.util.changeElement(target, icon);
        } else if (this.util.isFormatElement(element)) {
          var formatContext = this.context.formatBlock;
          var formatList = formatContext._formatList;
          var nodeName = element.nodeName.toLowerCase();
          var className = (element.className.match(/(\s|^)__ke__format__[^\s]+/) || [""])[0].trim();
          for (var i = 0, len = formatList.length, f; i < len; i++) {
            f = formatList[i];
            if (nodeName === f.getAttribute("data-value") && className === f.getAttribute("data-class")) {
              formatTitle = f.title;
              break;
            }
          }
          this.util.changeElement(target, "<span>".concat(formatTitle, "</span>"));
          target.setAttribute("data-value", nodeName);
          target.setAttribute("data-class", className);
          return true;
        }
        return false;
      },
      on: function on() {
        var formatContext = this.context.formatBlock;
        var formatList = formatContext._formatList;
        var target = formatContext.targetText;
        var currentFormat = (target.getAttribute("data-value") || "") + (target.getAttribute("data-class") || "");
        if (currentFormat !== formatContext.currentFormat) {
          for (var i = 0, len = formatList.length, f; i < len; i++) {
            f = formatList[i];
            if (currentFormat === f.getAttribute("data-value") + f.getAttribute("data-class")) {
              this.util.addClass(f, "active");
            } else {
              this.util.removeClass(f, "active");
            }
          }
          formatContext.currentFormat = currentFormat;
        }
      },
      pickUp: function pickUp(e) {
        var _this = this;
        e.preventDefault();
        e.stopPropagation();
        var target = e.target;
        var command = null, value = null, tag = null, className = "";
        while (!command && !/UL/i.test(target.tagName)) {
          command = target.getAttribute("data-command");
          value = target.getAttribute("data-value");
          className = target.getAttribute("data-class");
          if (command) {
            tag = target.firstChild;
            break;
          }
          target = target.parentNode;
        }
        if (!command) {
          return;
        }
        if (command === "range") {
          var rangeElement = tag.cloneNode(false);
          this.applyRangeFormatElement(rangeElement);
        } else {
          var range = this.getRange();
          var selectedFormsts = this.getSelectedElementsAndComponents(false);
          if (selectedFormsts.length === 0) {
            range = this.getRange_addLine(range, null);
            selectedFormsts = this.getSelectedElementsAndComponents(false);
            if (selectedFormsts.length === 0) {
              return;
            }
          }
          var startOffset = range.startOffset;
          var endOffset = range.endOffset;
          var util = this.util;
          var first = selectedFormsts[0];
          var last = selectedFormsts[selectedFormsts.length - 1];
          var firstPath = util.getNodePath(range.startContainer, first, null, null);
          var lastPath = util.getNodePath(range.endContainer, last, null, null);
          var rlist = this.detachList(selectedFormsts, false);
          if (rlist.sc) {
            first = rlist.sc;
          }
          if (rlist.ec) {
            last = rlist.ec;
          }
          this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);
          var modifiedFormsts = this.getSelectedElementsAndComponents(false);
          if (command === "free") {
            (function() {
              var len2 = modifiedFormsts.length - 1;
              var parentNode = modifiedFormsts[len2].parentNode;
              var freeElement = tag.cloneNode(false);
              var focusElement = freeElement;
              for (var i2 = len2, f, html, before, next, inner, isComp, _first = true; i2 >= 0; i2--) {
                f = modifiedFormsts[i2];
                if (f === (!modifiedFormsts[i2 + 1] ? null : modifiedFormsts[i2 + 1].parentNode)) {
                  continue;
                }
                isComp = util.isComponent(f);
                html = isComp ? "" : f.innerHTML.replace(/(?!>)\s+(?=<)|\n/g, " ");
                before = util.getParentElement(f, function(current) {
                  return current.parentNode === parentNode;
                });
                if (parentNode !== f.parentNode || isComp) {
                  if (util.isFormatElement(parentNode)) {
                    parentNode.parentNode.insertBefore(freeElement, parentNode.nextSibling);
                    parentNode = parentNode.parentNode;
                  } else {
                    parentNode.insertBefore(freeElement, before ? before.nextSibling : null);
                    parentNode = f.parentNode;
                  }
                  next = freeElement.nextSibling;
                  if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {
                    freeElement.innerHTML += "<BR>" + next.innerHTML;
                    util.removeItem(next);
                  }
                  freeElement = tag.cloneNode(false);
                  _first = true;
                }
                inner = freeElement.innerHTML;
                freeElement.innerHTML = (_first || !html || !inner || /<br>$/i.test(html) ? html : html + "<BR>") + inner;
                if (i2 === 0) {
                  parentNode.insertBefore(freeElement, f);
                  next = f.nextSibling;
                  if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {
                    freeElement.innerHTML += "<BR>" + next.innerHTML;
                    util.removeItem(next);
                  }
                  var prev = freeElement.previousSibling;
                  if (prev && freeElement.nodeName === prev.nodeName && util.isSameAttributes(freeElement, prev)) {
                    prev.innerHTML += "<BR>" + freeElement.innerHTML;
                    util.removeItem(freeElement);
                  }
                }
                if (!isComp) {
                  util.removeItem(f);
                }
                if (html) {
                  _first = false;
                }
              }
              _this.setRange(focusElement, 0, focusElement, 0);
            })();
          } else {
            for (var i = 0, len = modifiedFormsts.length, node, newFormat; i < len; i++) {
              node = modifiedFormsts[i];
              if ((node.nodeName.toLowerCase() !== value.toLowerCase() || (node.className.match(/(\s|^)__ke__format__[^\s]+/) || [""])[0].trim() !== className) && !util.isComponent(node)) {
                newFormat = tag.cloneNode(false);
                util.copyFormatAttributes(newFormat, node);
                newFormat.innerHTML = node.innerHTML;
                node.parentNode.replaceChild(newFormat, node);
              }
              if (i === 0) {
                first = newFormat || node;
              }
              if (i === len - 1) {
                last = newFormat || node;
              }
              newFormat = null;
            }
            this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);
          }
          this.history.push(false);
        }
        this.submenuOff();
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/lineHeight.js
var require_lineHeight = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/lineHeight.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "lineHeight",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        context.lineHeight = {
          _sizeList: null,
          currentSize: -1
        };
        var listDiv = this.setSubmenu(core);
        var listUl = listDiv.querySelector("ul");
        listUl.addEventListener("click", this.pickup.bind(core));
        context.lineHeight._sizeList = listUl.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null, listUl = null;
      },
      setSubmenu: function setSubmenu(core) {
        var option = core.options;
        var lang = core.lang;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer";
        var sizeList = !option.lineHeights ? [{
          text: "1",
          value: 1
        }, {
          text: "1.15",
          value: 1.15
        }, {
          text: "1.5",
          value: 1.5
        }, {
          text: "2",
          value: 2
        }] : option.lineHeights;
        var list = '<div class="ke-list-inner"><ul class="ke-list-basic"><li><button type="button" class="default_value ke-btn-list" title="' + lang.toolbar.default + '">(' + lang.toolbar.default + ")</button></li>";
        for (var i = 0, len = sizeList.length, size; i < len; i++) {
          size = sizeList[i];
          list += '<li><button type="button" class="ke-btn-list" data-value="' + size.value + '" title="' + size.text + '">' + size.text + "</button></li>";
        }
        list += "</ul></div>";
        listDiv.innerHTML = list;
        return listDiv;
      },
      on: function on() {
        var lineHeightContext = this.context.lineHeight;
        var sizeList = lineHeightContext._sizeList;
        var format = this.util.getFormatElement(this.getSelectionNode());
        var currentSize = !format ? "" : format.style.lineHeight + "";
        if (currentSize !== lineHeightContext.currentSize) {
          for (var i = 0, len = sizeList.length; i < len; i++) {
            if (currentSize === sizeList[i].getAttribute("data-value")) {
              this.util.addClass(sizeList[i], "active");
            } else {
              this.util.removeClass(sizeList[i], "active");
            }
          }
          lineHeightContext.currentSize = currentSize;
        }
      },
      pickup: function pickup(e) {
        if (!/^BUTTON$/i.test(e.target.tagName)) {
          return false;
        }
        e.preventDefault();
        e.stopPropagation();
        var value = e.target.getAttribute("data-value") || "";
        var formats = this.getSelectedElements();
        for (var i = 0, len = formats.length; i < len; i++) {
          formats[i].style.lineHeight = value;
        }
        this.submenuOff();
        this.history.push(false);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/template.js
var require_template = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/template.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "template",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        context.template = {};
        var templateDiv = this.setSubmenu(core);
        templateDiv.querySelector("ul").addEventListener("click", this.pickup.bind(core));
        core.initMenuTarget(this.name, targetElement, templateDiv);
        templateDiv = null;
      },
      setSubmenu: function setSubmenu(core) {
        var templateList = core.options.templates;
        if (!templateList || templateList.length === 0) {
          throw Error('[KothingEditor.plugins.template.fail] To use the "template" plugin, please define the "templates" option.');
        }
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-list-layer";
        var list = '<div class="ke-submenu ke-list-inner"><ul class="ke-list-basic">';
        for (var i = 0, len = templateList.length, t; i < len; i++) {
          t = templateList[i];
          list += '<li><button type="button" class="ke-btn-list" data-value="' + i + '" title="' + t.name + '">' + t.name + "</button></li>";
        }
        list += "</ul></div>";
        listDiv.innerHTML = list;
        return listDiv;
      },
      pickup: function pickup(e) {
        if (!/^BUTTON$/i.test(e.target.tagName)) {
          return false;
        }
        e.preventDefault();
        e.stopPropagation();
        var temp = this.options.templates[e.target.getAttribute("data-value")];
        if (temp.html) {
          this.setContents(temp.html);
        } else {
          this.submenuOff();
          throw Error('[KothingEditor.template.fail] cause : "templates[i].html not found"');
        }
        this.submenuOff();
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/paragraphStyle.js
var require_paragraphStyle = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/paragraphStyle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "paragraphStyle",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        context.paragraphStyle = {
          _classList: null
        };
        var listDiv = this.setSubmenu(core);
        listDiv.querySelector("ul").addEventListener("click", this.pickUp.bind(core));
        context.paragraphStyle._classList = listDiv.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null;
      },
      setSubmenu: function setSubmenu(core) {
        var option = core.options;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer ke-list-format";
        var menuLang = core.lang.menu;
        var defaultList = {
          spaced: {
            name: menuLang.spaced,
            class: "__ke__p-spaced",
            _class: ""
          },
          bordered: {
            name: menuLang.bordered,
            class: "__ke__p-bordered",
            _class: ""
          },
          neon: {
            name: menuLang.neon,
            class: "__ke__p-neon",
            _class: ""
          }
        };
        var paragraphStyles = !option.paragraphStyles || option.paragraphStyles.length === 0 ? ["spaced", "bordered", "neon"] : option.paragraphStyles;
        var list = '<div class="ke-list-inner"><ul class="ke-list-basic">';
        for (var i = 0, len = paragraphStyles.length, p, name, attrs, _class; i < len; i++) {
          p = paragraphStyles[i];
          if (typeof p === "string") {
            var defaultStyle = defaultList[p.toLowerCase()];
            if (!defaultStyle) {
              continue;
            }
            p = defaultStyle;
          }
          name = p.name;
          attrs = p.class ? ' class="' + p.class + '"' : "";
          _class = p._class;
          list += '<li><button type="button" class="ke-btn-list' + (_class ? " " + _class : "") + '" data-value="' + p.class + '" title="' + name + '"><div' + attrs + ">" + name + "</div></button></li>";
        }
        list += "</ul></div>";
        listDiv.innerHTML = list;
        return listDiv;
      },
      on: function on() {
        var paragraphContext = this.context.paragraphStyle;
        var paragraphList = paragraphContext._classList;
        var currentFormat = this.util.getFormatElement(this.getSelectionNode());
        for (var i = 0, len = paragraphList.length; i < len; i++) {
          if (this.util.hasClass(currentFormat, paragraphList[i].getAttribute("data-value"))) {
            this.util.addClass(paragraphList[i], "active");
          } else {
            this.util.removeClass(paragraphList[i], "active");
          }
        }
      },
      pickUp: function pickUp(e) {
        e.preventDefault();
        e.stopPropagation();
        var target = e.target;
        var value = null;
        while (!/^UL$/i.test(target.tagName)) {
          value = target.getAttribute("data-value");
          if (value) {
            break;
          }
          target = target.parentNode;
        }
        if (!value) {
          return;
        }
        var selectedFormsts = this.getSelectedElements();
        if (selectedFormsts.length === 0) {
          this.getRange_addLine(this.getRange(), null);
          selectedFormsts = this.getSelectedElements();
          if (selectedFormsts.length === 0) {
            return;
          }
        }
        var toggleClass = this.util.hasClass(target, "active") ? this.util.removeClass.bind(this.util) : this.util.addClass.bind(this.util);
        for (var i = 0, len = selectedFormsts.length; i < len; i++) {
          toggleClass(selectedFormsts[i], value);
        }
        this.submenuOff();
        this.history.push(false);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/submenu/textStyle.js
var require_textStyle = __commonJS({
  "node_modules/kothing-editor/lib/plugins/submenu/textStyle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "textStyle",
      display: "submenu",
      add: function add(core, targetElement) {
        var context = core.context;
        context.textStyle = {
          _styleList: null
        };
        var listDiv = this.setSubmenu(core);
        var listUl = listDiv.querySelector("ul");
        listUl.addEventListener("click", this.pickup.bind(core));
        context.textStyle._styleList = listDiv.querySelectorAll("li button");
        core.initMenuTarget(this.name, targetElement, listDiv);
        listDiv = null, listUl = null;
      },
      setSubmenu: function setSubmenu(core) {
        var option = core.options;
        var listDiv = core.util.createElement("DIV");
        listDiv.className = "ke-submenu ke-list-layer ke-list-format";
        var defaultList = {
          code: {
            name: core.lang.menu.code,
            class: "__ke__t-code",
            tag: "code"
          },
          translucent: {
            name: core.lang.menu.translucent,
            style: "opacity: 0.5;",
            tag: "span"
          },
          shadow: {
            name: core.lang.menu.shadow,
            class: "__ke__t-shadow",
            tag: "span"
          }
        };
        var styleList = !option.textStyles ? core._w.Object.keys(defaultList) : option.textStyles;
        var list = '<div class="ke-list-inner"><ul class="ke-list-basic">';
        for (var i = 0, len = styleList.length, t, tag, name, attrs, command, value, _class; i < len; i++) {
          t = styleList[i];
          attrs = "", value = "", command = [];
          if (typeof t === "string") {
            var defaultStyle = defaultList[t.toLowerCase()];
            if (!defaultStyle) {
              continue;
            }
            t = defaultStyle;
          }
          name = t.name;
          tag = t.tag || "span";
          _class = t._class;
          if (t.style) {
            attrs += ' style="' + t.style + '"';
            value += t.style.replace(/:[^;]+(;|$)\s*/g, ",");
            command.push("style");
          }
          if (t.class) {
            attrs += ' class="' + t.class + '"';
            value += "." + t.class.trim().replace(/\s+/g, ",.");
            command.push("class");
          }
          value = value.replace(/,$/, "");
          list += '<li><button type="button" class="ke-btn-list' + (_class ? " " + _class : "") + '" data-command="' + tag + '" data-value="' + value + '" title="' + name + '"><' + tag + attrs + ">" + name + "</" + tag + "></button></li>";
        }
        list += "</ul></div>";
        listDiv.innerHTML = list;
        return listDiv;
      },
      on: function on() {
        var util = this.util;
        var textStyleContext = this.context.textStyle;
        var styleToolbarItem = textStyleContext._styleList;
        var selectionNode = this.getSelectionNode();
        for (var i = 0, len = styleToolbarItem.length, btn, data, active; i < len; i++) {
          btn = styleToolbarItem[i];
          data = btn.getAttribute("data-value").split(",");
          for (var v = 0, node, value; v < data.length; v++) {
            node = selectionNode;
            active = false;
            while (node && !util.isFormatElement(node) && !util.isComponent(node)) {
              if (node.nodeName.toLowerCase() === btn.getAttribute("data-command").toLowerCase()) {
                value = data[v];
                if (/^\./.test(value) ? util.hasClass(node, value.replace(/^\./, "")) : !!node.style[value]) {
                  active = true;
                  break;
                }
              }
              node = node.parentNode;
            }
            if (!active) {
              break;
            }
          }
          active ? util.addClass(btn, "active") : util.removeClass(btn, "active");
        }
      },
      pickup: function pickup(e) {
        e.preventDefault();
        e.stopPropagation();
        var target = e.target;
        var command = null, tag = null;
        while (!command && !/UL/i.test(target.tagName)) {
          command = target.getAttribute("data-command");
          if (command) {
            tag = target.firstChild;
            break;
          }
          target = target.parentNode;
        }
        if (!command) {
          return;
        }
        var checkStyles = tag.style.cssText.replace(/:.+(;|$)/g, ",").split(",");
        checkStyles.pop();
        var classes = tag.classList;
        for (var i = 0, len = classes.length; i < len; i++) {
          checkStyles.push("." + classes[i]);
        }
        var newNode = this.util.hasClass(target, "active") ? null : tag.cloneNode(false);
        var removeNodes = newNode ? null : [tag.nodeName];
        this.nodeChange(newNode, checkStyles, removeNodes, true);
        this.submenuOff();
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/modules/dialog.js
var require_dialog = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/dialog.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _util2 = _interopRequireDefault(require_util());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      name: "dialog",
      util: _util2.default,
      add: function add(core) {
        var context = core.context;
        context.dialog = {
          kind: "",
          updateModal: false,
          _closeSignal: false
        };
        var dialog_div = core.util.createElement("DIV");
        dialog_div.className = "ke-dialog kothing-editor-common";
        var dialog_back = core.util.createElement("DIV");
        dialog_back.className = "ke-dialog-back";
        dialog_back.style.display = "none";
        var dialog_area = core.util.createElement("DIV");
        dialog_area.className = "ke-dialog-inner";
        dialog_area.style.display = "none";
        dialog_div.appendChild(dialog_back);
        dialog_div.appendChild(dialog_area);
        context.dialog.modalArea = dialog_div;
        context.dialog.back = dialog_back;
        context.dialog.modal = dialog_area;
        context.dialog.modal.addEventListener("mousedown", this._onMouseDown_dialog.bind(core));
        context.dialog.modal.addEventListener("click", this._onClick_dialog.bind(core));
        context.element.relative.appendChild(dialog_div);
        dialog_div = null, dialog_back = null, dialog_area = null;
      },
      _onMouseDown_dialog: function _onMouseDown_dialog(e) {
        if (/ke-dialog-inner/.test(e.target.className)) {
          this.context.dialog._closeSignal = true;
        } else {
          this.context.dialog._closeSignal = false;
        }
      },
      _onClick_dialog: function _onClick_dialog(e) {
        e.stopPropagation();
        if (/close/.test(e.target.getAttribute("data-command")) || this.context.dialog._closeSignal) {
          this.plugins.dialog.close.call(this);
        }
      },
      open: function open(kind, update) {
        if (this.modalForm) {
          return false;
        }
        if (this.plugins.dialog._bindClose) {
          this._d.removeEventListener("keydown", this.plugins.dialog._bindClose);
          this.plugins.dialog._bindClose = null;
        }
        this.plugins.dialog._bindClose = function(e) {
          if (!/27/.test(e.keyCode)) {
            return;
          }
          this.plugins.dialog.close.call(this);
        }.bind(this);
        this._d.addEventListener("keydown", this.plugins.dialog._bindClose);
        this.context.dialog.updateModal = update;
        if (this.context.option.popupDisplay === "full") {
          this.context.dialog.modalArea.style.position = "fixed";
        } else {
          this.context.dialog.modalArea.style.position = "absolute";
        }
        this.context.dialog.kind = kind;
        this.modalForm = this.context[kind].modal;
        var focusElement = this.context[kind].focusElement;
        if (typeof this.plugins[kind].on === "function") {
          this.plugins[kind].on.call(this, update);
        }
        _util2.default.addClass(this.context.dialog.modalArea, "dialog--open");
        this.context.dialog.modalArea.style.display = "block";
        this.context.dialog.back.style.display = "block";
        this.context.dialog.modal.style.display = "block";
        this.modalForm.style.display = "block";
        if (focusElement) {
          focusElement.focus();
        }
      },
      _bindClose: null,
      close: function close() {
        var _this = this;
        if (this.plugins.dialog._bindClose) {
          this._d.removeEventListener("keydown", this.plugins.dialog._bindClose);
          this.plugins.dialog._bindClose = null;
        }
        var contextDialog = this.context.dialog;
        var kind = this.context.dialog.kind;
        _util2.default.removeClass(contextDialog.modalArea, "dialog--open");
        _util2.default.addClass(contextDialog.modalArea, "dialog--close");
        setTimeout(function() {
          _util2.default.removeClass(contextDialog.modalArea, "dialog--close");
          contextDialog.back.style.display = "none";
          contextDialog.modalArea.style.display = "none";
          _this.modalForm.style.display = "none";
          contextDialog.updateModal = false;
          contextDialog.kind = "";
          _this.modalForm = null;
          _this.focus();
        }, 200);
        if (typeof this.plugins[kind].init === "function") {
          this.plugins[kind].init.call(this);
        }
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/modules/selectMenu.js
var require_selectMenu = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/selectMenu.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      name: "selectMenu",
      add: function add(core) {
        core.context.selectMenu = {
          caller: {},
          callerContext: null
        };
      },
      setForm: function setForm() {
        return '<div class="ke-select-list"></div>';
      },
      createList: function createList(listContext, items, html) {
        listContext.form.innerHTML = "<ul>" + html + "</ul>";
        listContext.items = items;
        listContext.menus = listContext.form.querySelectorAll("li");
      },
      initEvent: function initEvent(pluginName, forms) {
        var form = forms.querySelector(".ke-select-list");
        var context = this.context.selectMenu.caller[pluginName] = {
          form,
          items: [],
          menus: [],
          index: -1,
          item: null,
          clickMethod: null,
          callerName: pluginName
        };
        form.addEventListener("mousedown", this.plugins.selectMenu.onMousedown_list);
        form.addEventListener("mousemove", this.plugins.selectMenu.onMouseMove_list.bind(this, context));
        form.addEventListener("click", this.plugins.selectMenu.onClick_list.bind(this, context));
      },
      onMousedown_list: function onMousedown_list(e) {
        e.preventDefault();
        e.stopPropagation();
      },
      onMouseMove_list: function onMouseMove_list(context, e) {
        this.util.addClass(context.form, "__ke_select-menu-mouse-move");
        var index = e.target.getAttribute("data-index");
        if (!index) {
          return;
        }
        context.index = index * 1;
      },
      onClick_list: function onClick_list(context, e) {
        var index = e.target.getAttribute("data-index");
        if (!index) {
          return;
        }
        context.clickMethod.call(this, context.items[index]);
      },
      moveItem: function moveItem(listContext, num) {
        this.util.removeClass(listContext.form, "__ke_select-menu-mouse-move");
        num = listContext.index + num;
        var menus = listContext.menus;
        var len = menus.length;
        var selectIndex = listContext.index = num >= len ? 0 : num < 0 ? len - 1 : num;
        for (var i = 0; i < len; i++) {
          if (i === selectIndex) {
            this.util.addClass(menus[i], "active");
          } else {
            this.util.removeClass(menus[i], "active");
          }
        }
        listContext.item = listContext.items[selectIndex];
      },
      getItem: function getItem(listContext, index) {
        index = !index || index < 0 ? listContext.index : index;
        return listContext.items[index];
      },
      on: function on(callerName, clickMethod) {
        var listContext = this.context.selectMenu.caller[callerName];
        this.context.selectMenu.callerContext = listContext;
        listContext.clickMethod = clickMethod;
        listContext.callerName = callerName;
      },
      open: function open(listContext, positionHandler) {
        var form = listContext.form;
        form.style.visibility = "hidden";
        form.style.display = "block";
        positionHandler(form);
        form.style.visibility = "";
      },
      close: function close(listContext) {
        listContext.form.style.display = "none";
        listContext.items = [];
        listContext.menus = [];
        listContext.index = -1;
        listContext.item = null;
      },
      init: function init(listContext) {
        if (!listContext) {
          return;
        }
        listContext.items = [];
        listContext.menus = [];
        listContext.index = -1;
        listContext.item = null;
        listContext.callerName = "";
        this.context.selectMenu.callerContext = null;
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/modules/anchor.js
var require_anchor = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/anchor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _selectMenu = _interopRequireDefault(require_selectMenu());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      name: "anchor",
      add: function add(core) {
        core.addModule([_selectMenu.default]);
        core.context.anchor = {
          caller: {},
          forms: this.setDialogForm(core),
          host: (core._w.location.origin + core._w.location.pathname).replace(/\/$/, ""),
          callerContext: null
        };
      },
      setDialogForm: function setDialogForm(core) {
        var lang = core.lang;
        var relList = core.options.linkRel;
        var defaultRel = (core.options.linkRelDefault.default || "").split(" ");
        var icons = core.icons;
        var forms = core.util.createElement("DIV");
        var html = '<div class="ke-dialog-body"><div class="ke-dialog-form"><label>' + lang.dialogBox.linkBox.url + '</label><div class="ke-dialog-form-files"><input class="ke-input-form ke-input-url" type="text" placeholder="' + (core.options.protocol || "") + '" /><button type="button" class="ke-btn ke-dialog-files-edge-button _ke_bookmark_button" title="' + lang.dialogBox.linkBox.bookmark + '">' + icons.bookmark + "</button>" + core.plugins.selectMenu.setForm() + '</div><div class="ke-anchor-preview-form"><span class="ke-svg ke-anchor-preview-icon _ke_anchor_bookmark_icon">' + icons.bookmark + '</span><span class="ke-svg ke-anchor-preview-icon _ke_anchor_download_icon">' + icons.download + '</span><pre class="ke-link-preview"></pre></div></div><div class="ke-dialog-form"><label>' + lang.dialogBox.linkBox.text + '</label><input class="ke-input-form _ke_anchor_text" type="text" /></div><div class="ke-dialog-form-footer"><label><input type="checkbox" class="ke-dialog-btn-check _ke_anchor_check" />&nbsp;' + lang.dialogBox.linkBox.newWindowCheck + '</label><label><input type="checkbox" class="ke-dialog-btn-check _ke_anchor_download" />&nbsp;' + lang.dialogBox.linkBox.downloadLinkCheck + "</label>";
        if (relList.length > 0) {
          html += '<div class="ke-anchor-rel"><button type="button" class="ke-btn ke-btn-select ke-anchor-rel-btn">&lt;rel&gt;</button><div class="ke-anchor-rel-wrapper"><pre class="ke-link-preview ke-anchor-rel-preview"></pre></div><div class="ke-list-layer"><div class="ke-list-inner"><ul class="ke-list-basic ke-list-checked">';
          for (var i = 0, len = relList.length, rel; i < len; i++) {
            rel = relList[i];
            html += '<li><button type="button" class="ke-btn-list' + (defaultRel.indexOf(rel) > -1 ? " ke-checked" : "") + '" data-command="' + rel + '" title="' + rel + '"><span class="ke-svg">' + icons.checked + "</span>" + rel + "</button></li>";
          }
          html += "</ul></div></div></div>";
        }
        html += "</div></div>";
        forms.innerHTML = html;
        return forms;
      },
      initEvent: function initEvent(pluginName, forms) {
        var anchorPlugin = this.plugins.anchor;
        var context = this.context.anchor.caller[pluginName] = {
          modal: forms,
          urlInput: null,
          linkDefaultRel: this.options.linkRelDefault,
          defaultRel: this.options.linkRelDefault.default || "",
          currentRel: [],
          linkAnchor: null,
          linkValue: "",
          _change: false,
          callerName: pluginName
        };
        if (typeof context.linkDefaultRel.default === "string") {
          context.linkDefaultRel.default = context.linkDefaultRel.default.trim();
        }
        if (typeof context.linkDefaultRel.check_new_window === "string") {
          context.linkDefaultRel.check_new_window = context.linkDefaultRel.check_new_window.trim();
        }
        if (typeof context.linkDefaultRel.check_bookmark === "string") {
          context.linkDefaultRel.check_bookmark = context.linkDefaultRel.check_bookmark.trim();
        }
        context.urlInput = forms.querySelector(".ke-input-url");
        context.anchorText = forms.querySelector("._ke_anchor_text");
        context.newWindowCheck = forms.querySelector("._ke_anchor_check");
        context.downloadCheck = forms.querySelector("._ke_anchor_download");
        context.download = forms.querySelector("._ke_anchor_download_icon");
        context.preview = forms.querySelector(".ke-link-preview");
        context.bookmark = forms.querySelector("._ke_anchor_bookmark_icon");
        context.bookmarkButton = forms.querySelector("._ke_bookmark_button");
        this.plugins.selectMenu.initEvent.call(this, pluginName, forms);
        var listContext = this.context.selectMenu.caller[pluginName];
        if (this.options.linkRel.length > 0) {
          context.relButton = forms.querySelector(".ke-anchor-rel-btn");
          context.relList = forms.querySelector(".ke-list-layer");
          context.relPreview = forms.querySelector(".ke-anchor-rel-preview");
          context.relButton.addEventListener("click", anchorPlugin.onClick_relButton.bind(this, context));
          context.relList.addEventListener("click", anchorPlugin.onClick_relList.bind(this, context));
        }
        context.newWindowCheck.addEventListener("change", anchorPlugin.onChange_newWindowCheck.bind(this, context));
        context.downloadCheck.addEventListener("change", anchorPlugin.onChange_downloadCheck.bind(this, context));
        context.anchorText.addEventListener("input", anchorPlugin.onChangeAnchorText.bind(this, context));
        context.urlInput.addEventListener("input", anchorPlugin.onChangeUrlInput.bind(this, context));
        context.urlInput.addEventListener("keydown", anchorPlugin.onKeyDownUrlInput.bind(this, listContext));
        context.urlInput.addEventListener("focus", anchorPlugin.onFocusUrlInput.bind(this, context, listContext));
        context.urlInput.addEventListener("blur", anchorPlugin.onBlurUrlInput.bind(this, listContext));
        context.bookmarkButton.addEventListener("click", anchorPlugin.onClick_bookmarkButton.bind(this, context));
      },
      on: function on(contextAnchor, update) {
        if (!update) {
          this.plugins.anchor.init.call(this, contextAnchor);
          contextAnchor.anchorText.value = this.getSelection().toString();
        } else if (contextAnchor.linkAnchor) {
          this.context.dialog.updateModal = true;
          var href = contextAnchor.linkAnchor.href;
          contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = /#.+$/.test(href) ? href.substr(href.lastIndexOf("#")) : href;
          contextAnchor.anchorText.value = contextAnchor.linkAnchor.textContent.trim() || contextAnchor.linkAnchor.getAttribute("alt");
          contextAnchor.newWindowCheck.checked = /_blank/i.test(contextAnchor.linkAnchor.target) ? true : false;
          contextAnchor.downloadCheck.checked = contextAnchor.linkAnchor.download;
        }
        this.context.anchor.callerContext = contextAnchor;
        this.plugins.anchor.setRel.call(this, contextAnchor, update && contextAnchor.linkAnchor ? contextAnchor.linkAnchor.rel : contextAnchor.defaultRel);
        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, contextAnchor.linkValue);
        this.plugins.selectMenu.on.call(this, contextAnchor.callerName, this.plugins.anchor.setHeaderBookmark);
      },
      _closeRelMenu: null,
      toggleRelList: function toggleRelList(contextAnchor, show) {
        if (!show) {
          if (this.plugins.anchor._closeRelMenu) {
            this.plugins.anchor._closeRelMenu();
          }
        } else {
          var target = contextAnchor.relButton;
          var relList = contextAnchor.relList;
          this.util.addClass(target, "active");
          relList.style.visibility = "hidden";
          relList.style.display = "block";
          if (!this.options.rtl) {
            relList.style.left = target.offsetLeft + target.offsetWidth + 1 + "px";
          } else {
            relList.style.left = target.offsetLeft - relList.offsetWidth - 1 + "px";
          }
          relList.style.top = target.offsetTop + target.offsetHeight / 2 - relList.offsetHeight / 2 + "px";
          relList.style.visibility = "";
          this.plugins.anchor._closeRelMenu = function(context, target2, e) {
            if (e && (context.relButton.contains(e.target) || context.relList.contains(e.target))) {
              return;
            }
            this.util.removeClass(target2, "active");
            context.relList.style.display = "none";
            this.modalForm.removeEventListener("click", this.plugins.anchor._closeRelMenu);
            this.plugins.anchor._closeRelMenu = null;
          }.bind(this, contextAnchor, target);
          this.modalForm.addEventListener("click", this.plugins.anchor._closeRelMenu);
        }
      },
      onClick_relButton: function onClick_relButton(contextAnchor, e) {
        this.plugins.anchor.toggleRelList.call(this, contextAnchor, !this.util.hasClass(e.target, "active"));
      },
      onClick_relList: function onClick_relList(contextAnchor, e) {
        var target = e.target;
        var cmd = target.getAttribute("data-command");
        if (!cmd) {
          return;
        }
        var current = contextAnchor.currentRel;
        var checked = this.util.toggleClass(target, "ke-checked");
        var index = current.indexOf(cmd);
        if (checked) {
          if (index === -1) {
            current.push(cmd);
          }
        } else {
          if (index > -1) {
            current.splice(index, 1);
          }
        }
        contextAnchor.relPreview.title = contextAnchor.relPreview.textContent = current.join(" ");
      },
      setRel: function setRel(contextAnchor, relAttr) {
        var relListEl = contextAnchor.relList;
        var rels = contextAnchor.currentRel = !relAttr ? [] : relAttr.split(" ");
        if (!relListEl) {
          return;
        }
        var checkedRel = relListEl.querySelectorAll("button");
        for (var i = 0, len = checkedRel.length, cmd; i < len; i++) {
          cmd = checkedRel[i].getAttribute("data-command");
          if (rels.indexOf(cmd) > -1) {
            this.util.addClass(checkedRel[i], "ke-checked");
          } else {
            this.util.removeClass(checkedRel[i], "ke-checked");
          }
        }
        contextAnchor.relPreview.title = contextAnchor.relPreview.textContent = rels.join(" ");
      },
      createHeaderList: function createHeaderList(contextAnchor, contextList, urlValue) {
        var headers = this.util.getListChildren(this.context.element.wysiwyg, function(current) {
          return /h[1-6]/i.test(current.nodeName);
        });
        if (headers.length === 0) {
          return;
        }
        var valueRegExp = new this._w.RegExp("^" + urlValue.replace(/^#/, ""), "i");
        var list = [];
        var html = "";
        for (var i = 0, len = headers.length, h; i < len; i++) {
          h = headers[i];
          if (!valueRegExp.test(h.textContent)) {
            continue;
          }
          list.push(h);
          html += '<li class="ke-select-item" data-index="' + i + '">' + h.textContent + "</li>";
        }
        if (list.length === 0) {
          this.plugins.selectMenu.close.call(this, contextList);
        } else {
          this.plugins.selectMenu.createList(contextList, list, html);
          this.plugins.selectMenu.open.call(this, contextList, this.plugins.anchor._setMenuListPosition.bind(this, contextAnchor));
        }
      },
      _setMenuListPosition: function _setMenuListPosition(contextAnchor, list) {
        list.style.top = contextAnchor.urlInput.offsetHeight + 1 + "px";
      },
      onKeyDownUrlInput: function onKeyDownUrlInput(contextList, e) {
        var keyCode = e.keyCode;
        switch (keyCode) {
          case 38:
            e.preventDefault();
            e.stopPropagation();
            this.plugins.selectMenu.moveItem.call(this, contextList, -1);
            break;
          case 40:
            e.preventDefault();
            e.stopPropagation();
            this.plugins.selectMenu.moveItem.call(this, contextList, 1);
            break;
          case 13:
            if (contextList.index > -1) {
              e.preventDefault();
              e.stopPropagation();
              this.plugins.anchor.setHeaderBookmark.call(this, this.plugins.selectMenu.getItem(contextList, null));
            }
            break;
        }
      },
      setHeaderBookmark: function setHeaderBookmark(header) {
        var contextAnchor = this.context.anchor.callerContext;
        var id = header.id || "h_" + this._w.Math.random().toString().replace(/.+\./, "");
        header.id = id;
        contextAnchor.urlInput.value = "#" + id;
        if (!contextAnchor.anchorText.value.trim() || !contextAnchor._change) {
          contextAnchor.anchorText.value = header.textContent;
        }
        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, contextAnchor.urlInput.value);
        this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);
        this.context.anchor.callerContext.urlInput.focus();
      },
      onChangeAnchorText: function onChangeAnchorText(contextAnchor, e) {
        contextAnchor._change = !!e.target.value.trim();
      },
      onChangeUrlInput: function onChangeUrlInput(contextAnchor, e) {
        var value = e.target.value.trim();
        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, value);
        if (/^#/.test(value)) {
          this.plugins.anchor.createHeaderList.call(this, contextAnchor, this.context.selectMenu.callerContext, value);
        } else {
          this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);
        }
      },
      onFocusUrlInput: function onFocusUrlInput(contextAnchor, contextLink) {
        var value = contextAnchor.urlInput.value;
        if (/^#/.test(value)) {
          this.plugins.anchor.createHeaderList.call(this, contextAnchor, contextLink, value);
        }
      },
      onBlurUrlInput: function onBlurUrlInput(contextList) {
        this.plugins.selectMenu.close.call(this, contextList);
      },
      setLinkPreview: function setLinkPreview(context, value) {
        var preview = context.preview;
        var protocol = this.options.linkProtocol;
        var reservedProtocol = /^(mailto:|tel:|sms:|https*:\/\/|#)/.test(value);
        var sameProtocol = !protocol ? false : this._w.RegExp("^" + value.substr(0, protocol.length)).test(protocol);
        context.linkValue = preview.textContent = !value ? "" : protocol && !reservedProtocol && !sameProtocol ? protocol + value : reservedProtocol ? value : /^www\./.test(value) ? "http://" + value : this.context.anchor.host + (/^\//.test(value) ? "" : "/") + value;
        if (value.indexOf("#") === 0) {
          context.bookmark.style.display = "inline-block";
          this.util.addClass(context.bookmarkButton, "active");
        } else {
          context.bookmark.style.display = "none";
          this.util.removeClass(context.bookmarkButton, "active");
        }
        if (value.indexOf("#") === -1 && context.downloadCheck.checked) {
          context.download.style.display = "block";
        } else {
          context.download.style.display = "none";
        }
      },
      setCtx: function setCtx(anchor, contextAnchor) {
        if (!anchor) {
          return;
        }
        contextAnchor.linkAnchor = anchor;
        contextAnchor.linkValue = anchor.href;
        contextAnchor.currentRel = anchor.rel.split(" ");
      },
      updateAnchor: function updateAnchor(anchor, url, alt, contextAnchor, notText) {
        if (!/^#/.test(url) && contextAnchor.downloadCheck.checked) {
          anchor.setAttribute("download", alt || url);
        } else {
          anchor.removeAttribute("download");
        }
        if (contextAnchor.newWindowCheck.checked) {
          anchor.target = "_blank";
        } else {
          anchor.removeAttribute("target");
        }
        var rel = contextAnchor.currentRel.join(" ");
        if (!rel) {
          anchor.removeAttribute("rel");
        } else {
          anchor.rel = rel;
        }
        anchor.href = url;
        anchor.setAttribute("alt", alt);
        if (notText) {
          if (anchor.children.length === 0) {
            anchor.textContent = "";
          }
        } else {
          anchor.textContent = alt;
        }
      },
      createAnchor: function createAnchor(contextAnchor, notText) {
        if (contextAnchor.linkValue.length === 0) {
          return null;
        }
        var url = contextAnchor.linkValue;
        var anchor = contextAnchor.anchorText;
        var anchorText = anchor.value.length === 0 ? url : anchor.value;
        var oA = contextAnchor.linkAnchor || this.util.createElement("A");
        this.plugins.anchor.updateAnchor(oA, url, anchorText, contextAnchor, notText);
        contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = contextAnchor.anchorText.value = "";
        return oA;
      },
      onClick_bookmarkButton: function onClick_bookmarkButton(contextAnchor) {
        var url = contextAnchor.urlInput.value;
        if (/^#/.test(url)) {
          url = url.substr(1);
          contextAnchor.bookmark.style.display = "none";
          this.util.removeClass(contextAnchor.bookmarkButton, "active");
          this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);
        } else {
          url = "#" + url;
          contextAnchor.bookmark.style.display = "block";
          this.util.addClass(contextAnchor.bookmarkButton, "active");
          contextAnchor.downloadCheck.checked = false;
          contextAnchor.download.style.display = "none";
          this.plugins.anchor.createHeaderList.call(this, contextAnchor, this.context.selectMenu.callerContext, url);
        }
        contextAnchor.urlInput.value = url;
        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, url);
        contextAnchor.urlInput.focus();
      },
      onChange_newWindowCheck: function onChange_newWindowCheck(contextAnchor, e) {
        if (typeof contextAnchor.linkDefaultRel.check_new_window !== "string") {
          return;
        }
        if (e.target.checked) {
          this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relMerge.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_new_window));
        } else {
          this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relDelete.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_new_window));
        }
      },
      onChange_downloadCheck: function onChange_downloadCheck(contextAnchor, e) {
        if (e.target.checked) {
          contextAnchor.download.style.display = "block";
          contextAnchor.bookmark.style.display = "none";
          this.util.removeClass(contextAnchor.bookmarkButton, "active");
          contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = contextAnchor.urlInput.value.replace(/^#+/, "");
          if (typeof contextAnchor.linkDefaultRel.check_bookmark === "string") {
            this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relMerge.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_bookmark));
          }
        } else {
          contextAnchor.download.style.display = "none";
          if (typeof contextAnchor.linkDefaultRel.check_bookmark === "string") {
            this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relDelete.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_bookmark));
          }
        }
      },
      _relMerge: function _relMerge(contextAnchor, relAttr) {
        var current = contextAnchor.currentRel;
        if (!relAttr) {
          return current.join(" ");
        }
        if (/^only:/.test(relAttr)) {
          relAttr = relAttr.replace(/^only:/, "").trim();
          contextAnchor.currentRel = relAttr.split(" ");
          return relAttr;
        }
        var rels = relAttr.split(" ");
        for (var i = 0, len = rels.length, index; i < len; i++) {
          index = current.indexOf(rels[i]);
          if (index === -1) {
            current.push(rels[i]);
          }
        }
        return current.join(" ");
      },
      _relDelete: function _relDelete(contextAnchor, relAttr) {
        if (!relAttr) {
          return contextAnchor.currentRel.join(" ");
        }
        if (/^only:/.test(relAttr)) {
          relAttr = relAttr.replace(/^only:/, "").trim();
        }
        var rels = contextAnchor.currentRel.join(" ").replace(this._w.RegExp(relAttr + "\\s*"), "");
        contextAnchor.currentRel = rels.split(" ");
        return rels;
      },
      init: function init(contextAnchor) {
        contextAnchor.linkAnchor = null;
        contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = "";
        contextAnchor.anchorText.value = "";
        contextAnchor.newWindowCheck.checked = false;
        contextAnchor.downloadCheck.checked = false;
        contextAnchor._change = false;
        this.plugins.anchor.setRel.call(this, contextAnchor, contextAnchor.defaultRel);
        if (contextAnchor.relList) {
          this.plugins.anchor.toggleRelList.call(this, contextAnchor, false);
        }
        this.context.anchor.callerContext = null;
        this.plugins.selectMenu.init.call(this, this.context.selectMenu.callerContext);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/dialog/link.js
var require_link = __commonJS({
  "node_modules/kothing-editor/lib/plugins/dialog/link.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _dialog = _interopRequireDefault(require_dialog());
    var _anchor = _interopRequireDefault(require_anchor());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      name: "link",
      display: "dialog",
      add: function add(core) {
        core.addModule([_dialog.default, _anchor.default]);
        var context = core.context;
        var contextLink = context.link = {
          focusElement: null,
          _linkAnchor: null,
          anchorCtx: null
        };
        var link_dialog = this.setDialog(core);
        contextLink.modal = link_dialog;
        var link_controller = this.setController_LinkButton(core);
        contextLink.linkController = link_controller;
        link_dialog.querySelector("form").addEventListener("submit", this.submit.bind(core));
        link_controller.addEventListener("click", this.onClick_linkController.bind(core));
        context.dialog.modal.appendChild(link_dialog);
        context.element.relative.appendChild(link_controller);
        core.plugins.anchor.initEvent.call(core, "link", link_dialog);
        contextLink.focusElement = context.anchor.caller.link.urlInput;
        link_dialog = null, link_controller = null;
      },
      setDialog: function setDialog(core) {
        var lang = core.lang;
        var dialog = core.util.createElement("DIV");
        var icons = core.icons;
        dialog.className = "ke-dialog-content";
        dialog.style.display = "none";
        var html = '<form><div class="ke-dialog-header"><button type="button" data-command="close" class="ke-btn ke-dialog-close" aria-label="Close" title="' + lang.dialogBox.close + '">' + icons.cancel + '</button><span class="ke-modal-title">' + lang.dialogBox.linkBox.title + "</span></div>" + core.context.anchor.forms.innerHTML + '<div class="ke-dialog-footer"><button type="submit" class="ke-btn-primary" title="' + lang.dialogBox.submitButton + '"><span>' + lang.dialogBox.submitButton + "</span></button></div></form>";
        dialog.innerHTML = html;
        return dialog;
      },
      setController_LinkButton: function setController_LinkButton(core) {
        var lang = core.lang;
        var icons = core.icons;
        var link_btn = core.util.createElement("DIV");
        link_btn.className = "ke-controller ke-controller-link";
        link_btn.innerHTML = '<div class="ke-arrow ke-arrow-up"></div><div class="link-content"><span><a target="_blank" href=""></a>&nbsp;</span><div class="ke-btn-group"><button type="button" data-command="update" tabindex="-1" class="ke-btn ke-tooltip">' + icons.edit + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.edit + '</span></span></button><button type="button" data-command="unlink" tabindex="-1" class="ke-btn ke-tooltip">' + icons.unlink + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.unlink + '</span></span></button><button type="button" data-command="delete" tabindex="-1" class="ke-btn ke-tooltip">' + icons.delete + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.remove + "</span></span></button></div></div>";
        return link_btn;
      },
      open: function open() {
        this.plugins.dialog.open.call(this, "link", this.currentControllerName === "link");
      },
      submit: function submit(e) {
        this.showLoading();
        e.preventDefault();
        e.stopPropagation();
        try {
          var oA = this.plugins.anchor.createAnchor.call(this, this.context.anchor.caller.link, false);
          if (!this.context.dialog.updateModal) {
            var selectedFormats = this.getSelectedElements();
            if (selectedFormats.length > 1) {
              var oFormat = this.util.createElement(selectedFormats[0].nodeName);
              oFormat.appendChild(oA);
              if (!this.insertNode(oFormat, null, true)) {
                return;
              }
            } else {
              if (!this.insertNode(oA, null, true)) {
                return;
              }
            }
            this.setRange(oA.childNodes[0], 0, oA.childNodes[0], oA.textContent.length);
          } else {
            var textNode = this.context.link._linkAnchor.childNodes[0];
            this.setRange(textNode, 0, textNode, textNode.textContent.length);
          }
        } finally {
          this.plugins.dialog.close.call(this);
          this.closeLoading();
          this.history.push(false);
        }
        return false;
      },
      active: function active(element) {
        if (!element) {
          if (this.controllerArray.indexOf(this.context.link.linkController) > -1) {
            this.controllersOff();
          }
        } else if (this.util.isAnchor(element) && element.getAttribute("data-image-link") === null) {
          if (this.controllerArray.indexOf(this.context.link.linkController) < 0) {
            this.plugins.link.call_controller.call(this, element);
          }
          return true;
        }
        return false;
      },
      on: function on(update) {
        this.plugins.anchor.on.call(this, this.context.anchor.caller.link, update);
      },
      call_controller: function call_controller(selectionATag) {
        this.editLink = this.context.link._linkAnchor = this.context.anchor.caller.link.linkAnchor = selectionATag;
        var linkBtn = this.context.link.linkController;
        var link = linkBtn.querySelector("a");
        link.href = selectionATag.href;
        link.title = selectionATag.textContent;
        link.textContent = selectionATag.textContent;
        this.util.addClass(selectionATag, "on");
        this.setControllerPosition(linkBtn, selectionATag, "bottom", {
          left: 0,
          top: 0
        });
        this.controllersOn(linkBtn, selectionATag, "link", this.util.removeClass.bind(this.util, this.context.link._linkAnchor, "on"));
      },
      onClick_linkController: function onClick_linkController(e) {
        e.stopPropagation();
        var command = e.target.getAttribute("data-command") || e.target.parentNode.getAttribute("data-command");
        if (!command) {
          return;
        }
        e.preventDefault();
        if (/update/.test(command)) {
          this.plugins.dialog.open.call(this, "link", true);
        } else if (/unlink/.test(command)) {
          var sc = this.util.getChildElement(this.context.link._linkAnchor, function(current) {
            return current.childNodes.length === 0 || current.nodeType === 3;
          }, false);
          var ec = this.util.getChildElement(this.context.link._linkAnchor, function(current) {
            return current.childNodes.length === 0 || current.nodeType === 3;
          }, true);
          this.setRange(sc, 0, ec, ec.textContent.length);
          this.nodeChange(null, null, ["A"], false);
        } else {
          this.util.removeItem(this.context.link._linkAnchor);
          this.context.anchor.caller.link.linkAnchor = null;
          this.focus();
          this.history.push(false);
        }
        this.controllersOff();
      },
      init: function init() {
        this.context.link.linkController.style.display = "none";
        this.plugins.anchor.init.call(this, this.context.anchor.caller.link);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/modules/component.js
var require_component = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/component.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    (function(global, factory) {
      if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("KothingEditor_MODULES a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    })(typeof window !== "undefined" ? window : void 0, function(window2, noGlobal) {
      var component = {
        name: "component",
        set_container: function set_container(cover, className) {
          var container = this.util.createElement("DIV");
          container.className = "ke-component " + className;
          container.setAttribute("contenteditable", false);
          container.appendChild(cover);
          return container;
        },
        set_cover: function set_cover(element) {
          var cover = this.util.createElement("FIGURE");
          cover.appendChild(element);
          return cover;
        },
        create_caption: function create_caption() {
          var caption = this.util.createElement("FIGCAPTION");
          caption.setAttribute("contenteditable", true);
          caption.innerHTML = "<div>" + this.lang.dialogBox.caption + "</div>";
          return caption;
        }
      };
      if (_typeof(noGlobal) === (true ? "undefined" : _typeof(void 0))) {
        if (!window2.KothingEditor_MODULES) {
          Object.defineProperty(window2, "KothingEditor_MODULES", {
            enumerable: true,
            writable: false,
            configurable: false,
            value: {}
          });
        }
        Object.defineProperty(window2.KothingEditor_MODULES, "component", {
          enumerable: true,
          writable: false,
          configurable: false,
          value: component
        });
      }
      return component;
    });
  }
});

// node_modules/kothing-editor/lib/plugins/modules/resizing.js
var require_resizing = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/resizing.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    (function(global, factory) {
      if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("KothingEditor_MODULES a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    })(typeof window !== "undefined" ? window : void 0, function(window2, noGlobal) {
      var resizing = {
        name: "resizing",
        add: function add(core) {
          var icons = core.icons;
          var context = core.context;
          context.resizing = {
            _resizeClientX: 0,
            _resizeClientY: 0,
            _resize_plugin: "",
            _resize_w: 0,
            _resize_h: 0,
            _origin_w: 0,
            _origin_h: 0,
            _rotateVertical: false,
            _resize_direction: "",
            _move_path: null,
            _isChange: false,
            alignIcons: {
              basic: icons.align_justify,
              left: icons.align_left,
              right: icons.align_right,
              center: icons.align_center
            }
          };
          var resize_div_container = this.setController_resize(core);
          context.resizing.resizeContainer = resize_div_container;
          context.resizing.resizeDiv = resize_div_container.querySelector(".ke-modal-resize");
          context.resizing.resizeDot = resize_div_container.querySelector(".ke-resize-dot");
          context.resizing.resizeDisplay = resize_div_container.querySelector(".ke-resize-display");
          var resize_button = this.setController_button(core);
          context.resizing.resizeButton = resize_button;
          var resize_handles = context.resizing.resizeHandles = context.resizing.resizeDot.querySelectorAll("span");
          context.resizing.resizeButtonGroup = resize_button.querySelector("._ke_resizing_btn_group");
          context.resizing.rotationButtons = resize_button.querySelectorAll("._ke_resizing_btn_group ._ke_rotation");
          context.resizing.percentageButtons = resize_button.querySelectorAll("._ke_resizing_btn_group ._ke_percentage");
          context.resizing.alignMenu = resize_button.querySelector(".ke-resizing-align-list");
          context.resizing.alignMenuList = context.resizing.alignMenu.querySelectorAll("button");
          context.resizing.alignButton = resize_button.querySelector("._ke_resizing_align_button");
          context.resizing.autoSizeButton = resize_button.querySelector("._ke_resizing_btn_group ._ke_auto_size");
          context.resizing.captionButton = resize_button.querySelector("._ke_resizing_caption_button");
          resize_div_container.addEventListener("mousedown", function(e) {
            e.preventDefault();
          });
          resize_handles[0].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(core));
          resize_handles[1].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(core));
          resize_handles[2].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(core));
          resize_handles[3].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(core));
          resize_handles[4].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(core));
          resize_handles[5].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(core));
          resize_handles[6].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(core));
          resize_handles[7].addEventListener("mousedown", this.onMouseDown_resize_handle.bind(core));
          resize_button.addEventListener("click", this.onClick_resizeButton.bind(core));
          context.element.relative.appendChild(resize_div_container);
          context.element.relative.appendChild(resize_button);
          resize_div_container = null, resize_button = null, resize_handles = null;
        },
        setController_resize: function setController_resize(core) {
          var resize_container = core.util.createElement("DIV");
          resize_container.className = "ke-controller ke-resizing-container";
          resize_container.style.display = "none";
          resize_container.innerHTML = '<div class="ke-modal-resize"></div><div class="ke-resize-dot"><span class="tl"></span><span class="tr"></span><span class="bl"></span><span class="br"></span><span class="lw"></span><span class="th"></span><span class="rw"></span><span class="bh"></span><div class="ke-resize-display"></div></div>';
          return resize_container;
        },
        setController_button: function setController_button(core) {
          var lang = core.lang;
          var icons = core.icons;
          var resize_button = core.util.createElement("DIV");
          resize_button.className = "ke-controller ke-controller-resizing";
          resize_button.innerHTML = '<div class="ke-arrow ke-arrow-up"></div><div class="ke-btn-group _ke_resizing_btn_group"><button type="button" data-command="percent" data-value="1" class="ke-tooltip _ke_percentage"><span>100%</span><span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.resize100 + '</span></span></button><button type="button" data-command="percent" data-value="0.75" class="ke-tooltip _ke_percentage"><span>75%</span><span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.resize75 + '</span></span></button><button type="button" data-command="percent" data-value="0.5" class="ke-tooltip _ke_percentage"><span>50%</span><span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.resize50 + '</span></span></button><button type="button" data-command="auto" class="ke-btn ke-tooltip _ke_auto_size">' + icons.auto_size + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.autoSize + '</span></span></button><button type="button" data-command="rotate" data-value="-90" class="ke-btn ke-tooltip _ke_rotation">' + icons.rotate_left + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.rotateLeft + '</span></span></button><button type="button" data-command="rotate" data-value="90" class="ke-btn ke-tooltip _ke_rotation">' + icons.rotate_right + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.rotateRight + '</span></span></button></div><div class="ke-btn-group" style="padding-top: 0;"><button type="button" data-command="mirror" data-value="h" class="ke-btn ke-tooltip">' + icons.mirror_horizontal + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.mirrorHorizontal + '</span></span></button><button type="button" data-command="mirror" data-value="v" class="ke-btn ke-tooltip">' + icons.mirror_vertical + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.mirrorVertical + '</span></span></button><button type="button" data-command="onalign" class="ke-btn ke-tooltip _ke_resizing_align_button">' + icons.align_justify + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.toolbar.align + '</span></span></button><div class="ke-btn-group-sub kothing-editor-common ke-list-layer ke-resizing-align-list"><div class="ke-list-inner"><ul class="ke-list-basic"><li><button type="button" class="ke-btn-list ke-tooltip" data-command="align" data-value="basic">' + icons.align_justify + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.dialogBox.basic + '</span></span></button></li><li><button type="button" class="ke-btn-list ke-tooltip" data-command="align" data-value="left">' + icons.align_left + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.dialogBox.left + '</span></span></button></li><li><button type="button" class="ke-btn-list ke-tooltip" data-command="align" data-value="center">' + icons.align_center + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.dialogBox.center + '</span></span></button></li><li><button type="button" class="ke-btn-list ke-tooltip" data-command="align" data-value="right">' + icons.align_right + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.dialogBox.right + '</span></span></button></li></ul></div></div><button type="button" data-command="caption" class="ke-btn ke-tooltip _ke_resizing_caption_button">' + icons.caption + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.dialogBox.caption + '</span></span></button><button type="button" data-command="revert" class="ke-btn ke-tooltip">' + icons.revert + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.dialogBox.revertButton + '</span></span></button><button type="button" data-command="update" class="ke-btn ke-tooltip">' + icons.modify + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.edit + '</span></span></button><button type="button" data-command="delete" class="ke-btn ke-tooltip">' + icons.delete + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.remove + "</span></span></button></div>";
          return resize_button;
        },
        _module_getSizeX: function _module_getSizeX(contextPlugin, element, cover, container) {
          if (!element) {
            element = contextPlugin._element;
          }
          if (!cover) {
            cover = contextPlugin._cover;
          }
          if (!container) {
            container = contextPlugin._container;
          }
          if (!element) {
            return "";
          }
          return !/%$/.test(element.style.width) ? element.style.width : (container && this.util.getNumber(container.style.width, 2) || 100) + "%";
        },
        _module_getSizeY: function _module_getSizeY(contextPlugin, element, cover, container) {
          if (!element) {
            element = contextPlugin._element;
          }
          if (!cover) {
            cover = contextPlugin._cover;
          }
          if (!container) {
            container = contextPlugin._container;
          }
          if (!container || !cover) {
            return element && element.style.height || "";
          }
          return this.util.getNumber(cover.style.paddingBottom, 0) > 0 && !this.context.resizing._rotateVertical ? cover.style.height : !/%$/.test(element.style.height) || !/%$/.test(element.style.width) ? element.style.height : (container && this.util.getNumber(container.style.height, 2) || 100) + "%";
        },
        _module_setModifyInputSize: function _module_setModifyInputSize(contextPlugin, pluginObj) {
          var percentageRotation = contextPlugin._onlyPercentage && this.context.resizing._rotateVertical;
          contextPlugin.proportion.checked = contextPlugin._proportionChecked = contextPlugin._element.getAttribute("data-proportion") !== "false";
          var x = percentageRotation ? "" : this.plugins.resizing._module_getSizeX.call(this, contextPlugin);
          if (x === contextPlugin._defaultSizeX) {
            x = "";
          }
          if (contextPlugin._onlyPercentage) {
            x = this.util.getNumber(x, 2);
          }
          contextPlugin.inputX.value = x;
          pluginObj.setInputSize.call(this, "x");
          if (!contextPlugin._onlyPercentage) {
            var y = percentageRotation ? "" : this.plugins.resizing._module_getSizeY.call(this, contextPlugin);
            if (y === contextPlugin._defaultSizeY) {
              y = "";
            }
            if (contextPlugin._onlyPercentage) {
              y = this.util.getNumber(y, 2);
            }
            contextPlugin.inputY.value = y;
          }
          contextPlugin.inputX.disabled = percentageRotation ? true : false;
          contextPlugin.inputY.disabled = percentageRotation ? true : false;
          contextPlugin.proportion.disabled = percentageRotation ? true : false;
          pluginObj.setRatio.call(this);
        },
        _module_setInputSize: function _module_setInputSize(contextPlugin, xy) {
          if (contextPlugin._onlyPercentage) {
            if (xy === "x" && contextPlugin.inputX.value > 100) {
              contextPlugin.inputX.value = 100;
            }
            return;
          }
          if (contextPlugin.proportion.checked && contextPlugin._ratio && /\d/.test(contextPlugin.inputX.value) && /\d/.test(contextPlugin.inputY.value)) {
            var xUnit = contextPlugin.inputX.value.replace(/\d+|\./g, "") || contextPlugin.sizeUnit;
            var yUnit = contextPlugin.inputY.value.replace(/\d+|\./g, "") || contextPlugin.sizeUnit;
            if (xUnit !== yUnit) {
              return;
            }
            var dec = xUnit === "%" ? 2 : 0;
            if (xy === "x") {
              contextPlugin.inputY.value = this.util.getNumber(contextPlugin._ratioY * this.util.getNumber(contextPlugin.inputX.value, dec), dec) + yUnit;
            } else {
              contextPlugin.inputX.value = this.util.getNumber(contextPlugin._ratioX * this.util.getNumber(contextPlugin.inputY.value, dec), dec) + xUnit;
            }
          }
        },
        _module_setRatio: function _module_setRatio(contextPlugin) {
          var xValue = contextPlugin.inputX.value;
          var yValue = contextPlugin.inputY.value;
          if (contextPlugin.proportion.checked && /\d+/.test(xValue) && /\d+/.test(yValue)) {
            var xUnit = xValue.replace(/\d+|\./g, "") || contextPlugin.sizeUnit;
            var yUnit = yValue.replace(/\d+|\./g, "") || contextPlugin.sizeUnit;
            if (xUnit !== yUnit) {
              contextPlugin._ratio = false;
            } else if (!contextPlugin._ratio) {
              var x = this.util.getNumber(xValue, 0);
              var y = this.util.getNumber(yValue, 0);
              contextPlugin._ratio = true;
              contextPlugin._ratioX = x / y;
              contextPlugin._ratioY = y / x;
            }
          } else {
            contextPlugin._ratio = false;
          }
        },
        _module_sizeRevert: function _module_sizeRevert(contextPlugin) {
          if (contextPlugin._onlyPercentage) {
            contextPlugin.inputX.value = contextPlugin._origin_w > 100 ? 100 : contextPlugin._origin_w;
          } else {
            contextPlugin.inputX.value = contextPlugin._origin_w;
            contextPlugin.inputY.value = contextPlugin._origin_h;
          }
        },
        _module_saveCurrentSize: function _module_saveCurrentSize(contextPlugin) {
          var x = this.plugins.resizing._module_getSizeX.call(this, contextPlugin);
          var y = this.plugins.resizing._module_getSizeY.call(this, contextPlugin);
          contextPlugin._element.setAttribute("data-size", x + "," + y);
          if (contextPlugin._videoRatio) {
            contextPlugin._videoRatio = y;
          }
        },
        call_controller_resize: function call_controller_resize(targetElement, plugin) {
          var contextResizing = this.context.resizing;
          var contextPlugin = this.context[plugin];
          contextResizing._resize_plugin = plugin;
          var resizeContainer = contextResizing.resizeContainer;
          var resizeDiv = contextResizing.resizeDiv;
          var offset = this.util.getOffset(targetElement, this.context.element.wysiwygFrame);
          var isVertical = contextResizing._rotateVertical = /^(90|270)$/.test(Math.abs(targetElement.getAttribute("data-rotate")).toString());
          var w = isVertical ? targetElement.offsetHeight : targetElement.offsetWidth;
          var h = isVertical ? targetElement.offsetWidth : targetElement.offsetHeight;
          var t = offset.top;
          var l = offset.left - this.context.element.wysiwygFrame.scrollLeft;
          resizeContainer.style.top = t + "px";
          resizeContainer.style.left = l + "px";
          resizeContainer.style.width = w + "px";
          resizeContainer.style.height = h + "px";
          resizeDiv.style.top = "0px";
          resizeDiv.style.left = "0px";
          resizeDiv.style.width = w + "px";
          resizeDiv.style.height = h + "px";
          var align = targetElement.getAttribute("data-align") || "basic";
          align = align === "none" ? "basic" : align;
          var container = this.util.getParentElement(targetElement, this.util.isComponent);
          var cover = this.util.getParentElement(targetElement, "FIGURE");
          var displayX = this.plugins.resizing._module_getSizeX.call(this, contextPlugin, targetElement, cover, container) || "auto";
          var displayY = contextPlugin._onlyPercentage && plugin === "image" ? "" : ", " + (this.plugins.resizing._module_getSizeY.call(this, contextPlugin, targetElement, cover, container) || "auto");
          this.util.changeTxt(contextResizing.resizeDisplay, this.lang.dialogBox[align] + " (" + displayX + displayY + ")");
          contextResizing.resizeButtonGroup.style.display = contextPlugin._resizing ? "" : "none";
          var resizeDotShow = contextPlugin._resizing && !contextPlugin._resizeDotHide && !contextPlugin._onlyPercentage ? "flex" : "none";
          var resizeHandles = contextResizing.resizeHandles;
          for (var i = 0, len = resizeHandles.length; i < len; i++) {
            resizeHandles[i].style.display = resizeDotShow;
          }
          if (contextPlugin._resizing) {
            var rotations = contextResizing.rotationButtons;
            rotations[0].style.display = rotations[1].style.display = contextPlugin._rotation ? "" : "none";
          }
          var alignList = contextResizing.alignMenuList;
          this.util.changeElement(contextResizing.alignButton.firstElementChild, contextResizing.alignIcons[align]);
          for (var _i = 0, _len = alignList.length; _i < _len; _i++) {
            if (alignList[_i].getAttribute("data-value") === align) {
              this.util.addClass(alignList[_i], "on");
            } else {
              this.util.removeClass(alignList[_i], "on");
            }
          }
          var pButtons = contextResizing.percentageButtons;
          var value = /%$/.test(targetElement.style.width) && /%$/.test(container.style.width) ? this.util.getNumber(container.style.width, 0) / 100 + "" : "";
          for (var _i2 = 0, _len2 = pButtons.length; _i2 < _len2; _i2++) {
            if (pButtons[_i2].getAttribute("data-value") === value) {
              this.util.addClass(pButtons[_i2], "active");
            } else {
              this.util.removeClass(pButtons[_i2], "active");
            }
          }
          if (!contextPlugin._captionShow) {
            contextResizing.captionButton.style.display = "none";
          } else {
            contextResizing.captionButton.style.display = "";
            if (this.util.getChildElement(targetElement.parentNode, "figcaption")) {
              this.util.addClass(contextResizing.captionButton, "active");
              contextPlugin._captionChecked = true;
            } else {
              this.util.removeClass(contextResizing.captionButton, "active");
              contextPlugin._captionChecked = false;
            }
          }
          resizeContainer.style.display = "block";
          var addOffset = {
            left: 0,
            top: 50
          };
          if (this.options.iframe) {
            addOffset.left -= this.context.element.wysiwygFrame.parentElement.offsetLeft;
            addOffset.top -= this.context.element.wysiwygFrame.parentElement.offsetTop;
          }
          this.setControllerPosition(contextResizing.resizeButton, resizeContainer, "bottom", addOffset);
          this.controllersOn(resizeContainer, contextResizing.resizeButton, this.util.setDisabledButtons.bind(this, false, this.resizingDisabledButtons), targetElement, plugin);
          this.util.setDisabledButtons(true, this.resizingDisabledButtons);
          contextResizing._resize_w = w;
          contextResizing._resize_h = h;
          var originSize = (targetElement.getAttribute("origin-size") || "").split(",");
          contextResizing._origin_w = originSize[0] || targetElement.naturalWidth;
          contextResizing._origin_h = originSize[1] || targetElement.naturalHeight;
          return {
            w,
            h,
            t,
            l
          };
        },
        _closeAlignMenu: null,
        openAlignMenu: function openAlignMenu() {
          var alignButton = this.context.resizing.alignButton;
          this.util.addClass(alignButton, "on");
          this.context.resizing.alignMenu.style.top = alignButton.offsetTop + alignButton.offsetHeight + "px";
          this.context.resizing.alignMenu.style.left = alignButton.offsetLeft - alignButton.offsetWidth / 2 + "px";
          this.context.resizing.alignMenu.style.display = "block";
          this.plugins.resizing._closeAlignMenu = function() {
            this.util.removeClass(this.context.resizing.alignButton, "on");
            this.context.resizing.alignMenu.style.display = "none";
            this.removeDocEvent("click", this.plugins.resizing._closeAlignMenu);
            this.plugins.resizing._closeAlignMenu = null;
          }.bind(this);
          this.addDocEvent("click", this.plugins.resizing._closeAlignMenu);
        },
        onClick_resizeButton: function onClick_resizeButton(e) {
          e.stopPropagation();
          var target = e.target;
          var command = target.getAttribute("data-command") || target.parentNode.getAttribute("data-command");
          if (!command) {
            return;
          }
          var value = target.getAttribute("data-value") || target.parentNode.getAttribute("data-value");
          var pluginName = this.context.resizing._resize_plugin;
          var currentContext = this.context[pluginName];
          var contextEl = currentContext._element;
          var currentModule = this.plugins[pluginName];
          e.preventDefault();
          if (typeof this.plugins.resizing._closeAlignMenu === "function") {
            this.plugins.resizing._closeAlignMenu();
            if (command === "onalign") {
              return;
            }
          }
          switch (command) {
            case "auto":
              this.plugins.resizing.resetTransform.call(this, contextEl);
              currentModule.setAutoSize.call(this);
              this.selectComponent(contextEl, pluginName);
              break;
            case "percent":
              var percentY = this.plugins.resizing._module_getSizeY.call(this, currentContext);
              if (this.context.resizing._rotateVertical) {
                var percentage = contextEl.getAttribute("data-percentage");
                if (percentage) {
                  percentY = percentage.split(",")[1];
                }
              }
              this.plugins.resizing.resetTransform.call(this, contextEl);
              currentModule.setPercentSize.call(this, value * 100, this.util.getNumber(percentY, 0) === null || !/%$/.test(percentY) ? "" : percentY);
              this.selectComponent(contextEl, pluginName);
              break;
            case "mirror":
              var r = contextEl.getAttribute("data-rotate") || "0";
              var x = contextEl.getAttribute("data-rotateX") || "";
              var y = contextEl.getAttribute("data-rotateY") || "";
              if (value === "h" && !this.context.resizing._rotateVertical || value === "v" && this.context.resizing._rotateVertical) {
                y = y ? "" : "180";
              } else {
                x = x ? "" : "180";
              }
              contextEl.setAttribute("data-rotateX", x);
              contextEl.setAttribute("data-rotateY", y);
              this.plugins.resizing._setTransForm(contextEl, r, x, y);
              break;
            case "rotate":
              var contextResizing = this.context.resizing;
              var slope = contextEl.getAttribute("data-rotate") * 1 + value * 1;
              var deg = this._w.Math.abs(slope) >= 360 ? 0 : slope;
              contextEl.setAttribute("data-rotate", deg);
              contextResizing._rotateVertical = /^(90|270)$/.test(this._w.Math.abs(deg).toString());
              this.plugins.resizing.setTransformSize.call(this, contextEl, null, null);
              this.selectComponent(contextEl, pluginName);
              break;
            case "onalign":
              this.plugins.resizing.openAlignMenu.call(this);
              return;
            case "align":
              var alignValue = value === "basic" ? "none" : value;
              currentModule.setAlign.call(this, alignValue, null, null, null);
              this.selectComponent(contextEl, pluginName);
              break;
            case "caption":
              var caption = !currentContext._captionChecked;
              currentModule.openModify.call(this, true);
              currentContext._captionChecked = currentContext.captionCheckEl.checked = caption;
              currentModule.update_image.call(this, false, false, false);
              if (caption) {
                var captionText = this.util.getChildElement(currentContext._caption, function(current) {
                  return current.nodeType === 3;
                });
                if (!captionText) {
                  currentContext._caption.focus();
                } else {
                  this.setRange(captionText, 0, captionText, captionText.textContent.length);
                }
                this.controllersOff();
              } else {
                this.selectComponent(contextEl, pluginName);
                currentModule.openModify.call(this, true);
              }
              break;
            case "revert":
              currentModule.setOriginSize.call(this);
              this.selectComponent(contextEl, pluginName);
              break;
            case "update":
              currentModule.openModify.call(this);
              this.controllersOff();
              break;
            case "delete":
              currentModule.destroy.call(this);
              break;
          }
          this.history.push(false);
        },
        resetTransform: function resetTransform(element) {
          var size = (element.getAttribute("data-size") || element.getAttribute("data-origin") || "").split(",");
          this.context.resizing._rotateVertical = false;
          element.style.maxWidth = "";
          element.style.transform = "";
          element.style.transformOrigin = "";
          element.setAttribute("data-rotate", "");
          element.setAttribute("data-rotateX", "");
          element.setAttribute("data-rotateY", "");
          this.plugins[this.context.resizing._resize_plugin].setSize.call(this, size[0] ? size[0] : "auto", size[1] ? size[1] : "", true);
        },
        setTransformSize: function setTransformSize(element, width, height) {
          var percentage = element.getAttribute("data-percentage");
          var isVertical = this.context.resizing._rotateVertical;
          var deg = element.getAttribute("data-rotate") * 1;
          var transOrigin = "";
          if (percentage && !isVertical) {
            percentage = percentage.split(",");
            if (percentage[0] === "auto" && percentage[1] === "auto") {
              this.plugins[this.context.resizing._resize_plugin].setAutoSize.call(this);
            } else {
              this.plugins[this.context.resizing._resize_plugin].setPercentSize.call(this, percentage[0], percentage[1]);
            }
          } else {
            var cover = this.util.getParentElement(element, "FIGURE");
            var offsetW = width || element.offsetWidth;
            var offsetH = height || element.offsetHeight;
            var w = (isVertical ? offsetH : offsetW) + "px";
            var h = (isVertical ? offsetW : offsetH) + "px";
            this.plugins[this.context.resizing._resize_plugin].cancelPercentAttr.call(this);
            this.plugins[this.context.resizing._resize_plugin].setSize.call(this, offsetW + "px", offsetH + "px", true);
            cover.style.width = w;
            cover.style.height = this.context[this.context.resizing._resize_plugin]._caption ? "" : h;
            if (isVertical) {
              var transW = offsetW / 2 + "px " + offsetW / 2 + "px 0";
              var transH = offsetH / 2 + "px " + offsetH / 2 + "px 0";
              transOrigin = deg === 90 || deg === -270 ? transH : transW;
            }
          }
          element.style.transformOrigin = transOrigin;
          this.plugins.resizing._setTransForm(element, deg.toString(), element.getAttribute("data-rotateX") || "", element.getAttribute("data-rotateY") || "");
          if (isVertical) {
            element.style.maxWidth = "none";
          } else {
            element.style.maxWidth = "";
          }
          this.plugins.resizing.setCaptionPosition.call(this, element);
        },
        _setTransForm: function _setTransForm(element, r, x, y) {
          var width = (element.offsetWidth - element.offsetHeight) * (/-/.test(r) ? 1 : -1);
          var translate = "";
          if (/[1-9]/.test(r) && (x || y)) {
            translate = x ? "Y" : "X";
            switch (r) {
              case "90":
                translate = x && y ? "X" : y ? translate : "";
                break;
              case "270":
                width *= -1;
                translate = x && y ? "Y" : x ? translate : "";
                break;
              case "-90":
                translate = x && y ? "Y" : x ? translate : "";
                break;
              case "-270":
                width *= -1;
                translate = x && y ? "X" : y ? translate : "";
                break;
              default:
                translate = "";
            }
          }
          if (r % 180 === 0) {
            element.style.maxWidth = "";
          }
          element.style.transform = "rotate(" + r + "deg)" + (x ? " rotateX(" + x + "deg)" : "") + (y ? " rotateY(" + y + "deg)" : "") + (translate ? " translate" + translate + "(" + width + "px)" : "");
        },
        setCaptionPosition: function setCaptionPosition(element) {
          var figcaption = this.util.getChildElement(this.util.getParentElement(element, "FIGURE"), "FIGCAPTION");
          if (figcaption) {
            figcaption.style.marginTop = (this.context.resizing._rotateVertical ? element.offsetWidth - element.offsetHeight : 0) + "px";
          }
        },
        onMouseDown_resize_handle: function onMouseDown_resize_handle(e) {
          e.stopPropagation();
          e.preventDefault();
          var contextResizing = this.context.resizing;
          var direction = contextResizing._resize_direction = e.target.classList[0];
          contextResizing._resizeClientX = e.clientX;
          contextResizing._resizeClientY = e.clientY;
          this.context.element.resizeBackground.style.display = "block";
          contextResizing.resizeButton.style.display = "none";
          contextResizing.resizeDiv.style.float = /l/.test(direction) ? "right" : /r/.test(direction) ? "left" : "none";
          var resizing_element_bind = this.plugins.resizing.resizing_element.bind(this, contextResizing, direction, this.context[contextResizing._resize_plugin]);
          var closureFunc_bind = function closureFunc(e2) {
            if (e2.type === "keydown" && e2.keyCode !== 27) {
              return;
            }
            var change = contextResizing._isChange;
            contextResizing._isChange = false;
            this.removeDocEvent("mousemove", resizing_element_bind);
            this.removeDocEvent("mouseup", closureFunc_bind);
            this.removeDocEvent("keydown", closureFunc_bind);
            if (e2.type === "keydown") {
              this.controllersOff();
              this.context.element.resizeBackground.style.display = "none";
              this.plugins[this.context.resizing._resize_plugin].init.call(this);
            } else {
              this.plugins.resizing.cancel_controller_resize.call(this, direction);
              if (change) {
                this.history.push(false);
              }
            }
          }.bind(this);
          this.addDocEvent("mousemove", resizing_element_bind);
          this.addDocEvent("mouseup", closureFunc_bind);
          this.addDocEvent("keydown", closureFunc_bind);
        },
        resizing_element: function resizing_element(contextResizing, direction, plugin, e) {
          var clientX = e.clientX;
          var clientY = e.clientY;
          var resultW = plugin._element_w;
          var resultH = plugin._element_h;
          var w = plugin._element_w + (/r/.test(direction) ? clientX - contextResizing._resizeClientX : contextResizing._resizeClientX - clientX);
          var h = plugin._element_h + (/b/.test(direction) ? clientY - contextResizing._resizeClientY : contextResizing._resizeClientY - clientY);
          var wh = plugin._element_h / plugin._element_w * w;
          if (/t/.test(direction)) {
            contextResizing.resizeDiv.style.top = plugin._element_h - (/h/.test(direction) ? h : wh) + "px";
          }
          if (/l/.test(direction)) {
            contextResizing.resizeDiv.style.left = plugin._element_w - w + "px";
          }
          if (/r|l/.test(direction)) {
            contextResizing.resizeDiv.style.width = w + "px";
            resultW = w;
          }
          if (/^(t|b)[^h]$/.test(direction)) {
            contextResizing.resizeDiv.style.height = wh + "px";
            resultH = wh;
          } else if (/^(t|b)h$/.test(direction)) {
            contextResizing.resizeDiv.style.height = h + "px";
            resultH = h;
          }
          contextResizing._resize_w = resultW;
          contextResizing._resize_h = resultH;
          this.util.changeTxt(contextResizing.resizeDisplay, this._w.Math.round(resultW) + " x " + this._w.Math.round(resultH));
          contextResizing._isChange = true;
        },
        cancel_controller_resize: function cancel_controller_resize(direction) {
          var isVertical = this.context.resizing._rotateVertical;
          this.controllersOff();
          this.context.element.resizeBackground.style.display = "none";
          var w = this._w.Math.round(isVertical ? this.context.resizing._resize_h : this.context.resizing._resize_w);
          var h = this._w.Math.round(isVertical ? this.context.resizing._resize_w : this.context.resizing._resize_h);
          if (!isVertical && !/%$/.test(w)) {
            var padding = 16;
            var limit = this.context.element.wysiwygFrame.clientWidth - padding * 2 - 2;
            if (this.util.getNumber(w, 0) > limit) {
              h = this._w.Math.round(h / w * limit);
              w = limit;
            }
          }
          var pluginName = this.context.resizing._resize_plugin;
          this.plugins[pluginName].setSize.call(this, w, h, false, direction);
          if (isVertical) {
            this.plugins.resizing.setTransformSize.call(this, this.context[this.context.resizing._resize_plugin]._element, w, h);
          }
          this.selectComponent(this.context[pluginName]._element, pluginName);
        }
      };
      if (_typeof(noGlobal) === (true ? "undefined" : _typeof(void 0))) {
        if (!window2.KothingEditor_MODULES) {
          Object.defineProperty(window2, "KothingEditor_MODULES", {
            enumerable: true,
            writable: false,
            configurable: false,
            value: {}
          });
        }
        Object.defineProperty(window2.KothingEditor_MODULES, "resizing", {
          enumerable: true,
          writable: false,
          configurable: false,
          value: resizing
        });
      }
      return resizing;
    });
  }
});

// node_modules/kothing-editor/lib/plugins/modules/fileManager.js
var require_fileManager = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/fileManager.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    (function(global, factory) {
      if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("KothingEditor_MODULES a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    })(typeof window !== "undefined" ? window : void 0, function(window2, noGlobal) {
      var fileManager = {
        name: "fileManager",
        _xmlHttp: null,
        _checkMediaComponent: function _checkMediaComponent(tag) {
          if (/IMG/i.test(tag)) {
            return !/FIGURE/i.test(tag.parentElement.nodeName) || !/FIGURE/i.test(tag.parentElement.parentElement.nodeName);
          } else if (/VIDEO/i.test(tag)) {
            return !/FIGURE/i.test(tag.parentElement.nodeName);
          }
          return true;
        },
        upload: function upload(uploadUrl, uploadHeader, formData, callBack, errorCallBack) {
          this.showLoading();
          var filePlugin = this.plugins.fileManager;
          var xmlHttp = filePlugin._xmlHttp = this.util.getXMLHttpRequest();
          xmlHttp.onreadystatechange = filePlugin._callBackUpload.bind(this, xmlHttp, callBack, errorCallBack);
          xmlHttp.open("post", uploadUrl, true);
          if (uploadHeader !== null && _typeof(uploadHeader) === "object" && this._w.Object.keys(uploadHeader).length > 0) {
            for (var key in uploadHeader) {
              xmlHttp.setRequestHeader(key, uploadHeader[key]);
            }
          }
          xmlHttp.send(formData);
        },
        _callBackUpload: function _callBackUpload(xmlHttp, callBack, errorCallBack) {
          if (xmlHttp.readyState === 4) {
            if (xmlHttp.status === 200) {
              try {
                callBack(xmlHttp);
              } catch (e) {
                throw Error('[KothingEditor.fileManager.upload.callBack.fail] cause : "' + e.message + '"');
              } finally {
                this.closeLoading();
              }
            } else {
              this.closeLoading();
              var res = !xmlHttp.responseText ? xmlHttp : JSON.parse(xmlHttp.responseText);
              if (typeof errorCallBack !== "function" || errorCallBack("", res, this)) {
                var err = "[KothingEditor.fileManager.upload.serverException] status: " + xmlHttp.status + ", response: " + (res.errorMessage || xmlHttp.responseText);
                this.functions.noticeOpen(err);
                throw Error(err);
              }
            }
          }
        },
        checkInfo: function checkInfo(pluginName, tagNames, uploadEventHandler, modifyHandler, resizing) {
          var tags = [];
          for (var i = 0, len = tagNames.length; i < len; i++) {
            tags = tags.concat([].slice.call(this.context.element.wysiwyg.getElementsByTagName(tagNames[i])));
          }
          var fileManagerPlugin = this.plugins.fileManager;
          var context = this.context[pluginName];
          var infoList = context._infoList;
          var setFileInfo = fileManagerPlugin.setInfo.bind(this);
          if (tags.length === infoList.length) {
            if (this._componentsInfoReset) {
              for (var _i = 0, _len = tags.length; _i < _len; _i++) {
                setFileInfo(pluginName, tags[_i], uploadEventHandler, null, resizing);
              }
              return;
            } else {
              var infoUpdate = false;
              var _loop = function _loop2(_info, _i22, _len22) {
                _info = infoList[_i22];
                if (tags.filter(function(t) {
                  info = _info;
                  return _info.src === t.src && _info.index.toString() === t.getAttribute("data-index");
                }).length === 0) {
                  infoUpdate = true;
                  info = _info;
                  return "break";
                }
                info = _info;
              };
              for (var _i2 = 0, _len2 = infoList.length, info; _i2 < _len2; _i2++) {
                var _ret = _loop(info, _i2, _len2);
                if (_ret === "break")
                  break;
              }
              if (!infoUpdate) {
                return;
              }
            }
          }
          var _resize_plugin = resizing ? this.context.resizing._resize_plugin : "";
          if (resizing) {
            this.context.resizing._resize_plugin = pluginName;
          }
          var currentTags = [];
          var infoIndex = [];
          for (var _i3 = 0, _len3 = infoList.length; _i3 < _len3; _i3++) {
            infoIndex[_i3] = infoList[_i3].index;
          }
          for (var _i4 = 0, _len4 = tags.length, tag; _i4 < _len4; _i4++) {
            tag = tags[_i4];
            if (!this.util.getParentElement(tag, this.util.isMediaComponent) || !fileManagerPlugin._checkMediaComponent(tag)) {
              currentTags.push(context._infoIndex);
              modifyHandler(tag);
            } else if (!tag.getAttribute("data-index") || infoIndex.indexOf(tag.getAttribute("data-index") * 1) < 0) {
              currentTags.push(context._infoIndex);
              tag.removeAttribute("data-index");
              setFileInfo(pluginName, tag, uploadEventHandler, null, resizing);
            } else {
              currentTags.push(tag.getAttribute("data-index") * 1);
            }
          }
          for (var _i5 = 0, dataIndex; _i5 < infoList.length; _i5++) {
            dataIndex = infoList[_i5].index;
            if (currentTags.indexOf(dataIndex) > -1) {
              continue;
            }
            infoList.splice(_i5, 1);
            if (typeof uploadEventHandler === "function") {
              uploadEventHandler(null, dataIndex, "delete", null, 0, this);
            }
            _i5--;
          }
          if (resizing) {
            this.context.resizing._resize_plugin = _resize_plugin;
          }
        },
        setInfo: function setInfo(pluginName, element, uploadEventHandler, file, resizing) {
          var _resize_plugin = resizing ? this.context.resizing._resize_plugin : "";
          if (resizing) {
            this.context.resizing._resize_plugin = pluginName;
          }
          var plguin = this.plugins[pluginName];
          var context = this.context[pluginName];
          var infoList = context._infoList;
          var dataIndex = element.getAttribute("data-index");
          var info = null;
          var state = "";
          if (!file) {
            file = {
              name: element.getAttribute("data-file-name") || (typeof element.src === "string" ? element.src.split("/").pop() : ""),
              size: element.getAttribute("data-file-size") || 0
            };
          }
          if (!dataIndex || this._componentsInfoInit) {
            state = "create";
            dataIndex = context._infoIndex++;
            element.setAttribute("data-index", dataIndex);
            element.setAttribute("data-file-name", file.name);
            element.setAttribute("data-file-size", file.size);
            info = {
              src: element.src,
              index: dataIndex * 1,
              name: file.name,
              size: file.size
            };
            infoList.push(info);
          } else {
            state = "update";
            dataIndex *= 1;
            for (var i = 0, len = infoList.length; i < len; i++) {
              if (dataIndex === infoList[i].index) {
                info = infoList[i];
                break;
              }
            }
            if (!info) {
              dataIndex = context._infoIndex++;
              info = {
                index: dataIndex
              };
              infoList.push(info);
            }
            info.src = element.src;
            info.name = element.getAttribute("data-file-name");
            info.size = element.getAttribute("data-file-size") * 1;
          }
          info.element = element;
          info.delete = plguin.destroy.bind(this, element);
          info.select = function(element2) {
            element2.scrollIntoView(true);
            this._w.setTimeout(plguin.select.bind(this, element2));
          }.bind(this, element);
          if (resizing) {
            if (!element.getAttribute("origin-size") && element.naturalWidth) {
              element.setAttribute("origin-size", element.naturalWidth + "," + element.naturalHeight);
            }
            if (!element.getAttribute("data-origin")) {
              var container = this.util.getParentElement(element, this.util.isMediaComponent);
              var cover = this.util.getParentElement(element, "FIGURE");
              var w = this.plugins.resizing._module_getSizeX.call(this, context, element, cover, container);
              var h = this.plugins.resizing._module_getSizeY.call(this, context, element, cover, container);
              element.setAttribute("data-origin", w + "," + h);
              element.setAttribute("data-size", w + "," + h);
            }
            if (!element.style.width) {
              var size = (element.getAttribute("data-size") || element.getAttribute("data-origin") || "").split(",");
              plguin.onModifyMode.call(this, element, null);
              plguin.applySize.call(this, size[0], size[1]);
            }
            this.context.resizing._resize_plugin = _resize_plugin;
          }
          if (typeof uploadEventHandler === "function") {
            uploadEventHandler(element, dataIndex, state, info, --context._uploadFileLength < 0 ? 0 : context._uploadFileLength, this);
          }
        },
        deleteInfo: function deleteInfo(pluginName, index, uploadEventHandler) {
          if (index >= 0) {
            var infoList = this.context[pluginName]._infoList;
            for (var i = 0, len = infoList.length; i < len; i++) {
              if (index === infoList[i].index) {
                infoList.splice(i, 1);
                if (typeof uploadEventHandler === "function") {
                  uploadEventHandler(null, index, "delete", null, 0, this);
                }
                return;
              }
            }
          }
        },
        resetInfo: function resetInfo(pluginName, uploadEventHandler) {
          var context = this.context[pluginName];
          if (typeof uploadEventHandler === "function") {
            var infoList = context._infoList;
            for (var i = 0, len = infoList.length; i < len; i++) {
              uploadEventHandler(null, infoList[i].index, "delete", null, 0, this);
            }
          }
          context._infoList = [];
          context._infoIndex = 0;
        }
      };
      if (_typeof(noGlobal) === (true ? "undefined" : _typeof(void 0))) {
        if (!window2.KothingEditor_MODULES) {
          Object.defineProperty(window2, "KothingEditor_MODULES", {
            enumerable: true,
            writable: false,
            configurable: false,
            value: {}
          });
        }
        Object.defineProperty(window2.KothingEditor_MODULES, "fileManager", {
          enumerable: true,
          writable: false,
          configurable: false,
          value: fileManager
        });
      }
      return fileManager;
    });
  }
});

// node_modules/kothing-editor/lib/plugins/dialog/image.js
var require_image = __commonJS({
  "node_modules/kothing-editor/lib/plugins/dialog/image.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _dialog = _interopRequireDefault(require_dialog());
    var _anchor = _interopRequireDefault(require_anchor());
    var _component = _interopRequireDefault(require_component());
    var _resizing = _interopRequireDefault(require_resizing());
    var _fileManager = _interopRequireDefault(require_fileManager());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      name: "image",
      display: "dialog",
      add: function add(core) {
        core.addModule([_dialog.default, _anchor.default, _component.default, _resizing.default, _fileManager.default]);
        var options = core.options;
        var context = core.context;
        var contextImage = context.image = {
          _infoList: [],
          _infoIndex: 0,
          _uploadFileLength: 0,
          focusElement: null,
          sizeUnit: options._imageSizeUnit,
          _linkElement: "",
          _altText: "",
          _align: "none",
          _floatClassRegExp: "__ke__float\\-[a-z]+",
          _v_src: {
            _linkValue: ""
          },
          svgDefaultSize: "30%",
          base64RenderIndex: 0,
          _element: null,
          _cover: null,
          _container: null,
          inputX: null,
          inputY: null,
          _element_w: 1,
          _element_h: 1,
          _element_l: 0,
          _element_t: 0,
          _defaultSizeX: "auto",
          _defaultSizeY: "auto",
          _origin_w: options.imageWidth === "auto" ? "" : options.imageWidth,
          _origin_h: options.imageHeight === "auto" ? "" : options.imageHeight,
          _proportionChecked: true,
          _resizing: options.imageResizing,
          _resizeDotHide: !options.imageHeightShow,
          _rotation: options.imageRotation,
          _onlyPercentage: options.imageSizeOnlyPercentage,
          _ratio: false,
          _ratioX: 1,
          _ratioY: 1,
          _captionShow: true,
          _captionChecked: false,
          _caption: null,
          captionCheckEl: null
        };
        var image_dialog = this.setDialog(core);
        contextImage.modal = image_dialog;
        contextImage.imgInputFile = image_dialog.querySelector("._ke_image_file");
        contextImage.imgUrlFile = image_dialog.querySelector("._ke_image_url");
        contextImage.focusElement = contextImage.imgInputFile || contextImage.imgUrlFile;
        contextImage.altText = image_dialog.querySelector("._ke_image_alt");
        contextImage.captionCheckEl = image_dialog.querySelector("._ke_image_check_caption");
        contextImage.previewSrc = image_dialog.querySelector("._ke_tab_content_image .ke-link-preview");
        image_dialog.querySelector(".ke-dialog-tabs").addEventListener("click", this.openTab.bind(core));
        image_dialog.querySelector("form").addEventListener("submit", this.submit.bind(core));
        if (contextImage.imgInputFile) {
          image_dialog.querySelector(".ke-file-remove").addEventListener("click", this._removeSelectedFiles.bind(contextImage.imgInputFile, contextImage.imgUrlFile, contextImage.previewSrc));
        }
        if (contextImage.imgUrlFile) {
          contextImage.imgUrlFile.addEventListener("input", this._onLinkPreview.bind(contextImage.previewSrc, contextImage._v_src, options.linkProtocol));
        }
        if (contextImage.imgInputFile && contextImage.imgUrlFile) {
          contextImage.imgInputFile.addEventListener("change", this._fileInputChange.bind(contextImage));
        }
        var imageGalleryButton = image_dialog.querySelector(".__ke__gallery");
        if (imageGalleryButton) {
          imageGalleryButton.addEventListener("click", this._openGallery.bind(core));
        }
        contextImage.proportion = {};
        contextImage.inputX = {};
        contextImage.inputY = {};
        if (options.imageResizing) {
          contextImage.proportion = image_dialog.querySelector("._ke_image_check_proportion");
          contextImage.inputX = image_dialog.querySelector("._ke_image_size_x");
          contextImage.inputY = image_dialog.querySelector("._ke_image_size_y");
          contextImage.inputX.value = options.imageWidth;
          contextImage.inputY.value = options.imageHeight;
          contextImage.inputX.addEventListener("keyup", this.setInputSize.bind(core, "x"));
          contextImage.inputY.addEventListener("keyup", this.setInputSize.bind(core, "y"));
          contextImage.inputX.addEventListener("change", this.setRatio.bind(core));
          contextImage.inputY.addEventListener("change", this.setRatio.bind(core));
          contextImage.proportion.addEventListener("change", this.setRatio.bind(core));
          image_dialog.querySelector(".ke-dialog-btn-revert").addEventListener("click", this.sizeRevert.bind(core));
        }
        context.dialog.modal.appendChild(image_dialog);
        core.plugins.anchor.initEvent.call(core, "image", image_dialog.querySelector("._ke_tab_content_url"));
        contextImage.anchorCtx = core.context.anchor.caller.image;
        image_dialog = null;
      },
      setDialog: function setDialog(core) {
        var option = core.options;
        var lang = core.lang;
        var dialog = core.util.createElement("DIV");
        dialog.className = "ke-dialog-content ke-dialog-image";
        dialog.style.display = "none";
        var html = '<div class="ke-dialog-header"><button type="button" data-command="close" class="ke-btn ke-dialog-close" class="close" aria-label="Close" title="' + lang.dialogBox.close + '">' + core.icons.cancel + '</button><span class="ke-modal-title">' + lang.dialogBox.imageBox.title + '</span></div><div class="ke-dialog-tabs"><button type="button" class="_ke_tab_link active" data-tab-link="image">' + lang.toolbar.image + '</button><button type="button" class="_ke_tab_link" data-tab-link="url">' + lang.toolbar.link + '</button></div><form method="post" enctype="multipart/form-data"><div class="_ke_tab_content _ke_tab_content_image"><div class="ke-dialog-body"><div style="border-bottom: 1px dashed #ccc;">';
        if (option.imageFileInput) {
          html += '<div class="ke-dialog-form"><label>' + lang.dialogBox.imageBox.file + '</label><div class="ke-dialog-form-files"><input class="ke-input-form _ke_image_file" type="file" accept="' + option.imageAccept + '"' + (option.imageMultipleFile ? ' multiple="multiple"' : "") + '/><button type="button" class="ke-btn ke-dialog-files-edge-button ke-file-remove" title="' + lang.controller.remove + '">' + core.icons.cancel + "</button></div></div>";
        }
        if (option.imageUrlInput) {
          html += '<div class="ke-dialog-form"><label>' + lang.dialogBox.imageBox.url + '</label><div class="ke-dialog-form-files"><input class="ke-input-form ke-input-url _ke_image_url" type="text" />' + (option.imageGalleryUrl && core.plugins.imageGallery ? '<button type="button" class="ke-btn ke-dialog-files-edge-button __ke__gallery" title="' + lang.toolbar.imageGallery + '">' + core.icons.image_gallery + "</button>" : "") + '</div><pre class="ke-link-preview"></pre></div>';
        }
        html += '</div><div class="ke-dialog-form"><label>' + lang.dialogBox.imageBox.altText + '</label><input class="ke-input-form _ke_image_alt" type="text" /></div>';
        if (option.imageResizing) {
          var onlyPercentage = option.imageSizeOnlyPercentage;
          var onlyPercentDisplay = onlyPercentage ? ' style="display: none !important;"' : "";
          var heightDisplay = !option.imageHeightShow ? ' style="display: none !important;"' : "";
          html += '<div class="ke-dialog-form">';
          if (onlyPercentage || !option.imageHeightShow) {
            html += '<div class="ke-dialog-size-text"><label class="size-w">' + lang.dialogBox.size + "</label></div>";
          } else {
            html += '<div class="ke-dialog-size-text"><label class="size-w">' + lang.dialogBox.width + '</label><label class="ke-dialog-size-x">&nbsp;</label><label class="size-h">' + lang.dialogBox.height + "</label></div>";
          }
          html += '<input class="ke-input-control _ke_image_size_x" placeholder="auto"' + (onlyPercentage ? ' type="number" min="1"' : 'type="text"') + (onlyPercentage ? ' max="100"' : "") + ' /><label class="ke-dialog-size-x"' + heightDisplay + ">" + (onlyPercentage ? "%" : "x") + '</label><input type="text" class="ke-input-control _ke_image_size_y" placeholder="auto"' + onlyPercentDisplay + (onlyPercentage ? ' max="100"' : "") + heightDisplay + "/><label" + onlyPercentDisplay + heightDisplay + '><input type="checkbox" class="ke-dialog-btn-check _ke_image_check_proportion" checked/>&nbsp;' + lang.dialogBox.proportion + '</label><button type="button" title="' + lang.dialogBox.revertButton + '" class="ke-btn ke-dialog-btn-revert" style="float: right;">' + core.icons.revert + "</button></div>";
        }
        html += '<div class="ke-dialog-form ke-dialog-form-footer"><label><input type="checkbox" class="ke-dialog-btn-check _ke_image_check_caption" />&nbsp;' + lang.dialogBox.caption + '</label></div></div></div><div class="_ke_tab_content _ke_tab_content_url" style="display: none">' + core.context.anchor.forms.innerHTML + '</div><div class="ke-dialog-footer"><div><label><input type="radio" name="kothingEditor_image_radio" class="ke-dialog-btn-radio" value="none" checked>' + lang.dialogBox.basic + '</label><label><input type="radio" name="kothingEditor_image_radio" class="ke-dialog-btn-radio" value="left">' + lang.dialogBox.left + '</label><label><input type="radio" name="kothingEditor_image_radio" class="ke-dialog-btn-radio" value="center">' + lang.dialogBox.center + '</label><label><input type="radio" name="kothingEditor_image_radio" class="ke-dialog-btn-radio" value="right">' + lang.dialogBox.right + '</label></div><button type="submit" class="ke-btn-primary" title="' + lang.dialogBox.submitButton + '"><span>' + lang.dialogBox.submitButton + "</span></button></div></form>";
        dialog.innerHTML = html;
        return dialog;
      },
      _fileInputChange: function _fileInputChange() {
        if (!this.imgInputFile.value) {
          this.imgUrlFile.removeAttribute("disabled");
          this.previewSrc.style.textDecoration = "";
        } else {
          this.imgUrlFile.setAttribute("disabled", true);
          this.previewSrc.style.textDecoration = "line-through";
        }
      },
      _removeSelectedFiles: function _removeSelectedFiles(urlInput, previewSrc) {
        this.value = "";
        if (urlInput) {
          urlInput.removeAttribute("disabled");
          previewSrc.style.textDecoration = "";
        }
      },
      _openGallery: function _openGallery() {
        this.callPlugin("imageGallery", this.plugins.imageGallery.open.bind(this, this.plugins.image._setUrlInput.bind(this.context.image)), null);
      },
      _setUrlInput: function _setUrlInput(target) {
        this.altText.value = target.alt;
        this._v_src._linkValue = this.previewSrc.textContent = this.imgUrlFile.value = target.src;
        this.imgUrlFile.focus();
      },
      _onLinkPreview: function _onLinkPreview(context, protocol, e) {
        var value = e.target.value.trim();
        context._linkValue = this.textContent = !value ? "" : protocol && value.indexOf("://") === -1 && value.indexOf("#") !== 0 ? protocol + value : value.indexOf("://") === -1 ? "/" + value : value;
      },
      fileTags: ["img"],
      select: function select(element) {
        this.plugins.image.onModifyMode.call(this, element, this.plugins.resizing.call_controller_resize.call(this, element, "image"));
      },
      destroy: function destroy(element) {
        var imageEl = element || this.context.image._element;
        var imageContainer = this.util.getParentElement(imageEl, this.util.isMediaComponent) || imageEl;
        var dataIndex = imageEl.getAttribute("data-index") * 1;
        var focusEl = imageContainer.previousElementSibling || imageContainer.nextElementSibling;
        var emptyDiv = imageContainer.parentNode;
        this.util.removeItem(imageContainer);
        this.plugins.image.init.call(this);
        this.controllersOff();
        if (emptyDiv !== this.context.element.wysiwyg) {
          this.util.removeItemAllParents(emptyDiv, function(current) {
            return current.childNodes.length === 0;
          }, null);
        }
        this.focusEdge(focusEl);
        this.plugins.fileManager.deleteInfo.call(this, "image", dataIndex, this.functions.onImageUpload);
        this.history.push(false);
      },
      on: function on(update) {
        var contextImage = this.context.image;
        if (!update) {
          contextImage.inputX.value = contextImage._origin_w = this.options.imageWidth === contextImage._defaultSizeX ? "" : this.options.imageWidth;
          contextImage.inputY.value = contextImage._origin_h = this.options.imageHeight === contextImage._defaultSizeY ? "" : this.options.imageHeight;
          if (contextImage.imgInputFile && this.options.imageMultipleFile) {
            contextImage.imgInputFile.setAttribute("multiple", "multiple");
          }
        } else {
          if (contextImage.imgInputFile && this.options.imageMultipleFile) {
            contextImage.imgInputFile.removeAttribute("multiple");
          }
        }
        this.plugins.anchor.on.call(this, contextImage.anchorCtx, update);
      },
      open: function open() {
        this.plugins.dialog.open.call(this, "image", this.currentControllerName === "image");
      },
      openTab: function openTab(e) {
        var modal = this.context.image.modal;
        var targetElement = e === "init" ? modal.querySelector("._ke_tab_link") : e.target;
        if (!/^BUTTON$/i.test(targetElement.tagName)) {
          return false;
        }
        var tabName = targetElement.getAttribute("data-tab-link");
        var contentClassName = "_ke_tab_content";
        var i, tabContent, tabLinks;
        tabContent = modal.getElementsByClassName(contentClassName);
        for (i = 0; i < tabContent.length; i++) {
          tabContent[i].style.display = "none";
        }
        tabLinks = modal.getElementsByClassName("_ke_tab_link");
        for (i = 0; i < tabLinks.length; i++) {
          this.util.removeClass(tabLinks[i], "active");
        }
        modal.querySelector("." + contentClassName + "_" + tabName).style.display = "block";
        this.util.addClass(targetElement, "active");
        if (tabName === "image" && this.context.image.focusElement) {
          this.context.image.focusElement.focus();
        } else if (tabName === "url") {
          this.context.anchor.caller.image.urlInput.focus();
        }
        return false;
      },
      submit: function submit(e) {
        var contextImage = this.context.image;
        var imagePlugin = this.plugins.image;
        e.preventDefault();
        e.stopPropagation();
        contextImage._altText = contextImage.altText.value;
        contextImage._align = contextImage.modal.querySelector('input[name="kothingEditor_image_radio"]:checked').value;
        contextImage._captionChecked = contextImage.captionCheckEl.checked;
        if (contextImage._resizing) {
          contextImage._proportionChecked = contextImage.proportion.checked;
        }
        try {
          if (this.context.dialog.updateModal) {
            imagePlugin.update_image.call(this, false, true, false);
          }
          if (contextImage.imgInputFile && contextImage.imgInputFile.files.length > 0) {
            this.showLoading();
            imagePlugin.submitAction.call(this, this.context.image.imgInputFile.files);
          } else if (contextImage.imgUrlFile && contextImage._v_src._linkValue.length > 0) {
            this.showLoading();
            imagePlugin.onRender_imgUrl.call(this);
          }
        } catch (error) {
          this.closeLoading();
          throw Error('[KothingEditor.image.submit.fail] cause : "' + error.message + '"');
        } finally {
          this.plugins.dialog.close.call(this);
        }
        return false;
      },
      submitAction: function submitAction(fileList) {
        if (fileList.length === 0) {
          return;
        }
        var fileSize = 0;
        var files = [];
        for (var i = 0, len = fileList.length; i < len; i++) {
          if (/image/i.test(fileList[i].type)) {
            files.push(fileList[i]);
            fileSize += fileList[i].size;
          }
        }
        var limitSize = this.options.imageUploadSizeLimit;
        if (limitSize > 0) {
          var infoSize = 0;
          var imagesInfo = this.context.image._infoList;
          for (var _i = 0, _len = imagesInfo.length; _i < _len; _i++) {
            infoSize += imagesInfo[_i].size * 1;
          }
          if (fileSize + infoSize > limitSize) {
            this.closeLoading();
            var err = "[KothingEditor.imageUpload.fail] Size of uploadable total images: " + limitSize / 1e3 + "KB";
            if (typeof this.functions.onImageUploadError !== "function" || this.functions.onImageUploadError(err, {
              limitSize,
              currentSize: infoSize,
              uploadSize: fileSize
            }, this)) {
              this.functions.noticeOpen(err);
            }
            return;
          }
        }
        var contextImage = this.context.image;
        contextImage._uploadFileLength = files.length;
        var anchor = this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true);
        var info = {
          anchor,
          inputWidth: contextImage.inputX.value,
          inputHeight: contextImage.inputY.value,
          align: contextImage._align,
          isUpdate: this.context.dialog.updateModal,
          element: contextImage._element
        };
        if (typeof this.functions.onImageUploadBefore === "function") {
          var result = this.functions.onImageUploadBefore(files, info, this, function(data) {
            if (data && this._w.Array.isArray(data.result)) {
              this.plugins.image.register.call(this, info, data);
            } else {
              this.plugins.image.upload.call(this, info, data);
            }
          }.bind(this));
          if (typeof result === "undefined") {
            return;
          }
          if (!result) {
            this.closeLoading();
            return;
          }
          if (this._w.Array.isArray(result) && result.length > 0) {
            files = result;
          }
        }
        this.plugins.image.upload.call(this, info, files);
      },
      error: function error(message, response) {
        this.closeLoading();
        if (typeof this.functions.onImageUploadError !== "function" || this.functions.onImageUploadError(message, response, this)) {
          this.functions.noticeOpen(message);
          throw Error("[KothingEditor.plugin.image.error] response: " + message);
        }
      },
      upload: function upload(info, files) {
        if (!files) {
          this.closeLoading();
          return;
        }
        if (typeof files === "string") {
          this.plugins.image.error.call(this, files, null);
          return;
        }
        var imageUploadUrl = this.options.imageUploadUrl;
        var filesLen = this.context.dialog.updateModal ? 1 : files.length;
        if (typeof imageUploadUrl === "string" && imageUploadUrl.length > 0) {
          var formData = new FormData();
          for (var i = 0; i < filesLen; i++) {
            formData.append("file-" + i, files[i]);
          }
          this.plugins.fileManager.upload.call(this, imageUploadUrl, this.options.imageUploadHeader, formData, this.plugins.image.callBack_imgUpload.bind(this, info), this.functions.onImageUploadError);
        } else {
          this.plugins.image.setup_reader.call(this, files, info.anchor, info.inputWidth, info.inputHeight, info.align, filesLen, info.isUpdate);
        }
      },
      callBack_imgUpload: function callBack_imgUpload(info, xmlHttp) {
        if (typeof this.functions.imageUploadHandler === "function") {
          this.functions.imageUploadHandler(xmlHttp, info, this);
        } else {
          var response = JSON.parse(xmlHttp.responseText);
          if (response.errorMessage) {
            this.plugins.image.error.call(this, response.errorMessage, response);
          } else {
            this.plugins.image.register.call(this, info, response);
          }
        }
      },
      register: function register(info, response) {
        var fileList = response.result;
        for (var i = 0, len = fileList.length, file; i < len; i++) {
          file = {
            name: fileList[i].name,
            size: fileList[i].size
          };
          if (info.isUpdate) {
            this.plugins.image.update_src.call(this, fileList[i].url, info.element, file);
            break;
          } else {
            this.plugins.image.create_image.call(this, fileList[i].url, info.anchor, info.inputWidth, info.inputHeight, info.align, file);
          }
        }
        this.closeLoading();
      },
      setup_reader: function setup_reader(files, anchor, width, height, align, filesLen, isUpdate) {
        var _this = this;
        try {
          (function() {
            _this.context.image.base64RenderIndex = filesLen;
            var wFileReader = _this._w.FileReader;
            var filesStack = [filesLen];
            _this.context.image.inputX.value = width;
            _this.context.image.inputY.value = height;
            for (var i = 0, reader, file; i < filesLen; i++) {
              reader = new wFileReader();
              file = files[i];
              reader.onload = function(reader2, update, updateElement, file2, index) {
                filesStack[index] = {
                  result: reader2.result,
                  file: file2
                };
                if (--this.context.image.base64RenderIndex === 0) {
                  this.plugins.image.onRender_imgBase64.call(this, update, filesStack, updateElement, anchor, width, height, align);
                  this.closeLoading();
                }
              }.bind(_this, reader, isUpdate, _this.context.image._element, file, i);
              reader.readAsDataURL(file);
            }
          })();
        } catch (e) {
          this.closeLoading();
          throw Error('[KothingEditor.image.setup_reader.fail] cause : "' + e.message + '"');
        }
      },
      onRender_imgBase64: function onRender_imgBase64(update, filesStack, updateElement, anchor, width, height, align) {
        var updateMethod = this.plugins.image.update_src;
        var createMethod = this.plugins.image.create_image;
        for (var i = 0, len = filesStack.length; i < len; i++) {
          if (update) {
            this.context.image._element.setAttribute("data-file-name", filesStack[i].file.name);
            this.context.image._element.setAttribute("data-file-size", filesStack[i].file.size);
            updateMethod.call(this, filesStack[i].result, updateElement, filesStack[i].file);
          } else {
            createMethod.call(this, filesStack[i].result, anchor, width, height, align, filesStack[i].file);
          }
        }
      },
      onRender_imgUrl: function onRender_imgUrl() {
        var contextImage = this.context.image;
        if (contextImage._v_src._linkValue.length === 0) {
          return false;
        }
        try {
          var file = {
            name: contextImage._v_src._linkValue.split("/").pop(),
            size: 0
          };
          if (this.context.dialog.updateModal) {
            this.plugins.image.update_src.call(this, contextImage._v_src._linkValue, contextImage._element, file);
          } else {
            this.plugins.image.create_image.call(this, contextImage._v_src._linkValue, this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true), contextImage.inputX.value, contextImage.inputY.value, contextImage._align, file);
          }
        } catch (e) {
          throw Error('[KothingEditor.image.URLRendering.fail] cause : "' + e.message + '"');
        } finally {
          this.closeLoading();
        }
      },
      onRender_link: function onRender_link(imgTag, anchor) {
        if (anchor) {
          anchor.setAttribute("data-image-link", "image");
          imgTag.setAttribute("data-image-link", anchor.href);
          anchor.appendChild(imgTag);
          return anchor;
        }
        return imgTag;
      },
      setInputSize: function setInputSize(xy, e) {
        if (e && e.keyCode === 32) {
          e.preventDefault();
          return;
        }
        this.plugins.resizing._module_setInputSize.call(this, this.context.image, xy);
      },
      setRatio: function setRatio() {
        this.plugins.resizing._module_setRatio.call(this, this.context.image);
      },
      checkFileInfo: function checkFileInfo() {
        var imagePlugin = this.plugins.image;
        var contextImage = this.context.image;
        var modifyHandler = function(tag) {
          imagePlugin.onModifyMode.call(this, tag, null);
          imagePlugin.openModify.call(this, true);
          contextImage.inputX.value = contextImage._origin_w;
          contextImage.inputY.value = contextImage._origin_h;
          var format = this.util.getFormatElement(tag);
          if (format) {
            contextImage._align = format.style.textAlign || format.style.float;
          }
          var link = this.util.getParentElement(tag, this.util.isAnchor);
          if (link && !contextImage.anchorCtx.linkValue) {
            contextImage.anchorCtx.linkValue = " ";
          }
          imagePlugin.update_image.call(this, true, false, true);
        }.bind(this);
        this.plugins.fileManager.checkInfo.call(this, "image", ["img"], this.functions.onImageUpload, modifyHandler, true);
      },
      resetFileInfo: function resetFileInfo() {
        this.plugins.fileManager.resetInfo.call(this, "image", this.functions.onImageUpload);
      },
      create_image: function create_image(src, anchor, width, height, align, file) {
        var imagePlugin = this.plugins.image;
        var contextImage = this.context.image;
        this.context.resizing._resize_plugin = "image";
        var oImg = this.util.createElement("IMG");
        oImg.src = src;
        oImg.alt = contextImage._altText;
        oImg.setAttribute("data-rotate", "0");
        anchor = imagePlugin.onRender_link.call(this, oImg, anchor);
        if (contextImage._resizing) {
          oImg.setAttribute("data-proportion", contextImage._proportionChecked);
        }
        var cover = this.plugins.component.set_cover.call(this, anchor);
        var container = this.plugins.component.set_container.call(this, cover, "ke-image-container");
        if (contextImage._captionChecked) {
          contextImage._caption = this.plugins.component.create_caption.call(this);
          contextImage._caption.setAttribute("contenteditable", false);
          cover.appendChild(contextImage._caption);
        }
        contextImage._element = oImg;
        contextImage._cover = cover;
        contextImage._container = container;
        imagePlugin.applySize.call(this, width, height);
        imagePlugin.setAlign.call(this, align, oImg, cover, container);
        oImg.onload = imagePlugin._image_create_onload.bind(this, oImg, contextImage.svgDefaultSize, container);
        if (this.insertComponent(container, true, true, true)) {
          this.plugins.fileManager.setInfo.call(this, "image", oImg, this.functions.onImageUpload, file, true);
        }
        this.context.resizing._resize_plugin = "";
      },
      _image_create_onload: function _image_create_onload(oImg, svgDefaultSize, container) {
        if (oImg.offsetWidth === 0) {
          this.plugins.image.applySize.call(this, svgDefaultSize, "");
        }
        if (this.options.mediaAutoSelect) {
          this.selectComponent(oImg, "image");
        } else {
          var line = this.appendFormatTag(container, null);
          this.setRange(line, 0, line, 0);
        }
      },
      update_image: function update_image(init, openController, notHistoryPush) {
        var contextImage = this.context.image;
        var imageEl = contextImage._element;
        var cover = contextImage._cover;
        var container = contextImage._container;
        var isNewContainer = false;
        if (cover === null) {
          isNewContainer = true;
          imageEl = contextImage._element.cloneNode(true);
          cover = this.plugins.component.set_cover.call(this, imageEl);
        }
        if (container === null) {
          cover = cover.cloneNode(true);
          imageEl = cover.querySelector("img");
          isNewContainer = true;
          container = this.plugins.component.set_container.call(this, cover, "ke-image-container");
        } else if (isNewContainer) {
          container.innerHTML = "";
          container.appendChild(cover);
          contextImage._cover = cover;
          contextImage._element = imageEl;
          isNewContainer = false;
        }
        var changeSize;
        var x = this.util.isNumber(contextImage.inputX.value) ? contextImage.inputX.value + contextImage.sizeUnit : contextImage.inputX.value;
        var y = this.util.isNumber(contextImage.inputY.value) ? contextImage.inputY.value + contextImage.sizeUnit : contextImage.inputY.value;
        if (/%$/.test(imageEl.style.width)) {
          changeSize = x !== container.style.width || y !== container.style.height;
        } else {
          changeSize = x !== imageEl.style.width || y !== imageEl.style.height;
        }
        imageEl.alt = contextImage._altText;
        var modifiedCaption = false;
        if (contextImage._captionChecked) {
          if (!contextImage._caption) {
            contextImage._caption = this.plugins.component.create_caption.call(this);
            cover.appendChild(contextImage._caption);
            modifiedCaption = true;
          }
        } else {
          if (contextImage._caption) {
            this.util.removeItem(contextImage._caption);
            contextImage._caption = null;
            modifiedCaption = true;
          }
        }
        var anchor = this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true);
        if (anchor) {
          contextImage._linkElement = contextImage._linkElement === anchor ? anchor.cloneNode(false) : anchor;
          cover.insertBefore(this.plugins.image.onRender_link.call(this, imageEl, contextImage._linkElement), contextImage._caption);
        } else if (contextImage._linkElement !== null) {
          var imageElement = imageEl;
          imageElement.setAttribute("data-image-link", "");
          if (cover.contains(contextImage._linkElement)) {
            var newEl = imageElement.cloneNode(true);
            cover.removeChild(contextImage._linkElement);
            cover.insertBefore(newEl, contextImage._caption);
            imageEl = newEl;
          }
        }
        if (isNewContainer) {
          var existElement = this.util.isRangeFormatElement(contextImage._element.parentNode) || this.util.isWysiwygDiv(contextImage._element.parentNode) ? contextImage._element : /^A$/i.test(contextImage._element.parentNode.nodeName) ? contextImage._element.parentNode : this.util.getFormatElement(contextImage._element) || contextImage._element;
          if (this.util.isFormatElement(existElement) && existElement.childNodes.length > 0) {
            existElement.parentNode.insertBefore(container, existElement);
            this.util.removeItem(contextImage._element);
            this.util.removeEmptyNode(existElement, null);
            if (existElement.children.length === 0) {
              existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);
            }
          } else {
            if (this.util.isFormatElement(existElement.parentNode)) {
              var formats = existElement.parentNode;
              formats.parentNode.insertBefore(container, existElement.previousSibling ? formats.nextElementSibling : formats);
              this.util.removeItem(existElement);
            } else {
              existElement.parentNode.replaceChild(container, existElement);
            }
          }
          imageEl = container.querySelector("img");
          contextImage._element = imageEl;
          contextImage._cover = cover;
          contextImage._container = container;
        }
        if (modifiedCaption || !contextImage._onlyPercentage && changeSize) {
          if (!init && (/\d+/.test(imageEl.style.height) || this.context.resizing._rotateVertical && contextImage._captionChecked)) {
            if (/%$/.test(contextImage.inputX.value) || /%$/.test(contextImage.inputY.value)) {
              this.plugins.resizing.resetTransform.call(this, imageEl);
            } else {
              this.plugins.resizing.setTransformSize.call(this, imageEl, this.util.getNumber(contextImage.inputX.value, 0), this.util.getNumber(contextImage.inputY.value, 0));
            }
          }
        }
        if (contextImage._resizing) {
          imageEl.setAttribute("data-proportion", contextImage._proportionChecked);
          if (changeSize) {
            this.plugins.image.applySize.call(this);
          }
        }
        this.plugins.image.setAlign.call(this, null, imageEl, null, null);
        if (init) {
          this.plugins.fileManager.setInfo.call(this, "image", imageEl, this.functions.onImageUpload, null, true);
        }
        if (openController) {
          this.selectComponent(imageEl, "image");
        }
        if (!notHistoryPush) {
          this.history.push(false);
        }
      },
      update_src: function update_src(src, element, file) {
        element.src = src;
        this._w.setTimeout(this.plugins.fileManager.setInfo.bind(this, "image", element, this.functions.onImageUpload, file, true));
        this.selectComponent(element, "image");
      },
      onModifyMode: function onModifyMode(element, size) {
        if (!element) {
          return;
        }
        var contextImage = this.context.image;
        contextImage._linkElement = contextImage.anchorCtx.linkAnchor = /^A$/i.test(element.parentNode.nodeName) ? element.parentNode : null;
        contextImage._element = element;
        contextImage._cover = this.util.getParentElement(element, "FIGURE");
        contextImage._container = this.util.getParentElement(element, this.util.isMediaComponent);
        contextImage._caption = this.util.getChildElement(contextImage._cover, "FIGCAPTION");
        contextImage._align = element.style.float || element.getAttribute("data-align") || "none";
        element.style.float = "";
        this.plugins.anchor.setCtx(contextImage._linkElement, contextImage.anchorCtx);
        if (size) {
          contextImage._element_w = size.w;
          contextImage._element_h = size.h;
          contextImage._element_t = size.t;
          contextImage._element_l = size.l;
        }
        var userSize = contextImage._element.getAttribute("data-size") || contextImage._element.getAttribute("data-origin");
        var w, h;
        if (userSize) {
          userSize = userSize.split(",");
          w = userSize[0];
          h = userSize[1];
        } else if (size) {
          w = size.w;
          h = size.h;
        }
        contextImage._origin_w = w || element.style.width || element.width || "";
        contextImage._origin_h = h || element.style.height || element.height || "";
      },
      openModify: function openModify(notOpen) {
        var contextImage = this.context.image;
        if (contextImage.imgUrlFile) {
          contextImage._v_src._linkValue = contextImage.previewSrc.textContent = contextImage.imgUrlFile.value = contextImage._element.src;
        }
        contextImage._altText = contextImage.altText.value = contextImage._element.alt;
        contextImage.modal.querySelector('input[name="kothingEditor_image_radio"][value="' + contextImage._align + '"]').checked = true;
        contextImage._align = contextImage.modal.querySelector('input[name="kothingEditor_image_radio"]:checked').value;
        contextImage._captionChecked = contextImage.captionCheckEl.checked = !!contextImage._caption;
        if (contextImage._resizing) {
          this.plugins.resizing._module_setModifyInputSize.call(this, contextImage, this.plugins.image);
        }
        if (!notOpen) {
          this.plugins.dialog.open.call(this, "image", true);
        }
      },
      applySize: function applySize(w, h) {
        var contextImage = this.context.image;
        if (!w) {
          w = contextImage.inputX.value || this.options.imageWidth;
        }
        if (!h) {
          h = contextImage.inputY.value || this.options.imageHeight;
        }
        if (contextImage._onlyPercentage && !!w || /%$/.test(w)) {
          this.plugins.image.setPercentSize.call(this, w, h);
          return true;
        } else if ((!w || w === "auto") && (!h || h === "auto")) {
          this.plugins.image.setAutoSize.call(this);
        } else {
          this.plugins.image.setSize.call(this, w, h, false);
        }
        return false;
      },
      sizeRevert: function sizeRevert() {
        this.plugins.resizing._module_sizeRevert.call(this, this.context.image);
      },
      setSize: function setSize(w, h, notResetPercentage, direction) {
        var contextImage = this.context.image;
        var onlyW = /^(rw|lw)$/.test(direction);
        var onlyH = /^(th|bh)$/.test(direction);
        if (!onlyH) {
          contextImage._element.style.width = this.util.isNumber(w) ? w + contextImage.sizeUnit : w;
          this.plugins.image.cancelPercentAttr.call(this);
        }
        if (!onlyW) {
          contextImage._element.style.height = this.util.isNumber(h) ? h + contextImage.sizeUnit : /%$/.test(h) ? "" : h;
        }
        if (contextImage._align === "center") {
          this.plugins.image.setAlign.call(this, null, null, null, null);
        }
        if (!notResetPercentage) {
          contextImage._element.removeAttribute("data-percentage");
        }
        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);
      },
      setAutoSize: function setAutoSize() {
        var contextImage = this.context.image;
        this.plugins.resizing.resetTransform.call(this, contextImage._element);
        this.plugins.image.cancelPercentAttr.call(this);
        contextImage._element.style.maxWidth = "";
        contextImage._element.style.width = "";
        contextImage._element.style.height = "";
        contextImage._cover.style.width = "";
        contextImage._cover.style.height = "";
        this.plugins.image.setAlign.call(this, null, null, null, null);
        contextImage._element.setAttribute("data-percentage", "auto,auto");
        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);
      },
      setOriginSize: function setOriginSize() {
        var contextImage = this.context.image;
        contextImage._element.removeAttribute("data-percentage");
        this.plugins.resizing.resetTransform.call(this, contextImage._element);
        this.plugins.image.cancelPercentAttr.call(this);
        var originSize = (contextImage._element.getAttribute("data-origin") || "").split(",");
        var w = originSize[0];
        var h = originSize[1];
        if (originSize) {
          if (contextImage._onlyPercentage || /%$/.test(w) && (/%$/.test(h) || !/\d/.test(h))) {
            this.plugins.image.setPercentSize.call(this, w, h);
          } else {
            this.plugins.image.setSize.call(this, w, h);
          }
          this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);
        }
      },
      setPercentSize: function setPercentSize(w, h) {
        var contextImage = this.context.image;
        h = !!h && !/%$/.test(h) && !this.util.getNumber(h, 0) ? this.util.isNumber(h) ? h + "%" : h : this.util.isNumber(h) ? h + contextImage.sizeUnit : h || "";
        var heightPercentage = /%$/.test(h);
        contextImage._container.style.width = this.util.isNumber(w) ? w + "%" : w;
        contextImage._container.style.height = "";
        contextImage._cover.style.width = "100%";
        contextImage._cover.style.height = !heightPercentage ? "" : h;
        contextImage._element.style.width = "100%";
        contextImage._element.style.height = heightPercentage ? "" : h;
        contextImage._element.style.maxWidth = "";
        if (contextImage._align === "center") {
          this.plugins.image.setAlign.call(this, null, null, null, null);
        }
        contextImage._element.setAttribute("data-percentage", w + "," + h);
        this.plugins.resizing.setCaptionPosition.call(this, contextImage._element);
        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);
      },
      cancelPercentAttr: function cancelPercentAttr() {
        var contextImage = this.context.image;
        contextImage._cover.style.width = "";
        contextImage._cover.style.height = "";
        contextImage._container.style.width = "";
        contextImage._container.style.height = "";
        this.util.removeClass(contextImage._container, this.context.image._floatClassRegExp);
        this.util.addClass(contextImage._container, "__ke__float-" + contextImage._align);
        if (contextImage._align === "center") {
          this.plugins.image.setAlign.call(this, null, null, null, null);
        }
      },
      setAlign: function setAlign(align, element, cover, container) {
        var contextImage = this.context.image;
        if (!align) {
          align = contextImage._align;
        }
        if (!element) {
          element = contextImage._element;
        }
        if (!cover) {
          cover = contextImage._cover;
        }
        if (!container) {
          container = contextImage._container;
        }
        if (align && align !== "none") {
          cover.style.margin = "auto";
        } else {
          cover.style.margin = "0";
        }
        if (/%$/.test(element.style.width) && align === "center") {
          container.style.minWidth = "100%";
          cover.style.width = container.style.width;
        } else {
          container.style.minWidth = "";
          cover.style.width = this.context.resizing._rotateVertical ? element.style.height || element.offsetHeight : !element.style.width || element.style.width === "auto" ? "" : element.style.width || "100%";
        }
        if (!this.util.hasClass(container, "__ke__float-" + align)) {
          this.util.removeClass(container, contextImage._floatClassRegExp);
          this.util.addClass(container, "__ke__float-" + align);
        }
        element.setAttribute("data-align", align);
      },
      init: function init() {
        var contextImage = this.context.image;
        if (contextImage.imgInputFile) {
          contextImage.imgInputFile.value = "";
        }
        if (contextImage.imgUrlFile) {
          contextImage._v_src._linkValue = contextImage.previewSrc.textContent = contextImage.imgUrlFile.value = "";
        }
        if (contextImage.imgInputFile && contextImage.imgUrlFile) {
          contextImage.imgUrlFile.removeAttribute("disabled");
          contextImage.previewSrc.style.textDecoration = "";
        }
        contextImage.altText.value = "";
        contextImage.modal.querySelector('input[name="kothingEditor_image_radio"][value="none"]').checked = true;
        contextImage.captionCheckEl.checked = false;
        contextImage._element = null;
        this.plugins.image.openTab.call(this, "init");
        if (contextImage._resizing) {
          contextImage.inputX.value = this.options.imageWidth === contextImage._defaultSizeX ? "" : this.options.imageWidth;
          contextImage.inputY.value = this.options.imageHeight === contextImage._defaultSizeY ? "" : this.options.imageHeight;
          contextImage.proportion.checked = true;
          contextImage._ratio = false;
          contextImage._ratioX = 1;
          contextImage._ratioY = 1;
        }
        this.plugins.anchor.init.call(this, contextImage.anchorCtx);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/dialog/video.js
var require_video = __commonJS({
  "node_modules/kothing-editor/lib/plugins/dialog/video.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _dialog = _interopRequireDefault(require_dialog());
    var _component = _interopRequireDefault(require_component());
    var _resizing = _interopRequireDefault(require_resizing());
    var _fileManager = _interopRequireDefault(require_fileManager());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _default = {
      name: "video",
      display: "dialog",
      add: function add(core) {
        core.addModule([_dialog.default, _component.default, _resizing.default, _fileManager.default]);
        var options = core.options;
        var context = core.context;
        var contextVideo = context.video = {
          _infoList: [],
          _infoIndex: 0,
          _uploadFileLength: 0,
          focusElement: null,
          sizeUnit: options._videoSizeUnit,
          _align: "none",
          _floatClassRegExp: "__ke__float\\-[a-z]+",
          _youtubeQuery: options.youtubeQuery,
          _videoRatio: options.videoRatio * 100 + "%",
          _defaultRatio: options.videoRatio * 100 + "%",
          _linkValue: "",
          _element: null,
          _cover: null,
          _container: null,
          inputX: null,
          inputY: null,
          _element_w: 1,
          _element_h: 1,
          _element_l: 0,
          _element_t: 0,
          _defaultSizeX: "100%",
          _defaultSizeY: options.videoRatio * 100 + "%",
          _origin_w: options.videoWidth === "100%" ? "" : options.videoWidth,
          _origin_h: options.videoHeight === "56.25%" ? "" : options.videoHeight,
          _proportionChecked: true,
          _resizing: options.videoResizing,
          _resizeDotHide: !options.videoHeightShow,
          _rotation: options.videoRotation,
          _onlyPercentage: options.videoSizeOnlyPercentage,
          _ratio: false,
          _ratioX: 1,
          _ratioY: 1,
          _captionShow: false
        };
        var video_dialog = this.setDialog(core);
        contextVideo.modal = video_dialog;
        contextVideo.videoInputFile = video_dialog.querySelector("._ke_video_file");
        contextVideo.videoUrlFile = video_dialog.querySelector(".ke-input-url");
        contextVideo.focusElement = contextVideo.videoUrlFile || contextVideo.videoInputFile;
        contextVideo.preview = video_dialog.querySelector(".ke-link-preview");
        video_dialog.querySelector("form").addEventListener("submit", this.submit.bind(core));
        if (contextVideo.videoInputFile) {
          video_dialog.querySelector(".ke-dialog-files-edge-button").addEventListener("click", this._removeSelectedFiles.bind(contextVideo.videoInputFile, contextVideo.videoUrlFile, contextVideo.preview));
        }
        if (contextVideo.videoInputFile && contextVideo.videoUrlFile) {
          contextVideo.videoInputFile.addEventListener("change", this._fileInputChange.bind(contextVideo));
        }
        if (contextVideo.videoUrlFile) {
          contextVideo.videoUrlFile.addEventListener("input", this._onLinkPreview.bind(contextVideo.preview, contextVideo, options.linkProtocol));
        }
        contextVideo.proportion = {};
        contextVideo.videoRatioOption = {};
        contextVideo.inputX = {};
        contextVideo.inputY = {};
        if (options.videoResizing) {
          contextVideo.proportion = video_dialog.querySelector("._ke_video_check_proportion");
          contextVideo.videoRatioOption = video_dialog.querySelector(".ke-video-ratio");
          contextVideo.inputX = video_dialog.querySelector("._ke_video_size_x");
          contextVideo.inputY = video_dialog.querySelector("._ke_video_size_y");
          contextVideo.inputX.value = options.videoWidth;
          contextVideo.inputY.value = options.videoHeight;
          contextVideo.inputX.addEventListener("keyup", this.setInputSize.bind(core, "x"));
          contextVideo.inputY.addEventListener("keyup", this.setInputSize.bind(core, "y"));
          contextVideo.inputX.addEventListener("change", this.setRatio.bind(core));
          contextVideo.inputY.addEventListener("change", this.setRatio.bind(core));
          contextVideo.proportion.addEventListener("change", this.setRatio.bind(core));
          contextVideo.videoRatioOption.addEventListener("change", this.setVideoRatio.bind(core));
          video_dialog.querySelector(".ke-dialog-btn-revert").addEventListener("click", this.sizeRevert.bind(core));
        }
        context.dialog.modal.appendChild(video_dialog);
        video_dialog = null;
      },
      setDialog: function setDialog(core) {
        var option = core.options;
        var lang = core.lang;
        var dialog = core.util.createElement("DIV");
        dialog.className = "ke-dialog-content";
        dialog.style.display = "none";
        var html = '<form method="post" enctype="multipart/form-data"><div class="ke-dialog-header"><button type="button" data-command="close" class="ke-btn ke-dialog-close" aria-label="Close" title="' + lang.dialogBox.close + '">' + core.icons.cancel + '</button><span class="ke-modal-title">' + lang.dialogBox.videoBox.title + '</span></div><div class="ke-dialog-body">';
        if (option.videoFileInput) {
          html += '<div class="ke-dialog-form"><label>' + lang.dialogBox.videoBox.file + '</label><div class="ke-dialog-form-files"><input class="ke-input-form _ke_video_file" type="file" accept="' + option.videoAccept + '"' + (option.videoMultipleFile ? ' multiple="multiple"' : "") + '/><button type="button" data-command="filesRemove" class="ke-btn ke-dialog-files-edge-button ke-file-remove" title="' + lang.controller.remove + '">' + core.icons.cancel + "</button></div></div>";
        }
        if (option.videoUrlInput) {
          html += '<div class="ke-dialog-form"><label>' + lang.dialogBox.videoBox.url + '</label><input class="ke-input-form ke-input-url" type="text" /><pre class="ke-link-preview"></pre></div>';
        }
        if (option.videoResizing) {
          var ratioList = option.videoRatioList || [{
            name: "16:9",
            value: 0.5625
          }, {
            name: "4:3",
            value: 0.75
          }, {
            name: "21:9",
            value: 0.4285
          }];
          var ratio = option.videoRatio;
          var onlyPercentage = option.videoSizeOnlyPercentage;
          var onlyPercentDisplay = onlyPercentage ? ' style="display: none !important;"' : "";
          var heightDisplay = !option.videoHeightShow ? ' style="display: none !important;"' : "";
          var ratioDisplay = !option.videoRatioShow ? ' style="display: none !important;"' : "";
          var onlyWidthDisplay = !onlyPercentage && !option.videoHeightShow && !option.videoRatioShow ? ' style="display: none !important;"' : "";
          html += '<div class="ke-dialog-form"><div class="ke-dialog-size-text"><label class="size-w">' + lang.dialogBox.width + '</label><label class="ke-dialog-size-x">&nbsp;</label><label class="size-h"' + heightDisplay + ">" + lang.dialogBox.height + '</label><label class="size-h"' + ratioDisplay + ">(" + lang.dialogBox.ratio + ')</label></div><input class="ke-input-control _ke_video_size_x" placeholder="100%"' + (onlyPercentage ? ' type="number" min="1"' : 'type="text"') + (onlyPercentage ? ' max="100"' : "") + '/><label class="ke-dialog-size-x"' + onlyWidthDisplay + ">" + (onlyPercentage ? "%" : "x") + '</label><input class="ke-input-control _ke_video_size_y" placeholder="' + option.videoRatio * 100 + '%"' + (onlyPercentage ? ' type="number" min="1"' : 'type="text"') + (onlyPercentage ? ' max="100"' : "") + heightDisplay + '/><select class="ke-input-select ke-video-ratio" title="' + lang.dialogBox.ratio + '"' + ratioDisplay + ">";
          if (!heightDisplay) {
            html += '<option value=""> - </option>';
          }
          for (var i = 0, len = ratioList.length; i < len; i++) {
            html += '<option value="' + ratioList[i].value + '"' + (ratio.toString() === ratioList[i].value.toString() ? " selected" : "") + ">" + ratioList[i].name + "</option>";
          }
          html += '</select><button type="button" title="' + lang.dialogBox.revertButton + '" class="ke-btn ke-dialog-btn-revert" style="float: right;">' + core.icons.revert + '</button></div><div class="ke-dialog-form ke-dialog-form-footer"' + onlyPercentDisplay + onlyWidthDisplay + '><label><input type="checkbox" class="ke-dialog-btn-check _ke_video_check_proportion" checked/>&nbsp;' + lang.dialogBox.proportion + "</label></div>";
        }
        html += '</div><div class="ke-dialog-footer"><div><label><input type="radio" name="kothingEditor_video_radio" class="ke-dialog-btn-radio" value="none" checked>' + lang.dialogBox.basic + '</label><label><input type="radio" name="kothingEditor_video_radio" class="ke-dialog-btn-radio" value="left">' + lang.dialogBox.left + '</label><label><input type="radio" name="kothingEditor_video_radio" class="ke-dialog-btn-radio" value="center">' + lang.dialogBox.center + '</label><label><input type="radio" name="kothingEditor_video_radio" class="ke-dialog-btn-radio" value="right">' + lang.dialogBox.right + '</label></div><button type="submit" class="ke-btn-primary" title="' + lang.dialogBox.submitButton + '"><span>' + lang.dialogBox.submitButton + "</span></button></div></form>";
        dialog.innerHTML = html;
        return dialog;
      },
      _fileInputChange: function _fileInputChange() {
        if (!this.videoInputFile.value) {
          this.videoUrlFile.removeAttribute("disabled");
          this.preview.style.textDecoration = "";
        } else {
          this.videoUrlFile.setAttribute("disabled", true);
          this.preview.style.textDecoration = "line-through";
        }
      },
      _removeSelectedFiles: function _removeSelectedFiles(urlInput, preview) {
        this.value = "";
        if (urlInput) {
          urlInput.removeAttribute("disabled");
          preview.style.textDecoration = "";
        }
      },
      _onLinkPreview: function _onLinkPreview(context, protocol, e) {
        var value = e.target.value.trim();
        if (/^<iframe.*\/iframe>$/.test(value)) {
          context._linkValue = value;
          this.textContent = '<IFrame :src=".."></IFrame>';
        } else {
          context._linkValue = this.textContent = !value ? "" : protocol && value.indexOf("://") === -1 && value.indexOf("#") !== 0 ? protocol + value : value.indexOf("://") === -1 ? "/" + value : value;
        }
      },
      _setTagAttrs: function _setTagAttrs(element) {
        element.setAttribute("controls", true);
        var attrs = this.options.videoTagAttrs;
        if (!attrs) {
          return;
        }
        for (var key in attrs) {
          if (!this.util.hasOwn(attrs, key)) {
            continue;
          }
          element.setAttribute(key, attrs[key]);
        }
      },
      createVideoTag: function createVideoTag() {
        var videoTag = this.util.createElement("VIDEO");
        this.plugins.video._setTagAttrs.call(this, videoTag);
        return videoTag;
      },
      _setIframeAttrs: function _setIframeAttrs(element) {
        element.frameBorder = "0";
        element.allowFullscreen = true;
        var attrs = this.options.videoIframeAttrs;
        if (!attrs) {
          return;
        }
        for (var key in attrs) {
          if (!this.util.hasOwn(attrs, key)) {
            continue;
          }
          element.setAttribute(key, attrs[key]);
        }
      },
      createIframeTag: function createIframeTag() {
        var iframeTag = this.util.createElement("IFRAME");
        this.plugins.video._setIframeAttrs.call(this, iframeTag);
        return iframeTag;
      },
      fileTags: ["iframe", "video"],
      select: function select(element) {
        this.plugins.video.onModifyMode.call(this, element, this.plugins.resizing.call_controller_resize.call(this, element, "video"));
      },
      destroy: function destroy(element) {
        var frame = element || this.context.video._element;
        var container = this.context.video._container;
        var dataIndex = frame.getAttribute("data-index") * 1;
        var focusEl = container.previousElementSibling || container.nextElementSibling;
        var emptyDiv = container.parentNode;
        this.util.removeItem(container);
        this.plugins.video.init.call(this);
        this.controllersOff();
        if (emptyDiv !== this.context.element.wysiwyg) {
          this.util.removeItemAllParents(emptyDiv, function(current) {
            return current.childNodes.length === 0;
          }, null);
        }
        this.focusEdge(focusEl);
        this.plugins.fileManager.deleteInfo.call(this, "video", dataIndex, this.functions.onVideoUpload);
        this.history.push(false);
      },
      on: function on(update) {
        var contextVideo = this.context.video;
        if (!update) {
          contextVideo.inputX.value = contextVideo._origin_w = this.options.videoWidth === contextVideo._defaultSizeX ? "" : this.options.videoWidth;
          contextVideo.inputY.value = contextVideo._origin_h = this.options.videoHeight === contextVideo._defaultSizeY ? "" : this.options.videoHeight;
          contextVideo.proportion.disabled = true;
          if (contextVideo.videoInputFile && this.options.videoMultipleFile) {
            contextVideo.videoInputFile.setAttribute("multiple", "multiple");
          }
        } else {
          if (contextVideo.videoInputFile && this.options.videoMultipleFile) {
            contextVideo.videoInputFile.removeAttribute("multiple");
          }
        }
        if (contextVideo._resizing) {
          this.plugins.video.setVideoRatioSelect.call(this, contextVideo._origin_h || contextVideo._defaultRatio);
        }
      },
      open: function open() {
        this.plugins.dialog.open.call(this, "video", this.currentControllerName === "video");
      },
      setVideoRatio: function setVideoRatio(e) {
        var contextVideo = this.context.video;
        var value = e.target.options[e.target.selectedIndex].value;
        contextVideo._defaultSizeY = contextVideo._videoRatio = !value ? contextVideo._defaultSizeY : value * 100 + "%";
        contextVideo.inputY.placeholder = !value ? "" : value * 100 + "%";
        contextVideo.inputY.value = "";
      },
      setInputSize: function setInputSize(xy, e) {
        if (e && e.keyCode === 32) {
          e.preventDefault();
          return;
        }
        var contextVideo = this.context.video;
        this.plugins.resizing._module_setInputSize.call(this, contextVideo, xy);
        if (xy === "y") {
          this.plugins.video.setVideoRatioSelect.call(this, e.target.value || contextVideo._defaultRatio);
        }
      },
      setRatio: function setRatio() {
        this.plugins.resizing._module_setRatio.call(this, this.context.video);
      },
      submit: function submit(e) {
        var contextVideo = this.context.video;
        var videoPlugin = this.plugins.video;
        e.preventDefault();
        e.stopPropagation();
        contextVideo._align = contextVideo.modal.querySelector('input[name="kothingEditor_video_radio"]:checked').value;
        try {
          if (contextVideo.videoInputFile && contextVideo.videoInputFile.files.length > 0) {
            this.showLoading();
            videoPlugin.submitAction.call(this, this.context.video.videoInputFile.files);
          } else if (contextVideo.videoUrlFile && contextVideo._linkValue.length > 0) {
            this.showLoading();
            videoPlugin.setup_url.call(this);
          }
        } catch (error) {
          this.closeLoading();
          throw Error('[KothingEditor.video.submit.fail] cause : "' + error.message + '"');
        } finally {
          this.plugins.dialog.close.call(this);
        }
        return false;
      },
      submitAction: function submitAction(fileList) {
        if (fileList.length === 0) {
          return;
        }
        var fileSize = 0;
        var files = [];
        for (var i = 0, len = fileList.length; i < len; i++) {
          if (/video/i.test(fileList[i].type)) {
            files.push(fileList[i]);
            fileSize += fileList[i].size;
          }
        }
        var limitSize = this.options.videoUploadSizeLimit;
        if (limitSize > 0) {
          var infoSize = 0;
          var videosInfo = this.context.video._infoList;
          for (var _i = 0, _len = videosInfo.length; _i < _len; _i++) {
            infoSize += videosInfo[_i].size * 1;
          }
          if (fileSize + infoSize > limitSize) {
            this.closeLoading();
            var err = "[KothingEditor.videoUpload.fail] Size of uploadable total videos: " + limitSize / 1e3 + "KB";
            if (typeof this.functions.onVideoUploadError !== "function" || this.functions.onVideoUploadError(err, {
              limitSize,
              currentSize: infoSize,
              uploadSize: fileSize
            }, this)) {
              this.functions.noticeOpen(err);
            }
            return;
          }
        }
        var contextVideo = this.context.video;
        contextVideo._uploadFileLength = files.length;
        var info = {
          inputWidth: contextVideo.inputX.value,
          inputHeight: contextVideo.inputY.value,
          align: contextVideo._align,
          isUpdate: this.context.dialog.updateModal,
          element: contextVideo._element
        };
        if (typeof this.functions.onVideoUploadBefore === "function") {
          var result = this.functions.onVideoUploadBefore(files, info, this, function(data) {
            if (data && this._w.Array.isArray(data.result)) {
              this.plugins.video.register.call(this, info, data);
            } else {
              this.plugins.video.upload.call(this, info, data);
            }
          }.bind(this));
          if (typeof result === "undefined") {
            return;
          }
          if (!result) {
            this.closeLoading();
            return;
          }
          if (_typeof(result) === "object" && result.length > 0) {
            files = result;
          }
        }
        this.plugins.video.upload.call(this, info, files);
      },
      error: function error(message, response) {
        this.closeLoading();
        if (typeof this.functions.onVideoUploadError !== "function" || this.functions.onVideoUploadError(message, response, this)) {
          this.functions.noticeOpen(message);
          throw Error("[KothingEditor.plugin.video.error] response: " + message);
        }
      },
      upload: function upload(info, files) {
        if (!files) {
          this.closeLoading();
          return;
        }
        if (typeof files === "string") {
          this.plugins.video.error.call(this, files, null);
          return;
        }
        var videoUploadUrl = this.options.videoUploadUrl;
        var filesLen = this.context.dialog.updateModal ? 1 : files.length;
        if (typeof videoUploadUrl === "string" && videoUploadUrl.length > 0) {
          var formData = new FormData();
          for (var i = 0; i < filesLen; i++) {
            formData.append("file-" + i, files[i]);
          }
          this.plugins.fileManager.upload.call(this, videoUploadUrl, this.options.videoUploadHeader, formData, this.plugins.video.callBack_videoUpload.bind(this, info), this.functions.onVideoUploadError);
        } else {
          throw Error('[KothingEditor.videoUpload.fail] cause : There is no "videoUploadUrl" option.');
        }
      },
      callBack_videoUpload: function callBack_videoUpload(info, xmlHttp) {
        if (typeof this.functions.videoUploadHandler === "function") {
          this.functions.videoUploadHandler(xmlHttp, info, this);
        } else {
          var response = JSON.parse(xmlHttp.responseText);
          if (response.errorMessage) {
            this.plugins.video.error.call(this, response.errorMessage, response);
          } else {
            this.plugins.video.register.call(this, info, response);
          }
        }
      },
      register: function register(info, response) {
        var fileList = response.result;
        var videoTag = this.plugins.video.createVideoTag.call(this);
        for (var i = 0, len = fileList.length, file; i < len; i++) {
          file = {
            name: fileList[i].name,
            size: fileList[i].size
          };
          this.plugins.video.create_video.call(this, info.isUpdate ? info.element : videoTag.cloneNode(false), fileList[i].url, info.inputWidth, info.inputHeight, info.align, file, info.isUpdate);
        }
        this.closeLoading();
      },
      setup_url: function setup_url() {
        try {
          var contextVideo = this.context.video;
          var url = contextVideo._linkValue;
          if (url.length === 0) {
            return false;
          }
          if (/^<iframe.*\/iframe>$/.test(url)) {
            var oIframe = new this._w.DOMParser().parseFromString(url, "text/html").querySelector("iframe");
            url = oIframe.src;
            if (url.length === 0) {
              return false;
            }
          }
          if (/youtu\.?be/.test(url)) {
            if (!/^http/.test(url)) {
              url = "https://" + url;
            }
            url = url.replace("watch?v=", "");
            if (!/^\/\/.+\/embed\//.test(url)) {
              url = url.replace(url.match(/\/\/.+\//)[0], "//www.youtube.com/embed/").replace("&", "?&");
            }
            if (contextVideo._youtubeQuery.length > 0) {
              if (/\?/.test(url)) {
                var splitUrl = url.split("?");
                url = splitUrl[0] + "?" + contextVideo._youtubeQuery + "&" + splitUrl[1];
              } else {
                url += "?" + contextVideo._youtubeQuery;
              }
            }
          } else if (/vimeo\.com/.test(url)) {
            if (url.endsWith("/")) {
              url = url.slice(0, -1);
            }
            url = "https://player.vimeo.com/video/" + url.slice(url.lastIndexOf("/") + 1);
          }
          this.plugins.video.create_video.call(this, this.plugins.video.createIframeTag.call(this), url, contextVideo.inputX.value, contextVideo.inputY.value, contextVideo._align, null, this.context.dialog.updateModal);
        } catch (error) {
          throw Error('[KothingEditor.video.upload.fail] cause : "' + error.message + '"');
        } finally {
          this.closeLoading();
        }
      },
      create_video: function create_video(oFrame, src, width, height, align, file, isUpdate) {
        this.context.resizing._resize_plugin = "video";
        var contextVideo = this.context.video;
        var cover = null;
        var container = null;
        var init = false;
        if (isUpdate) {
          oFrame = contextVideo._element;
          if (oFrame.src !== src) {
            init = true;
            var isYoutube = /youtu\.?be/.test(src);
            var isVimeo = /vimeo\.com/.test(src);
            if ((isYoutube || isVimeo) && !/^iframe$/i.test(oFrame.nodeName)) {
              var newTag = this.plugins.video.createIframeTag.call(this);
              newTag.src = src;
              oFrame.parentNode.replaceChild(newTag, oFrame);
              contextVideo._element = oFrame = newTag;
            } else if (!isYoutube && !isVimeo && !/^videoo$/i.test(oFrame.nodeName)) {
              var _newTag = this.plugins.video.createVideoTag.call(this);
              _newTag.src = src;
              oFrame.parentNode.replaceChild(_newTag, oFrame);
              contextVideo._element = oFrame = _newTag;
            } else {
              oFrame.src = src;
            }
          }
          container = contextVideo._container;
          cover = this.util.getParentElement(oFrame, "FIGURE");
        } else {
          init = true;
          oFrame.src = src;
          contextVideo._element = oFrame;
          cover = this.plugins.component.set_cover.call(this, oFrame);
          container = this.plugins.component.set_container.call(this, cover, "ke-video-container");
        }
        contextVideo._cover = cover;
        contextVideo._container = container;
        var inputUpdate = this.plugins.resizing._module_getSizeX.call(this, contextVideo) !== (width || contextVideo._defaultSizeX) || this.plugins.resizing._module_getSizeY.call(this, contextVideo) !== (height || contextVideo._videoRatio);
        var changeSize = !isUpdate || inputUpdate;
        if (contextVideo._resizing) {
          this.context.video._proportionChecked = contextVideo.proportion.checked;
          oFrame.setAttribute("data-proportion", contextVideo._proportionChecked);
        }
        var isPercent = false;
        if (changeSize) {
          isPercent = this.plugins.video.applySize.call(this);
        }
        if (!(isPercent && align === "center")) {
          this.plugins.video.setAlign.call(this, null, oFrame, cover, container);
        }
        var changed = true;
        if (!isUpdate) {
          changed = this.insertComponent(container, false, true, !this.options.mediaAutoSelect);
          if (!this.options.mediaAutoSelect) {
            var line = this.appendFormatTag(container, null);
            this.setRange(line, 0, line, 0);
          }
        } else if (contextVideo._resizing && this.context.resizing._rotateVertical && changeSize) {
          this.plugins.resizing.setTransformSize.call(this, oFrame, null, null);
        }
        if (changed) {
          if (init) {
            this.plugins.fileManager.setInfo.call(this, "video", oFrame, this.functions.onVideoUpload, file, true);
          }
          if (isUpdate) {
            this.selectComponent(oFrame, "video");
            this.history.push(false);
          }
        }
        this.context.resizing._resize_plugin = "";
      },
      _update_videoCover: function _update_videoCover(oFrame) {
        if (!oFrame) {
          return;
        }
        var contextVideo = this.context.video;
        if (/^video$/i.test(oFrame.nodeName)) {
          this.plugins.video._setTagAttrs.call(this, oFrame);
        } else {
          this.plugins.video._setIframeAttrs.call(this, oFrame);
        }
        var existElement = this.util.getParentElement(oFrame, this.util.isMediaComponent) || this.util.getParentElement(oFrame, function(current) {
          return this.isWysiwygDiv(current.parentNode);
        }.bind(this.util));
        var prevFrame = oFrame;
        contextVideo._element = oFrame = oFrame.cloneNode(true);
        var cover = contextVideo._cover = this.plugins.component.set_cover.call(this, oFrame);
        var container = contextVideo._container = this.plugins.component.set_container.call(this, cover, "ke-video-container");
        try {
          var figcaption = existElement.querySelector("figcaption");
          var caption = null;
          if (figcaption) {
            caption = this.util.createElement("DIV");
            caption.innerHTML = figcaption.innerHTML;
            this.util.removeItem(figcaption);
          }
          var size = (oFrame.getAttribute("data-size") || oFrame.getAttribute("data-origin") || "").split(",");
          this.plugins.video.applySize.call(this, size[0] || prevFrame.style.width || prevFrame.width || "", size[1] || prevFrame.style.height || prevFrame.height || "");
          var format = this.util.getFormatElement(prevFrame);
          if (format) {
            contextVideo._align = format.style.textAlign || format.style.float;
          }
          this.plugins.video.setAlign.call(this, null, oFrame, cover, container);
          if (this.util.isFormatElement(existElement) && existElement.childNodes.length > 0) {
            existElement.parentNode.insertBefore(container, existElement);
            this.util.removeItem(prevFrame);
            this.util.removeEmptyNode(existElement, null);
            if (existElement.children.length === 0) {
              existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);
            }
          } else {
            existElement.parentNode.replaceChild(container, existElement);
          }
          if (caption) {
            existElement.parentNode.insertBefore(caption, container.nextElementSibling);
          }
        } catch (error) {
          console.warn("[KothingEditor.video.error] Maybe the video tag is nested.", error);
        }
        this.plugins.fileManager.setInfo.call(this, "video", oFrame, this.functions.onVideoUpload, null, true);
      },
      onModifyMode: function onModifyMode(element, size) {
        var contextVideo = this.context.video;
        contextVideo._element = element;
        contextVideo._cover = this.util.getParentElement(element, "FIGURE");
        contextVideo._container = this.util.getParentElement(element, this.util.isMediaComponent);
        contextVideo._align = element.style.float || element.getAttribute("data-align") || "none";
        element.style.float = "";
        if (size) {
          contextVideo._element_w = size.w;
          contextVideo._element_h = size.h;
          contextVideo._element_t = size.t;
          contextVideo._element_l = size.l;
        }
        var origin = contextVideo._element.getAttribute("data-size") || contextVideo._element.getAttribute("data-origin");
        var w, h;
        if (origin) {
          origin = origin.split(",");
          w = origin[0];
          h = origin[1];
        } else if (size) {
          w = size.w;
          h = size.h;
        }
        contextVideo._origin_w = w || element.style.width || element.width || "";
        contextVideo._origin_h = h || element.style.height || element.height || "";
      },
      openModify: function openModify(notOpen) {
        var contextVideo = this.context.video;
        if (contextVideo.videoUrlFile) {
          contextVideo._linkValue = contextVideo.preview.textContent = contextVideo.videoUrlFile.value = contextVideo._element.src || (contextVideo._element.querySelector("source") || "").src || "";
        }
        contextVideo.modal.querySelector('input[name="kothingEditor_video_radio"][value="' + contextVideo._align + '"]').checked = true;
        if (contextVideo._resizing) {
          this.plugins.resizing._module_setModifyInputSize.call(this, contextVideo, this.plugins.video);
          var y = contextVideo._videoRatio = this.plugins.resizing._module_getSizeY.call(this, contextVideo);
          var ratioSelected = this.plugins.video.setVideoRatioSelect.call(this, y);
          if (!ratioSelected) {
            contextVideo.inputY.value = contextVideo._onlyPercentage ? this.util.getNumber(y, 2) : y;
          }
        }
        if (!notOpen) {
          this.plugins.dialog.open.call(this, "video", true);
        }
      },
      setVideoRatioSelect: function setVideoRatioSelect(value) {
        var ratioSelected = false;
        var contextVideo = this.context.video;
        var ratioOptions = contextVideo.videoRatioOption.options;
        if (/%$/.test(value) || contextVideo._onlyPercentage) {
          value = this.util.getNumber(value, 2) / 100 + "";
        } else if (!this.util.isNumber(value) || value * 1 >= 1) {
          value = "";
        }
        contextVideo.inputY.placeholder = "";
        for (var i = 0, len = ratioOptions.length; i < len; i++) {
          if (ratioOptions[i].value === value) {
            ratioSelected = ratioOptions[i].selected = true;
            contextVideo.inputY.placeholder = !value ? "" : value * 100 + "%";
          } else {
            ratioOptions[i].selected = false;
          }
        }
        return ratioSelected;
      },
      checkFileInfo: function checkFileInfo() {
        this.plugins.fileManager.checkInfo.call(this, "video", ["iframe", "video"], this.functions.onVideoUpload, this.plugins.video._update_videoCover.bind(this), true);
      },
      resetFileInfo: function resetFileInfo() {
        this.plugins.fileManager.resetInfo.call(this, "video", this.functions.onVideoUpload);
      },
      applySize: function applySize(w, h) {
        var contextVideo = this.context.video;
        if (!w) {
          w = contextVideo.inputX.value || this.options.videoWidth;
        }
        if (!h) {
          h = contextVideo.inputY.value || this.options.videoHeight;
        }
        if (contextVideo._onlyPercentage || /%$/.test(w) || !w) {
          this.plugins.video.setPercentSize.call(this, w || "100%", h || (/%$/.test(contextVideo._videoRatio) ? contextVideo._videoRatio : contextVideo._defaultRatio));
          return true;
        } else if ((!w || w === "auto") && (!h || h === "auto")) {
          this.plugins.video.setAutoSize.call(this);
        } else {
          this.plugins.video.setSize.call(this, w, h || contextVideo._videoRatio || contextVideo._defaultRatio, false);
        }
        return false;
      },
      sizeRevert: function sizeRevert() {
        this.plugins.resizing._module_sizeRevert.call(this, this.context.video);
      },
      setSize: function setSize(w, h, notResetPercentage, direction) {
        var contextVideo = this.context.video;
        var onlyW = /^(rw|lw)$/.test(direction);
        var onlyH = /^(th|bh)$/.test(direction);
        if (!onlyH) {
          w = this.util.getNumber(w, 0);
        }
        if (!onlyW) {
          h = this.util.isNumber(h) ? h + contextVideo.sizeUnit : !h ? "" : h;
        }
        if (!onlyH) {
          contextVideo._element.style.width = w ? w + contextVideo.sizeUnit : "";
        }
        if (!onlyW) {
          contextVideo._cover.style.paddingBottom = contextVideo._cover.style.height = h;
        }
        if (!onlyH && !/%$/.test(w)) {
          contextVideo._cover.style.width = "";
          contextVideo._container.style.width = "";
        }
        if (!onlyW && !/%$/.test(h)) {
          contextVideo._element.style.height = h;
        } else {
          contextVideo._element.style.height = "";
        }
        if (!notResetPercentage) {
          contextVideo._element.removeAttribute("data-percentage");
        }
        this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);
      },
      setAutoSize: function setAutoSize() {
        this.plugins.video.setPercentSize.call(this, 100, this.context.video._defaultRatio);
      },
      setOriginSize: function setOriginSize(dataSize) {
        var contextVideo = this.context.video;
        contextVideo._element.removeAttribute("data-percentage");
        this.plugins.resizing.resetTransform.call(this, contextVideo._element);
        this.plugins.video.cancelPercentAttr.call(this);
        var originSize = ((dataSize ? contextVideo._element.getAttribute("data-size") : "") || contextVideo._element.getAttribute("data-origin") || "").split(",");
        if (originSize) {
          var w = originSize[0];
          var h = originSize[1];
          if (contextVideo._onlyPercentage || /%$/.test(w) && (/%$/.test(h) || !/\d/.test(h))) {
            this.plugins.video.setPercentSize.call(this, w, h);
          } else {
            this.plugins.video.setSize.call(this, w, h);
          }
          this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);
        }
      },
      setPercentSize: function setPercentSize(w, h) {
        var contextVideo = this.context.video;
        h = !!h && !/%$/.test(h) && !this.util.getNumber(h, 0) ? this.util.isNumber(h) ? h + "%" : h : this.util.isNumber(h) ? h + contextVideo.sizeUnit : h || contextVideo._defaultRatio;
        contextVideo._container.style.width = this.util.isNumber(w) ? w + "%" : w;
        contextVideo._container.style.height = "";
        contextVideo._cover.style.width = "100%";
        contextVideo._cover.style.height = h;
        contextVideo._cover.style.paddingBottom = h;
        contextVideo._element.style.width = "100%";
        contextVideo._element.style.height = "100%";
        contextVideo._element.style.maxWidth = "";
        if (contextVideo._align === "center") {
          this.plugins.video.setAlign.call(this, null, null, null, null);
        }
        contextVideo._element.setAttribute("data-percentage", w + "," + h);
        this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);
      },
      cancelPercentAttr: function cancelPercentAttr() {
        var contextVideo = this.context.video;
        contextVideo._cover.style.width = "";
        contextVideo._cover.style.height = "";
        contextVideo._cover.style.paddingBottom = "";
        contextVideo._container.style.width = "";
        contextVideo._container.style.height = "";
        this.util.removeClass(contextVideo._container, this.context.video._floatClassRegExp);
        this.util.addClass(contextVideo._container, "__ke__float-" + contextVideo._align);
        if (contextVideo._align === "center") {
          this.plugins.video.setAlign.call(this, null, null, null, null);
        }
      },
      setAlign: function setAlign(align, element, cover, container) {
        var contextVideo = this.context.video;
        if (!align) {
          align = contextVideo._align;
        }
        if (!element) {
          element = contextVideo._element;
        }
        if (!cover) {
          cover = contextVideo._cover;
        }
        if (!container) {
          container = contextVideo._container;
        }
        if (align && align !== "none") {
          cover.style.margin = "auto";
        } else {
          cover.style.margin = "0";
        }
        if (/%$/.test(element.style.width) && align === "center") {
          container.style.minWidth = "100%";
          cover.style.width = container.style.width;
          cover.style.height = container.style.height;
          cover.style.paddingBottom = !/%$/.test(cover.style.height) ? cover.style.height : this.util.getNumber(this.util.getNumber(cover.style.height, 2) / 100 * this.util.getNumber(cover.style.width, 2), 2) + "%";
        } else {
          container.style.minWidth = "";
          cover.style.width = this.context.resizing._rotateVertical ? element.style.height || element.offsetHeight : element.style.width || "100%";
          cover.style.paddingBottom = cover.style.height;
        }
        if (!this.util.hasClass(container, "__ke__float-" + align)) {
          this.util.removeClass(container, contextVideo._floatClassRegExp);
          this.util.addClass(container, "__ke__float-" + align);
        }
        element.setAttribute("data-align", align);
      },
      init: function init() {
        var contextVideo = this.context.video;
        if (contextVideo.videoInputFile) {
          contextVideo.videoInputFile.value = "";
        }
        if (contextVideo.videoUrlFile) {
          contextVideo._linkValue = contextVideo.preview.textContent = contextVideo.videoUrlFile.value = "";
        }
        if (contextVideo.videoInputFile && contextVideo.videoUrlFile) {
          contextVideo.videoUrlFile.removeAttribute("disabled");
          contextVideo.preview.style.textDecoration = "";
        }
        contextVideo._origin_w = this.options.videoWidth;
        contextVideo._origin_h = this.options.videoHeight;
        contextVideo.modal.querySelector('input[name="kothingEditor_video_radio"][value="none"]').checked = true;
        if (contextVideo._resizing) {
          contextVideo.inputX.value = this.options.videoWidth === contextVideo._defaultSizeX ? "" : this.options.videoWidth;
          contextVideo.inputY.value = this.options.videoHeight === contextVideo._defaultSizeY ? "" : this.options.videoHeight;
          contextVideo.proportion.checked = true;
          contextVideo.proportion.disabled = true;
          this.plugins.video.setVideoRatioSelect.call(this, contextVideo._defaultRatio);
        }
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/dialog/audio.js
var require_audio = __commonJS({
  "node_modules/kothing-editor/lib/plugins/dialog/audio.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _dialog = _interopRequireDefault(require_dialog());
    var _component = _interopRequireDefault(require_component());
    var _fileManager = _interopRequireDefault(require_fileManager());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _default = {
      name: "audio",
      display: "dialog",
      add: function add(core) {
        core.addModule([_dialog.default, _component.default, _fileManager.default]);
        var context = core.context;
        var contextAudio = context.audio = {
          _infoList: [],
          _infoIndex: 0,
          _uploadFileLength: 0,
          focusElement: null,
          targetSelect: null,
          _origin_w: core.options.audioWidth,
          _origin_h: core.options.audioHeight,
          _linkValue: "",
          _element: null,
          _cover: null,
          _container: null
        };
        var audio_dialog = this.setDialog(core);
        contextAudio.modal = audio_dialog;
        contextAudio.audioInputFile = audio_dialog.querySelector("._ke_audio_files");
        contextAudio.audioUrlFile = audio_dialog.querySelector(".ke-input-url");
        contextAudio.focusElement = contextAudio.audioInputFile || contextAudio.audioUrlFile;
        contextAudio.preview = audio_dialog.querySelector(".ke-link-preview");
        var audio_controller = this.setController(core);
        contextAudio.controller = audio_controller;
        audio_dialog.querySelector("form").addEventListener("submit", this.submit.bind(core));
        if (contextAudio.audioInputFile) {
          audio_dialog.querySelector(".ke-dialog-files-edge-button").addEventListener("click", this._removeSelectedFiles.bind(contextAudio.audioInputFile, contextAudio.audioUrlFile, contextAudio.preview));
        }
        if (contextAudio.audioInputFile && contextAudio.audioUrlFile) {
          contextAudio.audioInputFile.addEventListener("change", this._fileInputChange.bind(contextAudio));
        }
        audio_controller.addEventListener("click", this.onClick_controller.bind(core));
        if (contextAudio.audioUrlFile) {
          contextAudio.audioUrlFile.addEventListener("input", this._onLinkPreview.bind(contextAudio.preview, contextAudio, core.options.linkProtocol));
        }
        context.dialog.modal.appendChild(audio_dialog);
        context.element.relative.appendChild(audio_controller);
        audio_dialog = null, audio_controller = null;
      },
      setDialog: function setDialog(core) {
        var option = core.options;
        var lang = core.lang;
        var dialog = core.util.createElement("DIV");
        dialog.className = "ke-dialog-content";
        dialog.style.display = "none";
        var html = '<form method="post" enctype="multipart/form-data"><div class="ke-dialog-header"><button type="button" data-command="close" class="ke-btn ke-dialog-close" aria-label="Close" title="' + lang.dialogBox.close + '">' + core.icons.cancel + '</button><span class="ke-modal-title">' + lang.dialogBox.audioBox.title + '</span></div><div class="ke-dialog-body">';
        if (option.audioFileInput) {
          html += '<div class="ke-dialog-form"><label>' + lang.dialogBox.audioBox.file + '</label><div class="ke-dialog-form-files"><input class="ke-input-form _ke_audio_files" type="file" accept="' + option.audioAccept + '"' + (option.audioMultipleFile ? ' multiple="multiple"' : "") + '/><button type="button" data-command="filesRemove" class="ke-btn ke-dialog-files-edge-button ke-file-remove" title="' + lang.controller.remove + '">' + core.icons.cancel + "</button></div></div>";
        }
        if (option.audioUrlInput) {
          html += '<div class="ke-dialog-form"><label>' + lang.dialogBox.audioBox.url + '</label><input class="ke-input-form ke-input-url" type="text" /><pre class="ke-link-preview"></pre></div>';
        }
        html += '</div><div class="ke-dialog-footer"><button type="submit" class="ke-btn-primary" title="' + lang.dialogBox.submitButton + '"><span>' + lang.dialogBox.submitButton + "</span></button></div></form>";
        dialog.innerHTML = html;
        return dialog;
      },
      setController: function setController(core) {
        var lang = core.lang;
        var icons = core.icons;
        var link_btn = core.util.createElement("DIV");
        link_btn.className = "ke-controller ke-controller-link";
        link_btn.innerHTML = '<div class="ke-arrow ke-arrow-up"></div><div class="link-content"><div class="ke-btn-group"><button type="button" data-command="update" tabindex="-1" class="ke-tooltip">' + icons.edit + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.edit + '</span></span></button><button type="button" data-command="delete" tabindex="-1" class="ke-tooltip">' + icons.delete + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.remove + "</span></span></button></div></div>";
        return link_btn;
      },
      _fileInputChange: function _fileInputChange() {
        if (!this.audioInputFile.value) {
          this.audioUrlFile.removeAttribute("disabled");
          this.preview.style.textDecoration = "";
        } else {
          this.audioUrlFile.setAttribute("disabled", true);
          this.preview.style.textDecoration = "line-through";
        }
      },
      _removeSelectedFiles: function _removeSelectedFiles(urlInput, preview) {
        this.value = "";
        if (urlInput) {
          urlInput.removeAttribute("disabled");
          preview.style.textDecoration = "";
        }
      },
      _createAudioTag: function _createAudioTag() {
        var oAudio = this.util.createElement("AUDIO");
        this.plugins.audio._setTagAttrs.call(this, oAudio);
        var w = this.context.audio._origin_w;
        var h = this.context.audio._origin_h;
        oAudio.setAttribute("origin-size", w + "," + h);
        oAudio.style.cssText = (w ? "width:" + w + "; " : "") + (h ? "height:" + h + ";" : "");
        return oAudio;
      },
      _setTagAttrs: function _setTagAttrs(element) {
        element.setAttribute("controls", true);
        var attrs = this.options.audioTagAttrs;
        if (!attrs) {
          return;
        }
        for (var key in attrs) {
          if (!this.util.hasOwn(attrs, key)) {
            continue;
          }
          element.setAttribute(key, attrs[key]);
        }
      },
      _onLinkPreview: function _onLinkPreview(context, protocol, e) {
        var value = e.target.value.trim();
        context._linkValue = this.textContent = !value ? "" : protocol && value.indexOf("://") === -1 && value.indexOf("#") !== 0 ? protocol + value : value.indexOf("://") === -1 ? "/" + value : value;
      },
      fileTags: ["audio"],
      select: function select(element) {
        this.plugins.audio.onModifyMode.call(this, element);
      },
      destroy: function destroy(element) {
        element = element || this.context.audio._element;
        var container = this.util.getParentElement(element, this.util.isComponent) || element;
        var dataIndex = element.getAttribute("data-index") * 1;
        var focusEl = container.previousElementSibling || container.nextElementSibling;
        var emptyDiv = container.parentNode;
        this.util.removeItem(container);
        this.plugins.audio.init.call(this);
        this.controllersOff();
        if (emptyDiv !== this.context.element.wysiwyg) {
          this.util.removeItemAllParents(emptyDiv, function(current) {
            return current.childNodes.length === 0;
          }, null);
        }
        this.focusEdge(focusEl);
        this.plugins.fileManager.deleteInfo.call(this, "audio", dataIndex, this.functions.onAudioUpload);
        this.history.push(false);
      },
      checkFileInfo: function checkFileInfo() {
        this.plugins.fileManager.checkInfo.call(this, "audio", ["audio"], this.functions.onAudioUpload, this.plugins.audio.updateCover.bind(this), false);
      },
      resetFileInfo: function resetFileInfo() {
        this.plugins.fileManager.resetInfo.call(this, "audio", this.functions.onAudioUpload);
      },
      on: function on(update) {
        var contextAudio = this.context.audio;
        if (!update) {
          this.plugins.audio.init.call(this);
          if (contextAudio.audioInputFile && this.options.audioMultipleFile) {
            contextAudio.audioInputFile.setAttribute("multiple", "multiple");
          }
        } else if (contextAudio._element) {
          this.context.dialog.updateModal = true;
          contextAudio._linkValue = contextAudio.preview.textContent = contextAudio.audioUrlFile.value = contextAudio._element.src;
          if (contextAudio.audioInputFile && this.options.audioMultipleFile) {
            contextAudio.audioInputFile.removeAttribute("multiple");
          }
        } else {
          if (contextAudio.audioInputFile && this.options.audioMultipleFile) {
            contextAudio.audioInputFile.removeAttribute("multiple");
          }
        }
      },
      open: function open() {
        this.plugins.dialog.open.call(this, "audio", this.currentControllerName === "audio");
      },
      submit: function submit(e) {
        var contextAudio = this.context.audio;
        e.preventDefault();
        e.stopPropagation();
        try {
          if (contextAudio.audioInputFile && contextAudio.audioInputFile.files.length > 0) {
            this.showLoading();
            this.plugins.audio.submitAction.call(this, contextAudio.audioInputFile.files);
          } else if (contextAudio.audioUrlFile && contextAudio._linkValue.length > 0) {
            this.showLoading();
            this.plugins.audio.setupUrl.call(this, contextAudio._linkValue);
          }
        } catch (error) {
          this.closeLoading();
          throw Error('[KothingEditor.audio.submit.fail] cause : "' + error.message + '"');
        } finally {
          this.plugins.dialog.close.call(this);
        }
        return false;
      },
      submitAction: function submitAction(fileList) {
        if (fileList.length === 0) {
          return;
        }
        var fileSize = 0;
        var files = [];
        for (var i = 0, len = fileList.length; i < len; i++) {
          if (/audio/i.test(fileList[i].type)) {
            files.push(fileList[i]);
            fileSize += fileList[i].size;
          }
        }
        var limitSize = this.options.audioUploadSizeLimit;
        if (limitSize > 0) {
          var infoSize = 0;
          var audiosInfo = this.context.audio._infoList;
          for (var _i = 0, _len = audiosInfo.length; _i < _len; _i++) {
            infoSize += audiosInfo[_i].size * 1;
          }
          if (fileSize + infoSize > limitSize) {
            this.closeLoading();
            var err = "[KothingEditor.audioUpload.fail] Size of uploadable total audios: " + limitSize / 1e3 + "KB";
            if (typeof this.functions.onAudioUploadError !== "function" || this.functions.onAudioUploadError(err, {
              limitSize,
              currentSize: infoSize,
              uploadSize: fileSize
            }, this)) {
              this.functions.noticeOpen(err);
            }
            return;
          }
        }
        var contextAudio = this.context.audio;
        contextAudio._uploadFileLength = files.length;
        var info = {
          isUpdate: this.context.dialog.updateModal,
          element: contextAudio._element
        };
        if (typeof this.functions.onAudioUploadBefore === "function") {
          var result = this.functions.onAudioUploadBefore(files, info, this, function(data) {
            if (data && this._w.Array.isArray(data.result)) {
              this.plugins.audio.register.call(this, info, data);
            } else {
              this.plugins.audio.upload.call(this, info, data);
            }
          }.bind(this));
          if (typeof result === "undefined") {
            return;
          }
          if (!result) {
            this.closeLoading();
            return;
          }
          if (_typeof(result) === "object" && result.length > 0) {
            files = result;
          }
        }
        this.plugins.audio.upload.call(this, info, files);
      },
      error: function error(message, response) {
        this.closeLoading();
        if (typeof this.functions.onAudioUploadError !== "function" || this.functions.onAudioUploadError(message, response, this)) {
          this.functions.noticeOpen(message);
          throw Error("[KothingEditor.plugin.audio.exception] response: " + message);
        }
      },
      upload: function upload(info, files) {
        if (!files) {
          this.closeLoading();
          return;
        }
        if (typeof files === "string") {
          this.plugins.audio.error.call(this, files, null);
          return;
        }
        var audioUploadUrl = this.options.audioUploadUrl;
        var filesLen = this.context.dialog.updateModal ? 1 : files.length;
        var formData = new FormData();
        for (var i = 0; i < filesLen; i++) {
          formData.append("file-" + i, files[i]);
        }
        this.plugins.fileManager.upload.call(this, audioUploadUrl, this.options.audioUploadHeader, formData, this.plugins.audio.callBack_upload.bind(this, info), this.functions.onAudioUploadError);
      },
      callBack_upload: function callBack_upload(info, xmlHttp) {
        if (typeof this.functions.audioUploadHandler === "function") {
          this.functions.audioUploadHandler(xmlHttp, info, this);
        } else {
          var response = JSON.parse(xmlHttp.responseText);
          if (response.errorMessage) {
            this.plugins.audio.error.call(this, response.errorMessage, response);
          } else {
            this.plugins.audio.register.call(this, info, response);
          }
        }
      },
      register: function register(info, response) {
        var fileList = response.result;
        for (var i = 0, len = fileList.length, file, oAudio; i < len; i++) {
          if (info.isUpdate) {
            oAudio = info.element;
          } else {
            oAudio = this.plugins.audio._createAudioTag.call(this);
          }
          file = {
            name: fileList[i].name,
            size: fileList[i].size
          };
          this.plugins.audio.create_audio.call(this, oAudio, fileList[i].url, file, info.isUpdate);
        }
        this.closeLoading();
      },
      setupUrl: function setupUrl(src) {
        try {
          if (src.length === 0) {
            return false;
          }
          this.plugins.audio.create_audio.call(this, this.plugins.audio._createAudioTag.call(this), src, null, this.context.dialog.updateModal);
        } catch (error) {
          throw Error('[KothingEditor.audio.audio.fail] cause : "' + error.message + '"');
        } finally {
          this.closeLoading();
        }
      },
      create_audio: function create_audio(element, src, file, isUpdate) {
        var contextAudio = this.context.audio;
        if (!isUpdate) {
          element.src = src;
          var cover = this.plugins.component.set_cover.call(this, element);
          var container = this.plugins.component.set_container.call(this, cover, "");
          if (!this.insertComponent(container, false, true, !this.options.mediaAutoSelect)) {
            this.focus();
            return;
          }
          if (!this.options.mediaAutoSelect) {
            var line = this.appendFormatTag(container, null);
            this.setRange(line, 0, line, 0);
          }
        } else {
          if (contextAudio._element) {
            element = contextAudio._element;
          }
          if (element && element.src !== src) {
            element.src = src;
            this.selectComponent(element, "audio");
          } else {
            this.selectComponent(element, "audio");
            return;
          }
        }
        this.plugins.fileManager.setInfo.call(this, "audio", element, this.functions.onAudioUpload, file, false);
        if (isUpdate) {
          this.history.push(false);
        }
      },
      updateCover: function updateCover(element) {
        var contextAudio = this.context.audio;
        this.plugins.audio._setTagAttrs.call(this, element);
        var existElement = this.util.getParentElement(element, this.util.isMediaComponent) || this.util.getParentElement(element, function(current) {
          return this.isWysiwygDiv(current.parentNode);
        }.bind(this.util));
        var prevElement = element;
        contextAudio._element = element = element.cloneNode(false);
        var cover = this.plugins.component.set_cover.call(this, element);
        var container = this.plugins.component.set_container.call(this, cover, "ke-audio-container");
        try {
          if (this.util.isFormatElement(existElement) && existElement.childNodes.length > 0) {
            existElement.parentNode.insertBefore(container, existElement);
            this.util.removeItem(prevElement);
            this.util.removeEmptyNode(existElement, null);
            if (existElement.children.length === 0) {
              existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);
            }
          } else {
            existElement.parentNode.replaceChild(container, existElement);
          }
        } catch (error) {
          console.warn("[KothingEditor.audio.error] Maybe the audio tag is nested.", error);
        }
        this.plugins.fileManager.setInfo.call(this, "audio", element, this.functions.onAudioUpload, null, false);
      },
      onModifyMode: function onModifyMode(selectionTag) {
        var contextAudio = this.context.audio;
        this.setControllerPosition(contextAudio.controller, selectionTag, "bottom", {
          left: 0,
          top: 0
        });
        this.controllersOn(contextAudio.controller, selectionTag, this.plugins.audio.onControllerOff.bind(this, selectionTag), "audio");
        this.util.addClass(selectionTag, "active");
        contextAudio._element = selectionTag;
        contextAudio._cover = this.util.getParentElement(selectionTag, "FIGURE");
        contextAudio._container = this.util.getParentElement(selectionTag, this.util.isComponent);
      },
      openModify: function openModify(notOpen) {
        if (this.context.audio.audioUrlFile) {
          var contextAudio = this.context.audio;
          contextAudio._linkValue = contextAudio.preview.textContent = contextAudio.audioUrlFile.value = contextAudio._element.src;
        }
        if (!notOpen) {
          this.plugins.dialog.open.call(this, "audio", true);
        }
      },
      onClick_controller: function onClick_controller(e) {
        e.stopPropagation();
        var command = e.target.getAttribute("data-command");
        if (!command) {
          return;
        }
        e.preventDefault();
        if (/update/.test(command)) {
          this.plugins.audio.openModify.call(this, false);
        } else {
          this.plugins.audio.destroy.call(this, this.context.audio._element);
        }
        this.controllersOff();
      },
      onControllerOff: function onControllerOff(selectionTag) {
        this.util.removeClass(selectionTag, "active");
        this.context.audio.controller.style.display = "none";
      },
      init: function init() {
        if (this.context.dialog.updateModal) {
          return;
        }
        var contextAudio = this.context.audio;
        if (contextAudio.audioInputFile) {
          contextAudio.audioInputFile.value = "";
        }
        if (contextAudio.audioUrlFile) {
          contextAudio._linkValue = contextAudio.preview.textContent = contextAudio.audioUrlFile.value = "";
        }
        if (contextAudio.audioInputFile && contextAudio.audioUrlFile) {
          contextAudio.audioUrlFile.removeAttribute("disabled");
          contextAudio.preview.style.textDecoration = "";
        }
        contextAudio._element = null;
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/dialog/math.js
var require_math = __commonJS({
  "node_modules/kothing-editor/lib/plugins/dialog/math.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _dialog = _interopRequireDefault(require_dialog());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      name: "math",
      display: "dialog",
      add: function add(core) {
        core.addModule([_dialog.default]);
        var context = core.context;
        context.math = {
          focusElement: null,
          previewElement: null,
          fontSizeElement: null,
          defaultFontSize: "",
          _mathExp: null
        };
        var math_dialog = this.setDialog(core);
        context.math.modal = math_dialog;
        context.math.focusElement = math_dialog.querySelector(".ke-math-exp");
        context.math.previewElement = math_dialog.querySelector(".ke-math-preview");
        context.math.fontSizeElement = math_dialog.querySelector(".ke-math-size");
        context.math.focusElement.addEventListener("keyup", this._renderMathExp.bind(core, context.math), false);
        context.math.focusElement.addEventListener("change", this._renderMathExp.bind(core, context.math), false);
        context.math.fontSizeElement.addEventListener("change", function(e) {
          this.fontSize = e.target.value;
        }.bind(context.math.previewElement.style), false);
        var math_controller = this.setController_MathButton(core);
        context.math.mathController = math_controller;
        context.math._mathExp = null;
        math_dialog.querySelector("form").addEventListener("submit", this.submit.bind(core), false);
        math_controller.addEventListener("click", this.onClick_mathController.bind(core));
        context.math.previewElement.style.fontSize = context.math.defaultFontSize;
        context.dialog.modal.appendChild(math_dialog);
        context.element.relative.appendChild(math_controller);
        math_dialog = null, math_controller = null;
      },
      setDialog: function setDialog(core) {
        var lang = core.lang;
        var dialog = core.util.createElement("DIV");
        var fontSize = core.options.mathFontSize;
        var defaultFontSize = fontSize[0].value;
        dialog.className = "ke-dialog-content";
        dialog.style.display = "none";
        var html = '<form><div class="ke-dialog-header"><button type="button" data-command="close" class="ke-btn ke-dialog-close" aria-label="Close" title="' + lang.dialogBox.close + '">' + core.icons.cancel + '</button><span class="ke-modal-title">' + lang.dialogBox.mathBox.title + '</span></div><div class="ke-dialog-body"><div class="ke-dialog-form"><label>' + lang.dialogBox.mathBox.inputLabel + ' (<a href="https://katex.org/docs/supported.html" target="_blank">KaTeX</a>)</label><textarea class="ke-input-form ke-math-exp" type="text"></textarea></div><div class="ke-dialog-form"><label>' + lang.dialogBox.mathBox.fontSizeLabel + '</label><select class="ke-input-select ke-math-size">';
        for (var i = 0, len = fontSize.length, f; i < len; i++) {
          f = fontSize[i];
          if (f.default) {
            defaultFontSize = f.value;
          }
          html += '<option value="' + f.value + '"' + (f.default ? " selected" : "") + ">" + f.text + "</option>";
        }
        html += '</select></div><div class="ke-dialog-form"><label>' + lang.dialogBox.mathBox.previewLabel + '</label><p class="ke-math-preview"></p></div></div><div class="ke-dialog-footer"><button type="submit" class="ke-btn-primary" title="' + lang.dialogBox.submitButton + '"><span>' + lang.dialogBox.submitButton + "</span></button></div></form>";
        core.context.math.defaultFontSize = defaultFontSize;
        dialog.innerHTML = html;
        return dialog;
      },
      setController_MathButton: function setController_MathButton(core) {
        var lang = core.lang;
        var math_btn = core.util.createElement("DIV");
        math_btn.className = "ke-controller ke-controller-link";
        math_btn.innerHTML = '<div class="ke-arrow ke-arrow-up"></div><div class="link-content"><div class="ke-btn-group"><button type="button" data-command="update" tabindex="-1" class="ke-btn ke-tooltip">' + core.icons.edit + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.edit + '</span></span></button><button type="button" data-command="delete" tabindex="-1" class="ke-btn ke-tooltip">' + core.icons.delete + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.remove + "</span></span></button></div></div>";
        return math_btn;
      },
      open: function open() {
        this.plugins.dialog.open.call(this, "math", this.currentControllerName === "math");
      },
      managedTags: function managedTags() {
        return {
          className: "katex",
          method: function method(element) {
            if (!element.getAttribute("data-exp") || !this.options.katex) {
              return;
            }
            var dom = this._d.createRange().createContextualFragment(this.plugins.math._renderer.call(this, this.util.HTMLDecoder(element.getAttribute("data-exp"))));
            element.innerHTML = dom.querySelector(".katex").innerHTML;
          }
        };
      },
      _renderer: function _renderer(exp) {
        var katex = this.options.katex;
        return katex.src.renderToString(exp, katex.options);
      },
      _renderMathExp: function _renderMathExp(contextMath, e) {
        contextMath.previewElement.innerHTML = this.plugins.math._renderer.call(this, e.target.value);
      },
      submit: function submit(e) {
        this.showLoading();
        e.preventDefault();
        e.stopPropagation();
        var submitAction = function() {
          if (this.context.math.focusElement.value.trim().length === 0) {
            return false;
          }
          var contextMath = this.context.math;
          var mathExp = contextMath.focusElement.value;
          var katexEl = contextMath.previewElement.querySelector(".katex");
          if (!katexEl) {
            return false;
          }
          katexEl.className = "__ke__katex " + katexEl.className;
          katexEl.setAttribute("contenteditable", false);
          katexEl.setAttribute("data-exp", this.util.HTMLEncoder(mathExp));
          katexEl.setAttribute("data-font-size", contextMath.fontSizeElement.value);
          katexEl.style.fontSize = contextMath.fontSizeElement.value;
          if (!this.context.dialog.updateModal) {
            var selectedFormats = this.getSelectedElements();
            if (selectedFormats.length > 1) {
              var oFormat = this.util.createElement(selectedFormats[0].nodeName);
              oFormat.appendChild(katexEl);
              if (!this.insertNode(oFormat, null, true)) {
                return false;
              }
            } else {
              if (!this.insertNode(katexEl, null, true)) {
                return false;
              }
            }
            var empty = this.util.createTextNode(this.util.zeroWidthSpace);
            katexEl.parentNode.insertBefore(empty, katexEl.nextSibling);
            this.setRange(katexEl, 0, katexEl, 1);
          } else {
            var containerEl = this.util.getParentElement(contextMath._mathExp, ".katex");
            containerEl.parentNode.replaceChild(katexEl, containerEl);
            this.setRange(katexEl, 0, katexEl, 1);
          }
          contextMath.focusElement.value = "";
          contextMath.fontSizeElement.value = "1em";
          contextMath.previewElement.style.fontSize = "1em";
          contextMath.previewElement.innerHTML = "";
          return true;
        }.bind(this);
        try {
          if (submitAction()) {
            this.plugins.dialog.close.call(this);
            this.history.push(false);
          }
        } catch (e2) {
          this.plugins.dialog.close.call(this);
        } finally {
          this.closeLoading();
        }
        return false;
      },
      active: function active(element) {
        if (!element) {
          if (this.controllerArray.indexOf(this.context.math.mathController) > -1) {
            this.controllersOff();
          }
        } else if (element.getAttribute("data-exp")) {
          if (this.controllerArray.indexOf(this.context.math.mathController) < 0) {
            this.setRange(element, 0, element, 1);
            this.plugins.math.call_controller.call(this, element);
          }
          return true;
        }
        return false;
      },
      on: function on(update) {
        if (!update) {
          this.plugins.math.init.call(this);
        } else {
          var contextMath = this.context.math;
          if (contextMath._mathExp) {
            var exp = this.util.HTMLDecoder(contextMath._mathExp.getAttribute("data-exp"));
            var fontSize = contextMath._mathExp.getAttribute("data-font-size") || "1em";
            this.context.dialog.updateModal = true;
            contextMath.focusElement.value = exp;
            contextMath.fontSizeElement.value = fontSize;
            contextMath.previewElement.innerHTML = this.plugins.math._renderer.call(this, exp);
            contextMath.previewElement.style.fontSize = fontSize;
          }
        }
      },
      call_controller: function call_controller(mathTag) {
        this.context.math._mathExp = mathTag;
        var mathBtn = this.context.math.mathController;
        this.setControllerPosition(mathBtn, mathTag, "bottom", {
          left: 0,
          top: 0
        });
        this.controllersOn(mathBtn, mathTag, "math");
      },
      onClick_mathController: function onClick_mathController(e) {
        e.stopPropagation();
        var command = e.target.getAttribute("data-command") || e.target.parentNode.getAttribute("data-command");
        if (!command) {
          return;
        }
        e.preventDefault();
        if (/update/.test(command)) {
          this.context.math.focusElement.value = this.util.HTMLDecoder(this.context.math._mathExp.getAttribute("data-exp"));
          this.plugins.dialog.open.call(this, "math", true);
        } else {
          this.util.removeItem(this.context.math._mathExp);
          this.context.math._mathExp = null;
          this.focus();
          this.history.push(false);
        }
        this.controllersOff();
      },
      init: function init() {
        var contextMath = this.context.math;
        contextMath.mathController.style.display = "none";
        contextMath._mathExp = null;
        contextMath.focusElement.value = "";
        contextMath.previewElement.innerHTML = "";
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/modules/fileBrowser.js
var require_fileBrowser = __commonJS({
  "node_modules/kothing-editor/lib/plugins/modules/fileBrowser.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    (function(global, factory) {
      if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("KothingEditor_MODULES a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    })(typeof window !== "undefined" ? window : void 0, function(window2, noGlobal) {
      var fileBrowser = {
        name: "fileBrowser",
        _xmlHttp: null,
        loading: null,
        add: function add(core) {
          var context = core.context;
          context.fileBrowser = {
            _closeSignal: false,
            area: null,
            header: null,
            tagArea: null,
            body: null,
            list: null,
            tagElements: null,
            items: [],
            selectedTags: [],
            selectorHandler: null,
            contextPlugin: "",
            columnSize: 4
          };
          var browser_div = core.util.createElement("DIV");
          browser_div.className = "ke-file-browser kothing-editor-common";
          var back = core.util.createElement("DIV");
          back.className = "ke-file-browser-back";
          var content = core.util.createElement("DIV");
          content.className = "ke-file-browser-inner";
          content.innerHTML = this.set_browser(core);
          browser_div.appendChild(back);
          browser_div.appendChild(content);
          this.loading = browser_div.querySelector(".ke-loading-box");
          context.fileBrowser.area = browser_div;
          context.fileBrowser.header = content.querySelector(".ke-file-browser-header");
          context.fileBrowser.titleArea = content.querySelector(".ke-file-browser-title");
          context.fileBrowser.tagArea = content.querySelector(".ke-file-browser-tags");
          context.fileBrowser.body = content.querySelector(".ke-file-browser-body");
          context.fileBrowser.list = content.querySelector(".ke-file-browser-list");
          context.fileBrowser.tagArea.addEventListener("click", this.onClickTag.bind(core));
          context.fileBrowser.list.addEventListener("click", this.onClickFile.bind(core));
          content.addEventListener("mousedown", this._onMouseDown_browser.bind(core));
          content.addEventListener("click", this._onClick_browser.bind(core));
          context.element.relative.appendChild(browser_div);
          browser_div = null, back = null, content = null;
        },
        set_browser: function set_browser(core) {
          var lang = core.lang;
          return '<div class="ke-file-browser-content"><div class="ke-file-browser-header"><button type="button" data-command="close" class="ke-btn ke-file-browser-close" class="close" aria-label="Close" title="' + lang.dialogBox.close + '">' + core.icons.cancel + '</button><span class="ke-file-browser-title"></span><div class="ke-file-browser-tags"></div></div><div class="ke-file-browser-body"><div class="ke-loading-box kothing-editor-common"><div class="ke-loading-effect"></div></div><div class="ke-file-browser-list"></div></div></div>';
        },
        _onMouseDown_browser: function _onMouseDown_browser(e) {
          if (/ke-file-browser-inner/.test(e.target.className)) {
            this.context.fileBrowser._closeSignal = true;
          } else {
            this.context.fileBrowser._closeSignal = false;
          }
        },
        _onClick_browser: function _onClick_browser(e) {
          e.stopPropagation();
          if (/close/.test(e.target.getAttribute("data-command")) || this.context.fileBrowser._closeSignal) {
            this.plugins.fileBrowser.close.call(this);
          }
        },
        open: function open(pluginName, selectorHandler) {
          if (this.plugins.fileBrowser._bindClose) {
            this._d.removeEventListener("keydown", this.plugins.fileBrowser._bindClose);
            this.plugins.fileBrowser._bindClose = null;
          }
          this.plugins.fileBrowser._bindClose = function(e) {
            if (!/27/.test(e.keyCode)) {
              return;
            }
            this.plugins.fileBrowser.close.call(this);
          }.bind(this);
          this._d.addEventListener("keydown", this.plugins.fileBrowser._bindClose);
          var fileBrowserContext = this.context.fileBrowser;
          fileBrowserContext.contextPlugin = pluginName;
          fileBrowserContext.selectorHandler = selectorHandler;
          var pluginContext = this.context[pluginName];
          var listClassName = pluginContext.listClass;
          if (!this.util.hasClass(fileBrowserContext.list, listClassName)) {
            fileBrowserContext.list.className = "ke-file-browser-list " + listClassName;
          }
          if (this.options.popupDisplay === "full") {
            fileBrowserContext.area.style.position = "fixed";
          } else {
            fileBrowserContext.area.style.position = "absolute";
          }
          fileBrowserContext.titleArea.textContent = pluginContext.title;
          fileBrowserContext.area.style.display = "block";
          this.plugins.fileBrowser._drawFileList.call(this, this.context[pluginName].url, this.context[pluginName].header);
        },
        _bindClose: null,
        close: function close() {
          var fileBrowserPlugin = this.plugins.fileBrowser;
          if (fileBrowserPlugin._xmlHttp) {
            fileBrowserPlugin._xmlHttp.abort();
          }
          if (fileBrowserPlugin._bindClose) {
            this._d.removeEventListener("keydown", fileBrowserPlugin._bindClose);
            fileBrowserPlugin._bindClose = null;
          }
          var fileBrowserContext = this.context.fileBrowser;
          fileBrowserContext.area.style.display = "none";
          fileBrowserContext.selectorHandler = null;
          fileBrowserContext.selectedTags = [];
          fileBrowserContext.items = [];
          fileBrowserContext.list.innerHTML = fileBrowserContext.tagArea.innerHTML = fileBrowserContext.titleArea.textContent = "";
          if (typeof this.plugins[fileBrowserContext.contextPlugin].init === "function") {
            this.plugins[fileBrowserContext.contextPlugin].init.call(this);
          }
          fileBrowserContext.contextPlugin = "";
        },
        showBrowserLoading: function showBrowserLoading() {
          this.loading.style.display = "block";
        },
        closeBrowserLoading: function closeBrowserLoading() {
          this.loading.style.display = "none";
        },
        _drawFileList: function _drawFileList(url, browserHeader) {
          var fileBrowserPlugin = this.plugins.fileBrowser;
          var xmlHttp = fileBrowserPlugin._xmlHttp = this.util.getXMLHttpRequest();
          xmlHttp.onreadystatechange = fileBrowserPlugin._callBackGet.bind(this, xmlHttp);
          xmlHttp.open("get", url, true);
          if (browserHeader !== null && _typeof(browserHeader) === "object" && this._w.Object.keys(browserHeader).length > 0) {
            for (var key in browserHeader) {
              xmlHttp.setRequestHeader(key, browserHeader[key]);
            }
          }
          xmlHttp.send(null);
          this.plugins.fileBrowser.showBrowserLoading();
        },
        _callBackGet: function _callBackGet(xmlHttp) {
          if (xmlHttp.readyState === 4) {
            this.plugins.fileBrowser._xmlHttp = null;
            if (xmlHttp.status === 200) {
              try {
                this.plugins.fileBrowser._drawListItem.call(this, JSON.parse(xmlHttp.responseText).result, true);
              } catch (e) {
                throw Error('[KothingEditor.fileBrowser.drawList.fail] cause : "' + e.message + '"');
              } finally {
                this.plugins.fileBrowser.closeBrowserLoading();
                this.context.fileBrowser.body.style.maxHeight = this._w.innerHeight - this.context.fileBrowser.header.offsetHeight - 50 + "px";
              }
            } else {
              this.plugins.fileBrowser.closeBrowserLoading();
              if (xmlHttp.status !== 0) {
                var res = !xmlHttp.responseText ? xmlHttp : JSON.parse(xmlHttp.responseText);
                var err = "[KothingEditor.fileBrowser.get.serverException] status: " + xmlHttp.status + ", response: " + (res.errorMessage || xmlHttp.responseText);
                throw Error(err);
              }
            }
          }
        },
        _drawListItem: function _drawListItem(items, update) {
          var fileBrowserContext = this.context.fileBrowser;
          var pluginContext = this.context[fileBrowserContext.contextPlugin];
          var _tags = [];
          var len = items.length;
          var columnSize = pluginContext.columnSize || fileBrowserContext.columnSize;
          var splitSize = columnSize <= 1 ? 1 : Math.round(len / columnSize) || 1;
          var drawItemHandler = pluginContext.itemTemplateHandler;
          var tagsHTML = "";
          var listHTML = '<div class="ke-file-item-column">';
          var columns = 1;
          for (var i = 0, item, tags; i < len; i++) {
            item = items[i];
            tags = !item.tag ? [] : typeof item.tag === "string" ? item.tag.split(",") : item.tag;
            tags = item.tag = tags.map(function(v) {
              return v.trim();
            });
            listHTML += drawItemHandler(item);
            if ((i + 1) % splitSize === 0 && columns < columnSize && i + 1 < len) {
              columns++;
              listHTML += '</div><div class="ke-file-item-column">';
            }
            if (update && tags.length > 0) {
              for (var t = 0, tLen = tags.length, tag; t < tLen; t++) {
                tag = tags[t];
                if (tag && _tags.indexOf(tag) === -1) {
                  _tags.push(tag);
                  tagsHTML += '<a title="' + tag + '">' + tag + "</a>";
                }
              }
            }
          }
          listHTML += "</div>";
          fileBrowserContext.list.innerHTML = listHTML;
          if (update) {
            fileBrowserContext.items = items;
            fileBrowserContext.tagArea.innerHTML = tagsHTML;
            fileBrowserContext.tagElements = fileBrowserContext.tagArea.querySelectorAll("A");
          }
        },
        onClickTag: function onClickTag(e) {
          var target = e.target;
          if (!this.util.isAnchor(target)) {
            return;
          }
          var tagName = target.textContent;
          var fileBrowserPlugin = this.plugins.fileBrowser;
          var fileBrowserContext = this.context.fileBrowser;
          var selectTag = fileBrowserContext.tagArea.querySelector('a[title="' + tagName + '"]');
          var selectedTags = fileBrowserContext.selectedTags;
          var sTagIndex = selectedTags.indexOf(tagName);
          if (sTagIndex > -1) {
            selectedTags.splice(sTagIndex, 1);
            this.util.removeClass(selectTag, "on");
          } else {
            selectedTags.push(tagName);
            this.util.addClass(selectTag, "on");
          }
          fileBrowserPlugin._drawListItem.call(this, selectedTags.length === 0 ? fileBrowserContext.items : fileBrowserContext.items.filter(function(item) {
            return item.tag.some(function(tag) {
              return selectedTags.indexOf(tag) > -1;
            });
          }), false);
        },
        onClickFile: function onClickFile(e) {
          e.preventDefault();
          e.stopPropagation();
          var fileBrowserContext = this.context.fileBrowser;
          var listEl = fileBrowserContext.list;
          var target = e.target;
          var command = null;
          if (target === listEl) {
            return;
          }
          while (listEl !== target.parentNode) {
            command = target.getAttribute("data-command");
            if (command) {
              break;
            }
            target = target.parentNode;
          }
          if (!command) {
            return;
          }
          var handler = fileBrowserContext.selectorHandler || this.context[fileBrowserContext.contextPlugin].selectorHandler;
          this.plugins.fileBrowser.close.call(this);
          handler(target);
        }
      };
      if (_typeof(noGlobal) === (true ? "undefined" : _typeof(void 0))) {
        if (!window2.KothingEditor_MODULES) {
          Object.defineProperty(window2, "KothingEditor_MODULES", {
            enumerable: true,
            writable: false,
            configurable: false,
            value: {}
          });
        }
        Object.defineProperty(window2.KothingEditor_MODULES, "fileBrowser", {
          enumerable: true,
          writable: false,
          configurable: false,
          value: fileBrowser
        });
      }
      return fileBrowser;
    });
  }
});

// node_modules/kothing-editor/lib/plugins/fileBrowser/imageGallery.js
var require_imageGallery = __commonJS({
  "node_modules/kothing-editor/lib/plugins/fileBrowser/imageGallery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _fileBrowser = _interopRequireDefault(require_fileBrowser());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      name: "imageGallery",
      add: function add(core) {
        core.addModule([_fileBrowser.default]);
        var context = core.context;
        context.imageGallery = {
          title: core.lang.toolbar.imageGallery,
          url: core.options.imageGalleryUrl,
          header: core.options.imageGalleryHeader,
          listClass: "ke-image-list",
          itemTemplateHandler: this.drawItems,
          selectorHandler: this.setImage.bind(core),
          columnSize: 4
        };
      },
      open: function open(selectorHandler) {
        this.plugins.fileBrowser.open.call(this, "imageGallery", selectorHandler);
      },
      drawItems: function drawItems(item) {
        var srcName = item.src.split("/").pop();
        return '<div class="ke-file-item-img"><img src="' + item.src + '" alt="' + (item.alt || srcName) + '" data-command="pick"><div class="ke-file-img-name ke-file-name-back"></div><div class="ke-file-img-name __ke__img_name">' + (item.name || srcName) + "</div></div>";
      },
      setImage: function setImage(target) {
        this.callPlugin("image", function() {
          var file = {
            name: target.parentNode.querySelector(".__ke__img_name").textContent,
            size: 0
          };
          this.context.image._altText = target.alt;
          this.plugins.image.create_image.call(this, target.src, null, this.context.image._origin_w, this.context.image._origin_h, "none", file);
        }.bind(this), null);
      }
    };
    exports.default = _default;
  }
});

// node_modules/kothing-editor/lib/plugins/index.js
var require_plugins = __commonJS({
  "node_modules/kothing-editor/lib/plugins/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "blockquote", {
      enumerable: true,
      get: function get() {
        return _blockquote.default;
      }
    });
    Object.defineProperty(exports, "align", {
      enumerable: true,
      get: function get() {
        return _align.default;
      }
    });
    Object.defineProperty(exports, "font", {
      enumerable: true,
      get: function get() {
        return _font.default;
      }
    });
    Object.defineProperty(exports, "fontSize", {
      enumerable: true,
      get: function get() {
        return _fontSize.default;
      }
    });
    Object.defineProperty(exports, "fontColor", {
      enumerable: true,
      get: function get() {
        return _fontColor.default;
      }
    });
    Object.defineProperty(exports, "hiliteColor", {
      enumerable: true,
      get: function get() {
        return _hiliteColor.default;
      }
    });
    Object.defineProperty(exports, "horizontalRule", {
      enumerable: true,
      get: function get() {
        return _horizontalRule.default;
      }
    });
    Object.defineProperty(exports, "list", {
      enumerable: true,
      get: function get() {
        return _list.default;
      }
    });
    Object.defineProperty(exports, "table", {
      enumerable: true,
      get: function get() {
        return _table.default;
      }
    });
    Object.defineProperty(exports, "formatBlock", {
      enumerable: true,
      get: function get() {
        return _formatBlock.default;
      }
    });
    Object.defineProperty(exports, "lineHeight", {
      enumerable: true,
      get: function get() {
        return _lineHeight.default;
      }
    });
    Object.defineProperty(exports, "template", {
      enumerable: true,
      get: function get() {
        return _template.default;
      }
    });
    Object.defineProperty(exports, "paragraphStyle", {
      enumerable: true,
      get: function get() {
        return _paragraphStyle.default;
      }
    });
    Object.defineProperty(exports, "textStyle", {
      enumerable: true,
      get: function get() {
        return _textStyle.default;
      }
    });
    Object.defineProperty(exports, "link", {
      enumerable: true,
      get: function get() {
        return _link.default;
      }
    });
    Object.defineProperty(exports, "image", {
      enumerable: true,
      get: function get() {
        return _image.default;
      }
    });
    Object.defineProperty(exports, "video", {
      enumerable: true,
      get: function get() {
        return _video.default;
      }
    });
    Object.defineProperty(exports, "audio", {
      enumerable: true,
      get: function get() {
        return _audio.default;
      }
    });
    Object.defineProperty(exports, "math", {
      enumerable: true,
      get: function get() {
        return _math.default;
      }
    });
    Object.defineProperty(exports, "imageGallery", {
      enumerable: true,
      get: function get() {
        return _imageGallery.default;
      }
    });
    exports.default = void 0;
    var _blockquote = _interopRequireDefault(require_blockquote());
    var _align = _interopRequireDefault(require_align());
    var _font = _interopRequireDefault(require_font());
    var _fontSize = _interopRequireDefault(require_fontSize());
    var _fontColor = _interopRequireDefault(require_fontColor());
    var _hiliteColor = _interopRequireDefault(require_hiliteColor());
    var _horizontalRule = _interopRequireDefault(require_horizontalRule());
    var _list = _interopRequireDefault(require_list());
    var _table = _interopRequireDefault(require_table());
    var _formatBlock = _interopRequireDefault(require_formatBlock());
    var _lineHeight = _interopRequireDefault(require_lineHeight());
    var _template = _interopRequireDefault(require_template());
    var _paragraphStyle = _interopRequireDefault(require_paragraphStyle());
    var _textStyle = _interopRequireDefault(require_textStyle());
    var _link = _interopRequireDefault(require_link());
    var _image = _interopRequireDefault(require_image());
    var _video = _interopRequireDefault(require_video());
    var _audio = _interopRequireDefault(require_audio());
    var _math = _interopRequireDefault(require_math());
    var _imageGallery = _interopRequireDefault(require_imageGallery());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      blockquote: _blockquote.default,
      align: _align.default,
      font: _font.default,
      fontSize: _fontSize.default,
      fontColor: _fontColor.default,
      hiliteColor: _hiliteColor.default,
      horizontalRule: _horizontalRule.default,
      list: _list.default,
      table: _table.default,
      formatBlock: _formatBlock.default,
      lineHeight: _lineHeight.default,
      template: _template.default,
      paragraphStyle: _paragraphStyle.default,
      textStyle: _textStyle.default,
      link: _link.default,
      image: _image.default,
      video: _video.default,
      audio: _audio.default,
      math: _math.default,
      imageGallery: _imageGallery.default
    };
    exports.default = _default;
  }
});

// dep:kothing-editor_lib_plugins
var kothing_editor_lib_plugins_default = require_plugins();
export {
  kothing_editor_lib_plugins_default as default
};
//# sourceMappingURL=kothing-editor_lib_plugins.js.map
