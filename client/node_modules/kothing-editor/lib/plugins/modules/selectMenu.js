"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * KothingEditor
 *
 * The WYSIWYG Rich Text Editor
 * Copyright Kothing.
 * MIT license.
 */
var _default = {
  name: "selectMenu",
  add: function add(core) {
    core.context.selectMenu = {
      caller: {},
      callerContext: null
    };
  },
  setForm: function setForm() {
    return '<div class="ke-select-list"></div>';
  },
  createList: function createList(listContext, items, html) {
    listContext.form.innerHTML = "<ul>" + html + "</ul>";
    listContext.items = items;
    listContext.menus = listContext.form.querySelectorAll("li");
  },
  initEvent: function initEvent(pluginName, forms) {
    var form = forms.querySelector(".ke-select-list");
    var context = this.context.selectMenu.caller[pluginName] = {
      form: form,
      items: [],
      menus: [],
      index: -1,
      item: null,
      clickMethod: null,
      callerName: pluginName
    };
    form.addEventListener("mousedown", this.plugins.selectMenu.onMousedown_list);
    form.addEventListener("mousemove", this.plugins.selectMenu.onMouseMove_list.bind(this, context));
    form.addEventListener("click", this.plugins.selectMenu.onClick_list.bind(this, context));
  },
  onMousedown_list: function onMousedown_list(e) {
    e.preventDefault();
    e.stopPropagation();
  },
  onMouseMove_list: function onMouseMove_list(context, e) {
    this.util.addClass(context.form, "__ke_select-menu-mouse-move");
    var index = e.target.getAttribute("data-index");

    if (!index) {
      return;
    }

    context.index = index * 1;
  },
  onClick_list: function onClick_list(context, e) {
    var index = e.target.getAttribute("data-index");

    if (!index) {
      return;
    }

    context.clickMethod.call(this, context.items[index]);
  },
  moveItem: function moveItem(listContext, num) {
    this.util.removeClass(listContext.form, "__ke_select-menu-mouse-move");
    num = listContext.index + num;
    var menus = listContext.menus;
    var len = menus.length;
    var selectIndex = listContext.index = num >= len ? 0 : num < 0 ? len - 1 : num;

    for (var i = 0; i < len; i++) {
      if (i === selectIndex) {
        this.util.addClass(menus[i], "active");
      } else {
        this.util.removeClass(menus[i], "active");
      }
    }

    listContext.item = listContext.items[selectIndex];
  },
  getItem: function getItem(listContext, index) {
    index = !index || index < 0 ? listContext.index : index;
    return listContext.items[index];
  },
  on: function on(callerName, clickMethod) {
    var listContext = this.context.selectMenu.caller[callerName];
    this.context.selectMenu.callerContext = listContext;
    listContext.clickMethod = clickMethod;
    listContext.callerName = callerName;
  },
  open: function open(listContext, positionHandler) {
    var form = listContext.form;
    form.style.visibility = "hidden";
    form.style.display = "block";
    positionHandler(form);
    form.style.visibility = "";
  },
  close: function close(listContext) {
    listContext.form.style.display = "none";
    listContext.items = [];
    listContext.menus = [];
    listContext.index = -1;
    listContext.item = null;
  },
  init: function init(listContext) {
    if (!listContext) {
      return;
    }

    listContext.items = [];
    listContext.menus = [];
    listContext.index = -1;
    listContext.item = null;
    listContext.callerName = "";
    this.context.selectMenu.callerContext = null;
  }
};
exports.default = _default;