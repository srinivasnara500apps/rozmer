"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dialog2 = _interopRequireDefault(require("../modules/dialog"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * KothingEditor
 *
 * The WYSIWYG Rich Text Editor
 * Copyright Kothing.
 * MIT license.
 */
function insertAt(parent, child, index) {
  if (!index) {
    index = 0;
  }

  if (index >= parent.children.length) {
    parent.appendChild(child);
  } else {
    parent.insertBefore(child, parent.children[index]);
  }
}

var _default = {
  name: "mention",
  display: "dialog",
  renderItem: function renderItem(item) {
    return "<span>".concat(item, "</span>");
  },
  getItems: function getItems(term) {
    return Promise.resolve(["overwite", "the", "mention", "plugin", "getItems", "method"].filter(function (w) {
      return w.includes(term.toLowerCase());
    }));
  },
  renderList: function renderList(term) {
    var _this = this;

    var mention = this.context.mention;
    var promise = Promise.resolve();

    if (mention.term !== term) {
      mention.focussed = 0;
      mention.term = term;
      promise = mention.getItems(term).then(function (items) {
        mention._items = items;
        Object.keys(mention._itemElements).forEach(function (id) {
          if (!items.find(function (i) {
            return mention.getId(i) === id;
          })) {
            var child = mention._itemElements[id];
            child.parentNode.removeChild(child);
            delete mention._itemElements[id];
          }
        });
        items.forEach(function (item, idx) {
          var id = mention.getId(item);

          if (!mention._itemElements[id]) {
            var el = _this.util.createElement("LI");

            el.setAttribute("data-mention", id);

            _this.util.addClass(el, "ke-mention-item");

            el.innerHTML = mention.renderItem(item);
            el.addEventListener("click", function () {
              mention._addMention(item);
            });
            insertAt(mention._list, el, idx);
            mention._itemElements[id] = el;
          }
        });
      });
    }

    promise.then(function () {
      var current = mention._list.querySelectorAll(".ke-mention-item")[mention.focussed];

      if (current && !_this.util.hasClass(current, "ke-mention-active")) {
        var prev = mention._list.querySelector(".ke-mention-active");

        if (prev) {
          _this.util.removeClass(prev, "ke-mention-active");
        }

        _this.util.addClass(current, "ke-mention-active");
      }
    });
  },
  setDialog: function setDialog(core) {
    var mention_dialog = core.util.createElement("DIV");
    var lang = core.lang;
    mention_dialog.className = "ke-dialog-content";
    mention_dialog.style.display = "none";
    var html = "\n      <form class=\"ke-dialog-form\">\n        <div class=\"ke-dialog-header\">\n          <button type=\"button\" data-command=\"close\" class=\"ke-btn ke-dialog-close\" aria-label=\"Close\" title=\"".concat(lang.dialogBox.close, "\">\n            ").concat(core.icons.cancel, "\n          </button>\n          <span class=\"ke-modal-title\">").concat(lang.dialogBox.mentionBox.title, "</span>\n        </div>\n        <div class=\"ke-dialog-body\">\n          <input class=\"ke-input-form ke-mention-search\" type=\"text\" placeholder=\"").concat(lang.dialogBox.browser.search, "\" />\n          <ul class=\"ke-mention-list\">\n          </ul>\n        </div>\n      </form>\n    ");
    mention_dialog.innerHTML = html;
    return mention_dialog;
  },
  getId: function getId(mention) {
    return mention;
  },
  getValue: function getValue(mention) {
    return "@".concat(mention);
  },
  getLinkHref: function getLinkHref()
  /*mention*/
  {
    return "";
  },
  open: function open() {
    var mention = this.context.mention;
    this.plugins.dialog.open.call(this, "mention", "mention" === this.currentControllerName);

    mention._search.focus();

    mention.renderList("");
  },
  on: function on(update) {
    if (update) {
      return;
    }

    this.plugins.mention.init.call(this);
  },
  init: function init() {
    var mention = this.context.mention;
    mention._search.value = "";
    mention.focussed = 0;
    mention._items = [];
    mention._itemElements = {};
    mention._list.innerHTML = "";
    delete mention.term;
  },
  onKeyPress: function onKeyPress(e) {
    var mention = this.context.mention;

    switch (e.key) {
      case "ArrowDown":
        mention.focussed += 1;
        e.preventDefault();
        e.stopPropagation();
        break;

      case "ArrowUp":
        if (mention.focussed > 0) {
          mention.focussed -= 1;
        }

        e.preventDefault();
        e.stopPropagation();
        break;

      case "Enter":
        mention._addMention();

        e.preventDefault();
        e.stopPropagation();
        break;

      default:
    }
  },
  onKeyUp: function onKeyUp(e) {
    var mention = this.context.mention;
    mention.renderList(e.target.value);
  },
  getMentions: function getMentions(core) {
    var _core$context$mention = core.context.mention,
        mentions = _core$context$mention.mentions,
        getId = _core$context$mention.getId;
    return mentions.filter(function (mention) {
      var id = getId(mention);
      return core.context.element.wysiwyg.querySelector("[data-mention=\"".concat(id, "\"]"));
    });
  },
  _addMention: function _addMention(item) {
    var mention = this.context.mention;
    var new_mention = item || mention._items[mention.focussed];

    if (new_mention) {
      if (!mention.mentions.find(function (m) {
        return mention.getId(m) === mention.getId(new_mention);
      })) {
        mention.mentions.push(new_mention);
      }

      var el = this.util.createElement("A");
      el.href = mention.getLinkHref(new_mention);
      el.target = "_blank";
      el.innerHTML = mention.getValue(new_mention);
      el.setAttribute("data-mention", mention.getId(new_mention));
      this.insertNode(el, null, false);
      var spacer = this.util.createElement("SPAN");
      spacer.innerHTML = " ";
      this.insertNode(spacer, el, false);
    }

    this.plugins.dialog.close.call(this);
  },
  add: function add(core) {
    core.addModule([_dialog2.default]);
    this.title = core.lang.toolbar.mention;

    var _dialog = this.setDialog(core);

    core.getMentions = this.getMentions(core);

    var _search = _dialog.querySelector(".ke-mention-search");

    _search.addEventListener("keyup", this.onKeyUp.bind(core));

    _search.addEventListener("keydown", this.onKeyPress.bind(core));

    var _list = _dialog.querySelector(".ke-mention-list");

    core.context.mention = {
      _addMention: this._addMention.bind(core),
      _itemElements: {},
      _items: [],
      _list: _list,
      _search: _search,
      focussed: 0,
      getId: this.getId.bind(core),
      getItems: this.getItems,
      getLinkHref: this.getLinkHref.bind(core),
      getValue: this.getValue.bind(core),
      mentions: [],
      modal: _dialog,
      open: this.open.bind(core),
      renderItem: this.renderItem,
      renderList: this.renderList.bind(core)
    };
    core.context.dialog.modal.appendChild(_dialog);
  },
  action: function action() {}
};
exports.default = _default;