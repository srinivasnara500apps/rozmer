"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dialog = _interopRequireDefault(require("../modules/dialog"));

var _anchor = _interopRequireDefault(require("../modules/anchor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * KothingEditor
 *
 * The WYSIWYG Rich Text Editor
 * Copyright Kothing.
 * MIT license.
 */
var _default = {
  name: "link",
  display: "dialog",
  add: function add(core) {
    core.addModule([_dialog.default, _anchor.default]);
    var context = core.context;
    var contextLink = context.link = {
      focusElement: null,
      // @Override dialog // This element has focus when the dialog is opened.
      _linkAnchor: null,
      anchorCtx: null
    };
    /** link dialog */

    var link_dialog = this.setDialog(core);
    contextLink.modal = link_dialog;
    /** link controller */

    var link_controller = this.setController_LinkButton(core);
    contextLink.linkController = link_controller;
    link_dialog.querySelector("form").addEventListener("submit", this.submit.bind(core));
    link_controller.addEventListener("click", this.onClick_linkController.bind(core));
    /** append html */

    context.dialog.modal.appendChild(link_dialog);
    /** append controller */

    context.element.relative.appendChild(link_controller);
    /** link event */

    core.plugins.anchor.initEvent.call(core, "link", link_dialog);
    contextLink.focusElement = context.anchor.caller.link.urlInput;
    /** empty memory */

    link_dialog = null, link_controller = null;
  },

  /** dialog */
  setDialog: function setDialog(core) {
    var lang = core.lang;
    var dialog = core.util.createElement("DIV");
    var icons = core.icons;
    dialog.className = "ke-dialog-content";
    dialog.style.display = "none";
    var html = "" + "<form>" + '<div class="ke-dialog-header">' + '<button type="button" data-command="close" class="ke-btn ke-dialog-close" aria-label="Close" title="' + lang.dialogBox.close + '">' + icons.cancel + "</button>" + '<span class="ke-modal-title">' + lang.dialogBox.linkBox.title + "</span>" + "</div>" + core.context.anchor.forms.innerHTML + '<div class="ke-dialog-footer">' + '<button type="submit" class="ke-btn-primary" title="' + lang.dialogBox.submitButton + '"><span>' + lang.dialogBox.submitButton + "</span></button>" + "</div>" + "</form>";
    dialog.innerHTML = html;
    return dialog;
  },

  /** modify controller button */
  setController_LinkButton: function setController_LinkButton(core) {
    var lang = core.lang;
    var icons = core.icons;
    var link_btn = core.util.createElement("DIV");
    link_btn.className = "ke-controller ke-controller-link";
    link_btn.innerHTML = "" + '<div class="ke-arrow ke-arrow-up"></div>' + '<div class="link-content"><span><a target="_blank" href=""></a>&nbsp;</span>' + '<div class="ke-btn-group">' + '<button type="button" data-command="update" tabindex="-1" class="ke-btn ke-tooltip">' + icons.edit + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.edit + "</span></span>" + "</button>" + '<button type="button" data-command="unlink" tabindex="-1" class="ke-btn ke-tooltip">' + icons.unlink + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.unlink + "</span></span>" + "</button>" + '<button type="button" data-command="delete" tabindex="-1" class="ke-btn ke-tooltip">' + icons.delete + '<span class="ke-tooltip-inner"><span class="ke-tooltip-text">' + lang.controller.remove + "</span></span>" + "</button>" + "</div>" + "</div>";
    return link_btn;
  },

  /**
   * @Override dialog
   */
  open: function open() {
    this.plugins.dialog.open.call(this, "link", "link" === this.currentControllerName);
  },
  submit: function submit(e) {
    this.showLoading();
    e.preventDefault();
    e.stopPropagation();

    try {
      var oA = this.plugins.anchor.createAnchor.call(this, this.context.anchor.caller.link, false);

      if (!this.context.dialog.updateModal) {
        var selectedFormats = this.getSelectedElements();

        if (selectedFormats.length > 1) {
          var oFormat = this.util.createElement(selectedFormats[0].nodeName);
          oFormat.appendChild(oA);

          if (!this.insertNode(oFormat, null, true)) {
            return;
          }
        } else {
          if (!this.insertNode(oA, null, true)) {
            return;
          }
        }

        this.setRange(oA.childNodes[0], 0, oA.childNodes[0], oA.textContent.length);
      } else {
        // set range
        var textNode = this.context.link._linkAnchor.childNodes[0];
        this.setRange(textNode, 0, textNode, textNode.textContent.length);
      }
    } finally {
      this.plugins.dialog.close.call(this);
      this.closeLoading(); // history stack

      this.history.push(false);
    }

    return false;
  },

  /**
   * @Override core
   */
  active: function active(element) {
    if (!element) {
      if (this.controllerArray.indexOf(this.context.link.linkController) > -1) {
        this.controllersOff();
      }
    } else if (this.util.isAnchor(element) && element.getAttribute("data-image-link") === null) {
      if (this.controllerArray.indexOf(this.context.link.linkController) < 0) {
        this.plugins.link.call_controller.call(this, element);
      }

      return true;
    }

    return false;
  },

  /**
   * @Override dialog
   */
  on: function on(update) {
    this.plugins.anchor.on.call(this, this.context.anchor.caller.link, update);
  },
  call_controller: function call_controller(selectionATag) {
    this.editLink = this.context.link._linkAnchor = this.context.anchor.caller.link.linkAnchor = selectionATag;
    var linkBtn = this.context.link.linkController;
    var link = linkBtn.querySelector("a");
    link.href = selectionATag.href;
    link.title = selectionATag.textContent;
    link.textContent = selectionATag.textContent;
    this.util.addClass(selectionATag, "on");
    this.setControllerPosition(linkBtn, selectionATag, "bottom", {
      left: 0,
      top: 0
    });
    this.controllersOn(linkBtn, selectionATag, "link", this.util.removeClass.bind(this.util, this.context.link._linkAnchor, "on"));
  },
  onClick_linkController: function onClick_linkController(e) {
    e.stopPropagation();
    var command = e.target.getAttribute("data-command") || e.target.parentNode.getAttribute("data-command");

    if (!command) {
      return;
    }

    e.preventDefault();

    if (/update/.test(command)) {
      this.plugins.dialog.open.call(this, "link", true);
    } else if (/unlink/.test(command)) {
      var sc = this.util.getChildElement(this.context.link._linkAnchor, function (current) {
        return current.childNodes.length === 0 || current.nodeType === 3;
      }, false);
      var ec = this.util.getChildElement(this.context.link._linkAnchor, function (current) {
        return current.childNodes.length === 0 || current.nodeType === 3;
      }, true);
      this.setRange(sc, 0, ec, ec.textContent.length);
      this.nodeChange(null, null, ["A"], false);
    } else {
      /** delete */
      this.util.removeItem(this.context.link._linkAnchor);
      this.context.anchor.caller.link.linkAnchor = null;
      this.focus(); // history stack

      this.history.push(false);
    }

    this.controllersOff();
  },

  /**
   * @Override dialog
   */
  init: function init() {
    this.context.link.linkController.style.display = "none";
    this.plugins.anchor.init.call(this, this.context.anchor.caller.link);
  }
};
exports.default = _default;