"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * KothingEditor
 *
 * The WYSIWYG Rich Text Editor
 * Copyright Kothing.
 * MIT license.
 */
var _default = {
  name: "align",
  display: "submenu",
  add: function add(core, targetElement) {
    var icons = core.icons;
    var context = core.context;
    context.align = {
      targetButton: targetElement,
      _alignList: null,
      currentAlign: "",
      defaultDir: core.options.rtl ? "right" : "left",
      icons: {
        justify: icons.align_justify,
        left: icons.align_left,
        right: icons.align_right,
        center: icons.align_center
      }
    };
    /** set submenu */

    var listDiv = this.setSubmenu(core);
    var listUl = listDiv.querySelector("ul");
    /** add event listeners */

    listUl.addEventListener("click", this.pickup.bind(core));
    context.align._alignList = listUl.querySelectorAll("li button");
    /** append target button menu */

    core.initMenuTarget(this.name, targetElement, listDiv);
    /** empty memory */

    listDiv = null, listUl = null;
  },
  setSubmenu: function setSubmenu(core) {
    var lang = core.lang;
    var icons = core.icons;
    var listDiv = core.util.createElement("DIV");
    var leftDir = core.context.align.defaultDir === "left";
    var leftMenu = "<li>" + '<button type="button" class="ke-btn-list ke-btn-align" data-command="justifyleft" data-value="left" title="' + lang.toolbar.alignLeft + '">' + '<span class="ke-list-icon">' + icons.align_left + "</span>" + lang.toolbar.alignLeft + "</button>" + "</li>";
    var rightMenu = "<li>" + '<button type="button" class="ke-btn-list ke-btn-align" data-command="justifyright" data-value="right" title="' + lang.toolbar.alignRight + '">' + '<span class="ke-list-icon">' + icons.align_right + "</span>" + lang.toolbar.alignRight + "</button>" + "</li>";
    listDiv.className = "ke-submenu ke-list-layer ke-list-align";
    listDiv.innerHTML = "" + '<div class="ke-list-inner">' + '<ul class="ke-list-basic">' + (leftDir ? leftMenu : rightMenu) + "<li>" + '<button type="button" class="ke-btn-list ke-btn-align" data-command="justifycenter" data-value="center" title="' + lang.toolbar.alignCenter + '">' + '<span class="ke-list-icon">' + icons.align_center + "</span>" + lang.toolbar.alignCenter + "</button>" + "</li>" + (leftDir ? rightMenu : leftMenu) + "<li>" + '<button type="button" class="ke-btn-list ke-btn-align" data-command="justifyfull" data-value="justify" title="' + lang.toolbar.alignJustify + '">' + '<span class="ke-list-icon">' + icons.align_justify + "</span>" + lang.toolbar.alignJustify + "</button>" + "</li>" + "</ul>" + "</div>";
    return listDiv;
  },

  /**
   * @Override core
   */
  active: function active(element) {
    var alignContext = this.context.align;
    var targetButton = alignContext.targetButton;
    var target = targetButton.firstElementChild;

    if (!element) {
      this.util.changeElement(target, alignContext.icons[alignContext.defaultDir]);
      targetButton.removeAttribute("data-focus");
    } else if (this.util.isFormatElement(element)) {
      var textAlign = element.style.textAlign;

      if (textAlign) {
        this.util.changeElement(target, alignContext.icons[textAlign] || alignContext.icons[alignContext.defaultDir]);
        targetButton.setAttribute("data-focus", textAlign);
        return true;
      }
    }

    return false;
  },

  /**
   * @Override submenu
   */
  on: function on() {
    var alignContext = this.context.align;
    var alignList = alignContext._alignList;
    var currentAlign = alignContext.targetButton.getAttribute("data-focus") || alignContext.defaultDir;

    if (currentAlign !== alignContext.currentAlign) {
      for (var i = 0, len = alignList.length; i < len; i++) {
        if (currentAlign === alignList[i].getAttribute("data-value")) {
          this.util.addClass(alignList[i], "active");
        } else {
          this.util.removeClass(alignList[i], "active");
        }
      }

      alignContext.currentAlign = currentAlign;
    }
  },
  pickup: function pickup(e) {
    e.preventDefault();
    e.stopPropagation();
    var target = e.target;
    var value = null;

    while (!value && !/UL/i.test(target.tagName)) {
      value = target.getAttribute("data-value");
      target = target.parentNode;
    }

    if (!value) {
      return;
    }

    var defaultDir = this.context.align.defaultDir;
    var selectedFormsts = this.getSelectedElements();

    for (var i = 0, len = selectedFormsts.length; i < len; i++) {
      this.util.setStyle(selectedFormsts[i], "textAlign", value === defaultDir ? "" : value);
    }

    this.effectNode = null;
    this.submenuOff();
    this.focus(); // history stack

    this.history.push(false);
  }
};
exports.default = _default;